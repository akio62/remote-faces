{"version":3,"sources":["hooks/useVideoShare.ts","components/VideoShare.tsx","hooks/useNicknameMap.ts"],"names":["videoType","Video","React","memo","nickname","stream","videoRef","useRef","useEffect","current","srcObject","className","ref","autoPlay","muted","VideoShare","roomId","userId","videoDevices","useVideoDevices","useState","videoDeviceId","setVideoDeviceId","enabled","setEnabled","videoStream","setVideoStream","videoStreamMap","setVideoStreamMap","cleanupFns","forEach","fn","trackMap","useProxy","getRoomState","Object","entries","uid","track","getTracks","includes","prev","MediaStream","onended","addEventListener","push","removeEventListener","roomState","addMediaType","removeMediaType","dispose","a","getVideoStream","result","getVideoTracks","addTrack","removeTrack","useVideoShare","nicknameMap","useNicknameMap","numOfVideos","values","filter","x","length","value","onChange","e","target","map","videoDevice","deviceId","label","type","onClick","style","gridTemplateColumns","Math","ceil","sqrt","keys","screenUserId","setNicknameMap","ydoc","getMap","listener","copied","changed","data","isObject","info","observe","unobserve"],"mappings":"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","file":"static/js/18.1e5d4887.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { useProxy } from \"valtio\";\n\nimport { getVideoStream } from \"../media/video\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst videoType = \"cameraVideo\";\n\nexport const useVideoShare = (\n  roomId: string,\n  userId: string,\n  enabled: boolean,\n  setEnabled: (enabled: boolean) => void,\n  videoDeviceId?: string\n) => {\n  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);\n  const [videoStreamMap, setVideoStreamMap] = useState<{\n    [userId: string]: MediaStream | null;\n  }>({});\n\n  type CleanupFn = () => void;\n  const cleanupFns = useRef<CleanupFn[]>([]);\n  useEffect(() => {\n    const cleanup = () => {\n      cleanupFns.current.forEach((fn) => fn());\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = ([uid, track]: [string, MediaStreamTrack]) => {\n    if (videoStreamMap[uid]?.getTracks().includes(track)) return;\n    setVideoStreamMap((prev) => ({\n      ...prev,\n      [uid]: new MediaStream([track]),\n    }));\n    const onended = () => {\n      setVideoStreamMap((prev) => ({\n        ...prev,\n        [uid]: null,\n      }));\n    };\n    track.addEventListener(\"ended\", onended);\n    cleanupFns.current.push(() => {\n      track.removeEventListener(\"ended\", onended);\n    });\n  };\n\n  const trackMap = useProxy(getRoomState(roomId, userId).trackMap);\n  Object.entries(trackMap[videoType] || {}).forEach(onTrack);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    roomState.addMediaType(videoType);\n    return () => {\n      roomState.removeMediaType(videoType);\n    };\n  }, [roomId, userId]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let dispose: (() => void) | null = null;\n    if (enabled) {\n      (async () => {\n        const result = await getVideoStream(videoDeviceId);\n        const [track] = result.stream.getVideoTracks();\n        roomState.addTrack(videoType, track);\n        setVideoStream(result.stream);\n        dispose = () => {\n          roomState.removeTrack(videoType);\n          result.dispose();\n          setVideoStream(null);\n          setEnabled(false);\n        };\n        track.addEventListener(\"ended\", () => {\n          if (dispose) dispose();\n          dispose = null;\n        });\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, userId, videoDeviceId, enabled, setEnabled]);\n\n  return { videoStream, videoStreamMap };\n};\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport \"./VideoShare.css\";\nimport { useVideoShare } from \"../hooks/useVideoShare\";\nimport { useVideoDevices } from \"../hooks/useAvailableDevices\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Video = React.memo<{\n  nickname: string;\n  stream: MediaStream;\n}>(({ nickname, stream }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (stream && videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return (\n    <div>\n      <div className=\"VideoShare-nickname\">{nickname}</div>\n      <video className=\"VideoShare-video\" ref={videoRef} autoPlay muted />\n    </div>\n  );\n});\n\nexport const VideoShare = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n}>(({ roomId, userId, nickname }) => {\n  const videoDevices = useVideoDevices();\n  const [videoDeviceId, setVideoDeviceId] = useState<string>();\n  const [enabled, setEnabled] = useState(false);\n  const { videoStream, videoStreamMap } = useVideoShare(\n    roomId,\n    userId,\n    enabled,\n    setEnabled,\n    videoDeviceId\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n  const numOfVideos =\n    (videoStream ? 1 : 0) +\n    Object.values(videoStreamMap).filter((x) => x).length;\n\n  return (\n    <div className=\"VideoShare-container\">\n      <div>\n        Select Camera:{\" \"}\n        <select\n          value={videoDeviceId}\n          onChange={(e) => setVideoDeviceId(e.target.value)}\n        >\n          {videoDevices.map((videoDevice) => (\n            <option key={videoDevice.deviceId} value={videoDevice.deviceId}>\n              {videoDevice.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <button type=\"button\" onClick={() => setEnabled(!enabled)}>\n        {enabled ? \"Stop video share\" : \"Start video share\"}\n      </button>\n      <div\n        className=\"VideoShare-body\"\n        style={{\n          gridTemplateColumns: `repeat(${Math.ceil(\n            Math.sqrt(numOfVideos)\n          )}, 1fr)`,\n        }}\n      >\n        {videoStream && <Video nickname={nickname} stream={videoStream} />}\n        {Object.keys(videoStreamMap).map((screenUserId) => {\n          const stream = videoStreamMap[screenUserId];\n          if (!stream) return null;\n          return (\n            <Video\n              key={screenUserId}\n              nickname={nicknameMap[screenUserId] || \"No Name\"}\n              stream={stream}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default VideoShare;\n","import { useEffect, useState } from \"react\";\n\nimport { isObject } from \"../utils/types\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst hasInfoNickname = (x: unknown): x is { info: { nickname: string } } =>\n  isObject(x) &&\n  isObject((x as { info: unknown }).info) &&\n  typeof (x as { info: { nickname: unknown } }).info.nickname === \"string\";\n\ntype NicknameMap = {\n  [userId: string]: string;\n};\n\nexport const useNicknameMap = (roomId: string, userId: string) => {\n  const [nicknameMap, setNicknameMap] = useState<NicknameMap>({});\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const listener = () => {\n      setNicknameMap((prev) => {\n        const copied = { ...prev };\n        let changed = false;\n        map.forEach((data, uid) => {\n          if (uid === userId) return;\n          if (!hasInfoNickname(data)) return;\n          if (!copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          } else if (data.info.nickname !== copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          }\n        });\n        if (changed) {\n          return copied;\n        }\n        return prev;\n      });\n    };\n    map.observe(listener);\n    listener();\n    return () => {\n      map.unobserve(listener);\n    };\n  }, [roomId, userId]);\n\n  return nicknameMap;\n};\n"],"sourceRoot":""}