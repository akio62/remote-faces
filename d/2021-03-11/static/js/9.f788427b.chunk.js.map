{"version":3,"sources":["utils/types.ts","utils/sleep.ts","states/roomMap.ts","components/Loading.tsx","media/capture.ts","hooks/useFaceImages.ts","components/FaceImages.tsx","components/ControlPanel.tsx","components/SelectivePane.tsx","components/SingleRoom.tsx","media/video.ts","media/audio.ts","hooks/useFaceVideos.ts"],"names":["isObject","x","hasStringProp","prop","hasObjectProp","sleep","ms","Promise","resolve","setTimeout","roomMap","Map","getRoomState","roomId","userId","key","has","state","addMediaType","type","a","acceptingMediaTypes","includes","console","log","push","roomPromise","acceptMediaTypes","snapshot","removeMediaType","index","indexOf","splice","addTrack","track","removeTrack","dispose","proxy","networkStatusList","userIdMap","ydoc","ref","Y","trackMap","on","update","base64","btoa","String","fromCharCode","then","room","broadcastData","ydocUpdate","createRoom","status","unshift","length","pop","Object","entries","forEach","uid","peerIndex","data","sendData","info","binaryString","atob","Uint8Array","map","call","c","charCodeAt","mediaType","createRoomState","set","get","Loading","React","memo","className","captureImage","stream","ImageCapture","imageCapture","takePhoto","blob","createImageBitmap","srcImg","grabFrame","srcW","width","srcH","height","video","document","createElement","autoplay","setAttribute","style","display","position","bottom","body","appendChild","removeChild","srcObject","videoWidth","videoHeight","deviceId","constraints","navigator","mediaDevices","getUserMedia","getVideoTracks","canvas","ctx","getContext","dstW","dstH","ratio","Math","max","min","y","drawImage","stop","toDataURL","isImageData","image","nickname","message","liveMode","micOn","speakerOn","isFaceInfo","updated","FaceImage","statusMesg","obsoleted","muted","opacity","videoEle","autoPlay","playsInline","src","BLANK_IMAGE","alt","title","FaceImages","avatar","suspended","videoDeviceId","audioDeviceId","useState","myImage","setMyImage","roomImages","setRoomImages","fatalError","setFatalError","useEffect","roomState","getMap","listener","prev","twoMinAgo","Date","now","copied","changed","findIndex","item","observe","unsub","subscribe","next","filter","unobserve","timer","checkObsoletedImage","tenMinAgo","flatMap","didCleanup","loop","clearTimeout","useFaceImages","useFaceVideos","faceStream","faceStreamMap","undefined","ControlPanel","setSuspended","setLiveMode","setMicOn","setSpeakerOn","secondColumnOpen","setSecondColumnOpen","onClick","onChange","e","target","value","Error","components","Welcome","lazy","SelectivePane","setStatusMesg","activePane","setActivePane","multiple","size","keys","name","idx","fallback","SuspenseFallback","SingleRoom","useProxy","singleRoomState","config","setRoomIdToUrl","getVideoStream","getFaceVideoStream","frameRate","exact","getAudioStream","audio","getAudioTracks","applyConstraints","echoCancellation","echoCancellationType","ideal","noiseSuppression","addTrackToStream","disposeStream","newStream","MediaStream","dispatchEvent","MediaStreamTrackEvent","addEventListener","getTracks","videoEnabled","audioEnabled","uniqueMediaId","videoType","audioType","setFaceStream","setFaceStreamMap","isMounted","useRef","current","onTrack","s","oldStream","rest","videoStream","disposeVideo","videoTrack","Event","audioStream","disposeAudio","audioTrack","enabled","onaddtrack","event","kind","removeEventListener"],"mappings":"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","file":"static/js/9.f788427b.chunk.js","sourcesContent":["export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<\n  F extends (...args: any) => any\n> = ReturnType<F> extends Promise<infer T> ? T : never;\n","export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { proxy, snapshot, ref } from \"valtio\";\nimport * as Y from \"yjs\";\n\nimport { PeerInfo, createRoom, NetworkStatus } from \"../network/room\";\n\ntype RoomState = {\n  networkStatusList: NetworkStatus[];\n  userIdMap: { [userId: string]: number }; // peerIndex\n  ydoc: Y.Doc;\n  acceptingMediaTypes: string[];\n  trackMap: {\n    [mediaType: string]: {\n      [userId: string]: MediaStreamTrack;\n    };\n  };\n  addMediaType: (type: string) => Promise<void>;\n  removeMediaType: (type: string) => Promise<void>;\n  addTrack: (type: string, track: MediaStreamTrack) => Promise<void>;\n  removeTrack: (type: string) => Promise<void>;\n  dispose: () => Promise<void>;\n};\n\nconst createRoomState = (roomId: string, userId: string) => {\n  const addMediaType = async (type: string) => {\n    if (state.acceptingMediaTypes.includes(type)) {\n      console.log(\"media type already added\", type);\n      return;\n    }\n    state.acceptingMediaTypes.push(type);\n    const room = await roomPromise;\n    room.acceptMediaTypes(snapshot(state.acceptingMediaTypes));\n  };\n  const removeMediaType = async (type: string) => {\n    const index = state.acceptingMediaTypes.indexOf(type);\n    if (index === -1) {\n      console.log(\"media type already added\", type);\n      return;\n    }\n    state.acceptingMediaTypes.splice(index, 1);\n    const room = await roomPromise;\n    room.acceptMediaTypes(snapshot(state.acceptingMediaTypes));\n  };\n  const addTrack = async (type: string, track: MediaStreamTrack) => {\n    const room = await roomPromise;\n    room.addTrack(type, track);\n  };\n  const removeTrack = async (type: string) => {\n    const room = await roomPromise;\n    room.removeTrack(type);\n  };\n  const dispose = async () => {\n    const room = await roomPromise;\n    room.dispose();\n  };\n  const state = proxy<RoomState>({\n    networkStatusList: [],\n    userIdMap: {},\n    ydoc: ref(new Y.Doc()),\n    acceptingMediaTypes: [],\n    trackMap: {},\n    addMediaType,\n    removeMediaType,\n    addTrack,\n    removeTrack,\n    dispose,\n  });\n  const updateNetworkStatus = (status: NetworkStatus) => {\n    state.networkStatusList.unshift(status);\n    if (state.networkStatusList.length > 10) {\n      state.networkStatusList.pop();\n    }\n    if (status?.type === \"CONNECTION_CLOSED\") {\n      Object.entries(state.userIdMap).forEach(([uid, idx]) => {\n        if (idx === status.peerIndex) {\n          delete state.userIdMap[uid];\n        }\n      });\n    }\n  };\n  const notifyNewPeer = (peerIndex: number) => {\n    const update = Y.encodeStateAsUpdate(state.ydoc);\n    const base64 = btoa(String.fromCharCode(...update));\n    const data = { ydocUpdate: base64 };\n    roomPromise.then((room) => {\n      room.sendData(data, peerIndex);\n    });\n  };\n  const receiveData = (data: any, info: PeerInfo) => {\n    state.userIdMap[info.userId] = info.peerIndex;\n    if (data?.ydocUpdate) {\n      const binaryString = atob(data.ydocUpdate);\n      const update = new Uint8Array(\n        ([].map.call(binaryString, (c: string) =>\n          c.charCodeAt(0)\n        ) as unknown) as ArrayBufferLike\n      );\n      Y.applyUpdate(state.ydoc, update);\n    }\n  };\n  state.ydoc.on(\"update\", (update: Uint8Array) => {\n    const base64 = btoa(String.fromCharCode(...update));\n    roomPromise.then((room) => {\n      room.broadcastData({ ydocUpdate: base64 });\n    });\n  });\n  const receiveTrack = (\n    mediaType: string,\n    track: MediaStreamTrack,\n    info: PeerInfo\n  ) => {\n    if (!state.trackMap[mediaType]) {\n      state.trackMap[mediaType] = {};\n    }\n    state.trackMap[mediaType][info.userId] = ref(track);\n  };\n  const roomPromise = createRoom(\n    roomId,\n    userId,\n    updateNetworkStatus,\n    notifyNewPeer,\n    receiveData,\n    receiveTrack\n  );\n  return state;\n};\n\nconst roomMap = new Map<string, RoomState>();\n\nexport const getRoomState = (roomId: string, userId: string) => {\n  const key = `${roomId}:${userId}`;\n  if (!roomMap.has(key)) {\n    const state = createRoomState(roomId, userId);\n    roomMap.set(key, state);\n  }\n  return roomMap.get(key) as RoomState;\n};\n\nexport const disposeRoomState = (roomId: string, userId: string) => {\n  const key = `${roomId}:${userId}`;\n  const state = roomMap.get(key);\n  if (state) {\n    roomMap.delete(key);\n    state.dispose();\n  }\n};\n","import React from \"react\";\n\nimport \"./Loading.css\";\n\nexport const Loading = React.memo(() => (\n  <div className=\"Loading-container\">\n    <div className=\"loader\">\n      <div>Loading...</div>\n    </div>\n  </div>\n));\n","import { sleep } from \"../utils/sleep\";\n\nconst captureImage = async (stream: MediaStream, track: MediaStreamTrack) => {\n  if (typeof ImageCapture !== \"undefined\") {\n    const imageCapture = new ImageCapture(track);\n    await sleep(2000);\n    let srcImg: ImageBitmap;\n    try {\n      const blob = await imageCapture.takePhoto();\n      srcImg = await createImageBitmap(blob);\n    } catch (e) {\n      srcImg = await imageCapture.grabFrame();\n    }\n    const srcW = srcImg.width;\n    const srcH = srcImg.height;\n    return { srcImg, srcW, srcH };\n  }\n  const video = document.createElement(\"video\");\n  video.autoplay = true;\n  video.setAttribute(\"playsinline\", \"\");\n  video.style.display = \"block\";\n  video.style.width = \"1px\";\n  video.style.height = \"1px\";\n  video.style.position = \"absolute\";\n  video.style.bottom = \"0\";\n  document.body.appendChild(video);\n  const dispose = () => {\n    document.body.removeChild(video);\n  };\n  video.srcObject = stream;\n  await sleep(2000);\n  const srcImg = video;\n  const srcW = video.videoWidth;\n  const srcH = video.videoHeight;\n  return { srcImg, srcW, srcH, dispose };\n};\n\nexport const takePhoto = async (deviceId?: string) => {\n  const constraints = deviceId\n    ? {\n        video: { deviceId },\n      }\n    : { video: true };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getVideoTracks();\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const dstW = 72;\n  const dstH = 72;\n  canvas.width = dstW;\n  canvas.height = dstH;\n  const { srcImg, srcW, srcH, dispose } = await captureImage(stream, track);\n  const ratio = Math.max(dstW / srcW, dstH / srcH);\n  const width = Math.min(srcW, dstW / ratio);\n  const height = Math.min(srcH, dstH / ratio);\n  const x = (srcW - width) / 2;\n  const y = (srcH - height) / 2;\n  ctx.drawImage(srcImg, x, y, width, height, 0, 0, dstW, dstH);\n  if (dispose) {\n    dispose();\n  }\n  track.stop();\n  return canvas.toDataURL(\"image/jpeg\");\n};\n","import { useEffect, useState } from \"react\";\nimport { subscribe } from \"valtio\";\n\nimport { isObject } from \"../utils/types\";\nimport { takePhoto } from \"../media/capture\";\nimport { getRoomState } from \"../states/roomMap\";\n\ntype ImageUrl = string;\n\ntype FaceInfo = {\n  nickname: string;\n  message: string;\n  liveMode: boolean;\n  micOn: boolean;\n  speakerOn: boolean;\n};\n\nconst isFaceInfo = (x: unknown): x is FaceInfo =>\n  isObject(x) &&\n  typeof (x as { nickname: unknown }).nickname === \"string\" &&\n  typeof (x as { message: unknown }).message === \"string\" &&\n  typeof (x as { liveMode: unknown }).liveMode === \"boolean\" &&\n  typeof (x as { micOn: unknown }).micOn === \"boolean\" &&\n  typeof (x as { speakerOn: unknown }).speakerOn === \"boolean\";\n\ntype ImageData = {\n  userId: string;\n  image: ImageUrl;\n  info: FaceInfo;\n  updated: number; // in milliseconds\n};\n\nconst isImageData = (x: unknown): x is ImageData =>\n  isObject(x) &&\n  typeof (x as { image: unknown }).image === \"string\" &&\n  isFaceInfo((x as { info: unknown }).info) &&\n  typeof (x as { updated: unknown }).updated === \"number\";\n\nexport const useFaceImages = (\n  roomId: string,\n  userId: string,\n  avatar: string,\n  nickname: string,\n  statusMesg: string,\n  suspended: boolean,\n  liveMode: boolean,\n  micOn: boolean,\n  speakerOn: boolean,\n  deviceId?: string\n) => {\n  const [myImage, setMyImage] = useState<ImageUrl>();\n  const [roomImages, setRoomImages] = useState<ImageData[]>([]);\n\n  const [fatalError, setFatalError] = useState<Error>();\n  if (fatalError) {\n    throw fatalError;\n  }\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const listener = () => {\n      setRoomImages((prev) => {\n        const twoMinAgo = Date.now() - 2 * 60 * 1000;\n        const copied = [...prev];\n        let changed = false;\n        map.forEach((data, uid) => {\n          if (uid === userId) return;\n          if (!isImageData(data)) return;\n          if (data.updated < twoMinAgo) return;\n          const index = copied.findIndex((item) => item.userId === uid);\n          if (index === -1 && roomState.userIdMap[uid]) {\n            copied.push(data);\n            changed = true;\n          } else if (data.updated > copied[index].updated) {\n            copied[index] = data;\n            changed = true;\n          }\n        });\n        if (changed) {\n          return copied;\n        }\n        return prev;\n      });\n    };\n    map.observe(listener);\n    listener();\n    const unsub = subscribe(roomState.userIdMap, () => {\n      setRoomImages((prev) => {\n        const next = prev.filter((item) => roomState.userIdMap[item.userId]);\n        return prev.length !== next.length ? next : prev;\n      });\n    });\n    return () => {\n      unsub();\n      map.unobserve(listener);\n    };\n  }, [roomId, userId]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const checkObsoletedImage = () => {\n      const tenMinAgo = Date.now() - 10 * 60 * 1000;\n      setRoomImages((prev) => {\n        const next = prev.flatMap((item) => {\n          if (item.updated < tenMinAgo) {\n            return [];\n          }\n          return [item];\n        });\n        return prev.length !== next.length ? next : prev;\n      });\n    };\n    let didCleanup = false;\n    let timer: NodeJS.Timeout;\n    const loop = async () => {\n      if (didCleanup) return;\n      try {\n        checkObsoletedImage();\n        const image = suspended ? avatar : await takePhoto(deviceId);\n        if (didCleanup) return;\n        setMyImage(image);\n        const info: FaceInfo = {\n          nickname,\n          message: statusMesg,\n          liveMode,\n          micOn,\n          speakerOn,\n        };\n        const data: ImageData = {\n          userId,\n          image,\n          info,\n          updated: Date.now(),\n        };\n        map.set(userId, data);\n      } catch (e) {\n        setFatalError(e);\n      }\n      timer = setTimeout(loop, 2 * 60 * 1000);\n    };\n    loop();\n    return () => {\n      didCleanup = true;\n      clearTimeout(timer);\n    };\n  }, [\n    roomId,\n    userId,\n    deviceId,\n    avatar,\n    nickname,\n    statusMesg,\n    suspended,\n    liveMode,\n    micOn,\n    speakerOn,\n  ]);\n\n  return {\n    myImage,\n    roomImages,\n  };\n};\n","import React from \"react\";\n\nimport \"./FaceImages.css\";\nimport { Loading } from \"./Loading\";\nimport { BLANK_IMAGE } from \"../media/imagePresets\";\nimport { useFaceImages } from \"../hooks/useFaceImages\";\nimport { useFaceVideos } from \"../hooks/useFaceVideos\";\n\nconst FaceImage = React.memo<{\n  image?: string;\n  nickname: string;\n  statusMesg: string;\n  obsoleted?: boolean;\n  liveMode: boolean;\n  stream?: MediaStream;\n  muted: boolean;\n  micOn: boolean;\n  speakerOn: boolean;\n}>(\n  ({\n    image,\n    nickname,\n    statusMesg,\n    obsoleted,\n    liveMode,\n    stream,\n    muted,\n    micOn,\n    speakerOn,\n  }) => (\n    <div className=\"FaceImages-card\" style={{ opacity: obsoleted ? 0.2 : 1 }}>\n      {liveMode && !obsoleted && stream ? (\n        <video\n          className=\"FaceImages-photo\"\n          ref={(videoEle) => {\n            if (videoEle && videoEle.srcObject !== stream) {\n              // eslint-disable-next-line no-param-reassign\n              videoEle.srcObject = stream;\n            }\n          }}\n          autoPlay\n          playsInline\n          muted={muted}\n        />\n      ) : (\n        <img\n          src={image || BLANK_IMAGE}\n          className=\"FaceImages-photo\"\n          alt=\"myself\"\n        />\n      )}\n      <div className=\"FaceImages-name\">{nickname}</div>\n      <div\n        className=\"FaceImages-mesg\"\n        title={[...statusMesg][1] ? statusMesg : \"(No status message)\"}\n      >\n        {[...statusMesg][0]}\n      </div>\n      {liveMode && !obsoleted && stream && (\n        <div className=\"FaceImages-live-indicator\" title=\"Live Mode On\">\n          &#9673;\n        </div>\n      )}\n      {liveMode && !obsoleted && !stream && (\n        <div className=\"FaceImages-live-indicator\" title=\"Live Mode Available\">\n          &#9678;\n        </div>\n      )}\n      {liveMode && !obsoleted && (\n        <div className=\"FaceImages-mic-speaker-icons\">\n          {micOn && <span title=\"Mic On\">&#x1F3A4;</span>}\n          {speakerOn && <span title=\"Speaker On\">&#x1F508;</span>}\n        </div>\n      )}\n    </div>\n  )\n);\n\nexport const FaceImages = React.memo<{\n  roomId: string;\n  userId: string;\n  avatar: string;\n  nickname: string;\n  statusMesg: string;\n  suspended: boolean;\n  liveMode: boolean;\n  micOn: boolean;\n  speakerOn: boolean;\n  videoDeviceId?: string;\n  audioDeviceId?: string;\n}>(\n  ({\n    roomId,\n    userId,\n    avatar,\n    nickname,\n    statusMesg,\n    suspended,\n    liveMode,\n    micOn,\n    speakerOn,\n    videoDeviceId,\n    audioDeviceId,\n  }) => {\n    const { myImage, roomImages } = useFaceImages(\n      roomId,\n      userId,\n      avatar,\n      nickname,\n      statusMesg,\n      suspended,\n      liveMode,\n      micOn,\n      speakerOn,\n      videoDeviceId\n    );\n    const { faceStream, faceStreamMap } = useFaceVideos(\n      roomId,\n      userId,\n      liveMode,\n      liveMode,\n      micOn,\n      videoDeviceId,\n      audioDeviceId\n    );\n    const twoMinAgo = Date.now() - 2 * 60 * 1000;\n\n    return (\n      <>\n        <FaceImage\n          image={myImage}\n          nickname={nickname}\n          statusMesg={statusMesg}\n          liveMode={liveMode}\n          stream={faceStream || undefined}\n          muted\n          micOn={micOn}\n          speakerOn={speakerOn}\n        />\n        {roomImages.map((item) => (\n          <FaceImage\n            key={item.userId}\n            image={item.image}\n            nickname={item.info.nickname}\n            statusMesg={item.info.message}\n            obsoleted={item.updated < twoMinAgo}\n            liveMode={item.info.liveMode}\n            stream={(liveMode && faceStreamMap[item.userId]) || undefined}\n            muted={!speakerOn}\n            micOn={item.info.micOn}\n            speakerOn={item.info.speakerOn}\n          />\n        ))}\n        {!roomImages.length && (\n          <div className=\"FaceImages-card\">\n            <Loading />\n          </div>\n        )}\n      </>\n    );\n  }\n);\n","import React, { Dispatch, SetStateAction } from \"react\";\n\nimport \"./ControlPanel.css\";\n\nexport const ControlPanel = React.memo<{\n  suspended: boolean;\n  setSuspended: Dispatch<SetStateAction<boolean>>;\n  liveMode: boolean;\n  setLiveMode: Dispatch<SetStateAction<boolean>>;\n  micOn: boolean;\n  setMicOn: Dispatch<SetStateAction<boolean>>;\n  speakerOn: boolean;\n  setSpeakerOn: Dispatch<SetStateAction<boolean>>;\n  secondColumnOpen: boolean;\n  setSecondColumnOpen: Dispatch<SetStateAction<boolean>>;\n}>(\n  ({\n    suspended,\n    setSuspended,\n    liveMode,\n    setLiveMode,\n    setMicOn,\n    setSpeakerOn,\n    secondColumnOpen,\n    setSecondColumnOpen,\n  }) => (\n    <div className=\"ControlPanel-container\">\n      <button\n        type=\"button\"\n        onClick={() => setSuspended((x) => !x)}\n        title={suspended ? \"Enable Camera\" : \"Disable Camera\"}\n      >\n        &#x1F4F7;\n        {suspended && <span className=\"ControlPanel-disabled\">&#10060;</span>}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => setSecondColumnOpen((x) => !x)}\n        title={secondColumnOpen ? \"Close Right Pane\" : \"Open Right Pane\"}\n      >\n        {secondColumnOpen ? <>&#9664;</> : <>&#9654;</>}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => setLiveMode((x) => !x)}\n        title={liveMode ? \"Disable Live Mode\" : \"Enable Live Mode\"}\n      >\n        &#x1F3A5;\n        {!liveMode && <span className=\"ControlPanel-disabled\">&#10060;</span>}\n      </button>\n      <div className=\"ControlPanel-select\">\n        &#x1F39B;\n        <select\n          onChange={(e) => {\n            switch (e.target.value) {\n              case \"off\":\n                setSpeakerOn(false);\n                setMicOn(false);\n                break;\n              case \"speaker\":\n                setSpeakerOn(true);\n                setMicOn(false);\n                break;\n              case \"mic\":\n                setSpeakerOn(true);\n                setMicOn(true);\n                break;\n              default:\n                throw new Error(\"no option\");\n            }\n          }}\n        >\n          <option value=\"off\">Audio Off</option>\n          <option value=\"speaker\">Speaker Only</option>\n          <option value=\"mic\">Mic + Speaker</option>\n        </select>\n      </div>\n    </div>\n  )\n);\n","import React, { Suspense, createElement, useState } from \"react\";\n\nimport { SuspenseFallback } from \"./SuspenseFallback\";\nimport \"./SelectivePane.css\";\n\nconst components = {\n  Welcome: React.lazy(() => import(\"./Welcome\")),\n  \"Momentary Chat\": React.lazy(() => import(\"./MomentaryChat\")),\n  \"Spatial Area\": React.lazy(() => import(\"./SpatialArea\")),\n  \"Screen Share\": React.lazy(() => import(\"./ScreenShare\")),\n  \"White Board\": React.lazy(() => import(\"./CollabWhiteBoard\")),\n  \"Video Share\": React.lazy(() => import(\"./VideoShare\")),\n  \"Go Board\": React.lazy(() => import(\"./GoBoard\")),\n};\n\nexport const SelectivePane = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n  statusMesg: string;\n  setStatusMesg: (mesg: string) => void;\n}>(({ roomId, userId, nickname, statusMesg, setStatusMesg }) => {\n  const [activePane, setActivePane] = useState<string[]>([\n    \"Welcome\",\n    \"Momentary Chat\",\n  ]);\n  const togglePane = (name: string) => {\n    setActivePane((prev) => {\n      if (prev.includes(name)) {\n        return prev.filter((item) => item !== name);\n      }\n      return [...prev, name];\n    });\n  };\n  return (\n    <div className=\"SelectivePane-container\">\n      <div className=\"SelectivePane-select\">\n        &#9776;\n        <select\n          multiple\n          size={Object.keys(components).length}\n          value={activePane}\n          onChange={(e) => togglePane(e.target.value)}\n        >\n          {Object.keys(components).map((name) => {\n            const idx = activePane.indexOf(name);\n            if (idx >= 0) {\n              return (\n                <option key={name} value={name}>\n                  {`[${idx + 1}] ${name}`}\n                </option>\n              );\n            }\n            return (\n              <option key={name} value={name}>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{name}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div className=\"SelectivePane-body\">\n        {activePane.map((name) => (\n          <Suspense key={name} fallback={<SuspenseFallback />}>\n            {createElement(components[name as keyof typeof components], {\n              roomId,\n              userId,\n              nickname,\n              statusMesg,\n              setStatusMesg,\n            })}\n          </Suspense>\n        ))}\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from \"react\";\nimport { useProxy } from \"valtio\";\n\nimport \"./SingleRoom.css\";\nimport { singleRoomState } from \"../states/singleRoom\";\nimport { setRoomIdToUrl } from \"../utils/url\";\nimport { FaceImages } from \"./FaceImages\";\nimport { ControlPanel } from \"./ControlPanel\";\nimport { SelectivePane } from \"./SelectivePane\";\n\nexport const SingleRoom = React.memo(() => {\n  const { roomId, userId, config } = useProxy(singleRoomState);\n  const [statusMesg, setStatusMesg] = useState(\"\");\n  useEffect(() => {\n    setRoomIdToUrl(roomId);\n  }, [roomId]);\n\n  const [suspended, setSuspended] = useState(true);\n  const [liveMode, setLiveMode] = useState(false);\n  const [micOn, setMicOn] = useState(false);\n  const [speakerOn, setSpeakerOn] = useState(false);\n  const [secondColumnOpen, setSecondColumnOpen] = useState(true);\n\n  return (\n    <div className=\"SingleRoom-container\">\n      <div className=\"SingleRoom-1st-column\">\n        <ControlPanel\n          suspended={suspended}\n          setSuspended={setSuspended}\n          liveMode={liveMode}\n          setLiveMode={setLiveMode}\n          micOn={micOn}\n          setMicOn={setMicOn}\n          speakerOn={speakerOn}\n          setSpeakerOn={setSpeakerOn}\n          secondColumnOpen={secondColumnOpen}\n          setSecondColumnOpen={setSecondColumnOpen}\n        />\n        <FaceImages\n          roomId={roomId}\n          userId={userId}\n          videoDeviceId={config.videoDeviceId}\n          audioDeviceId={config.audioDeviceId}\n          avatar={config.avatar}\n          nickname={config.nickname}\n          statusMesg={statusMesg}\n          suspended={suspended}\n          liveMode={liveMode}\n          micOn={micOn}\n          speakerOn={speakerOn}\n        />\n      </div>\n      <div\n        className=\"SingleRoom-2nd-column\"\n        style={{ display: secondColumnOpen ? \"inherit\" : \"none\" }}\n      >\n        <SelectivePane\n          roomId={roomId}\n          userId={userId}\n          nickname={config.nickname}\n          statusMesg={statusMesg}\n          setStatusMesg={setStatusMesg}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport default SingleRoom;\n","export const getVideoStream = async (deviceId?: string) => {\n  const constraints = deviceId\n    ? {\n        video: { deviceId },\n      }\n    : { video: true };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getVideoTracks();\n  const dispose = () => {\n    track.stop();\n  };\n  return {\n    stream,\n    dispose,\n  };\n};\n\nexport const getFaceVideoStream = async (deviceId?: string) => {\n  const constraints = {\n    video: {\n      deviceId,\n      frameRate: { max: 5 },\n      width: { exact: 72 },\n      height: { exact: 72 },\n    },\n  };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getVideoTracks();\n  const dispose = () => {\n    track.stop();\n  };\n  return {\n    stream,\n    dispose,\n  };\n};\n","export const getAudioStream = async (deviceId?: string) => {\n  const constraints = deviceId\n    ? {\n        audio: { deviceId },\n      }\n    : { audio: true };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getAudioTracks();\n  await track.applyConstraints({\n    echoCancellation: true,\n    echoCancellationType: { ideal: \"system\" },\n    noiseSuppression: { ideal: true },\n  } as MediaTrackConstraints);\n  const dispose = () => {\n    track.stop();\n  };\n  return {\n    stream,\n    dispose,\n  };\n};\n","import { useEffect, useState, useRef } from \"react\";\nimport { useProxy } from \"valtio\";\n\nimport { getFaceVideoStream } from \"../media/video\";\nimport { getAudioStream } from \"../media/audio\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst addTrackToStream = (\n  track: MediaStreamTrack,\n  stream: MediaStream | null,\n  disposeStream: (s: MediaStream) => void\n) => {\n  const newStream = stream || new MediaStream();\n  newStream.addTrack(track);\n  newStream.dispatchEvent(new MediaStreamTrackEvent(\"addtrack\", { track }));\n  track.addEventListener(\"ended\", () => {\n    newStream.removeTrack(track);\n    if (newStream.getTracks().length === 0) {\n      disposeStream(newStream);\n    }\n  });\n  return newStream;\n};\n\nexport const useFaceVideos = (\n  roomId: string,\n  userId: string,\n  videoEnabled: boolean,\n  audioEnabled: boolean,\n  micOn: boolean,\n  videoDeviceId?: string,\n  audioDeviceId?: string,\n  uniqueMediaId?: string\n) => {\n  const videoType = `${uniqueMediaId || \"face\"}Video`;\n  const audioType = `${uniqueMediaId || \"face\"}Audio`;\n  const [faceStream, setFaceStream] = useState<MediaStream | null>(null);\n  const [faceStreamMap, setFaceStreamMap] = useState<{\n    [userId: string]: MediaStream;\n  }>({});\n\n  const isMounted = useRef(true);\n  useEffect(() => {\n    const cleanup = () => {\n      isMounted.current = false;\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = ([uid, track]: [string, MediaStreamTrack]) => {\n    if (faceStreamMap[uid]?.getTracks().includes(track)) return;\n    const disposeStream = (s: MediaStream) => {\n      if (isMounted.current) {\n        setFaceStreamMap((prev) => {\n          const { [uid]: oldStream, ...rest } = prev;\n          if (oldStream === s) {\n            return rest;\n          }\n          return prev;\n        });\n      }\n    };\n    setFaceStreamMap((prev) => {\n      const stream = prev[uid];\n      const newStream = addTrackToStream(track, stream, disposeStream);\n      if (stream === newStream) {\n        return prev;\n      }\n      return { ...prev, [uid]: newStream };\n    });\n  };\n\n  const trackMap = useProxy(getRoomState(roomId, userId).trackMap);\n  Object.entries(trackMap[videoType] || {}).forEach(onTrack);\n  Object.entries(trackMap[audioType] || {}).forEach(onTrack);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let dispose: (() => void) | null = null;\n    if (videoEnabled) {\n      (async () => {\n        const {\n          stream: videoStream,\n          dispose: disposeVideo,\n        } = await getFaceVideoStream(videoDeviceId);\n        const [videoTrack] = videoStream.getVideoTracks();\n        roomState.addMediaType(videoType);\n        roomState.addTrack(videoType, videoTrack);\n        const disposeStream = (s: MediaStream) => {\n          if (isMounted.current) {\n            setFaceStream((prev) => (prev === s ? null : prev));\n          }\n        };\n        setFaceStream((prev) =>\n          addTrackToStream(videoTrack, prev, disposeStream)\n        );\n        dispose = () => {\n          roomState.removeMediaType(videoType);\n          roomState.removeTrack(videoType);\n          disposeVideo();\n          // XXX we need to manually dispatch ended event, why?\n          videoTrack.dispatchEvent(new Event(\"ended\"));\n        };\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, userId, videoEnabled, videoDeviceId, videoType]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let dispose: (() => void) | null = null;\n    if (audioEnabled) {\n      (async () => {\n        const {\n          stream: audioStream,\n          dispose: disposeAudio,\n        } = await getAudioStream(audioDeviceId);\n        const [audioTrack] = audioStream.getAudioTracks();\n        roomState.addMediaType(audioType);\n        roomState.addTrack(audioType, audioTrack);\n        const disposeStream = (s: MediaStream) => {\n          if (isMounted.current) {\n            setFaceStream((prev) => (prev === s ? null : prev));\n          }\n        };\n        setFaceStream((prev) =>\n          addTrackToStream(audioTrack, prev, disposeStream)\n        );\n        dispose = () => {\n          roomState.removeMediaType(audioType);\n          roomState.removeTrack(audioType);\n          disposeAudio();\n          // XXX we need to manually dispatch ended event, why?\n          audioTrack.dispatchEvent(new Event(\"ended\"));\n        };\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, userId, audioEnabled, audioDeviceId, audioType]);\n  useEffect(() => {\n    if (faceStream) {\n      faceStream.getAudioTracks().forEach((track) => {\n        const audioTrack = track;\n        audioTrack.enabled = micOn;\n      });\n      const onaddtrack = (event: MediaStreamTrackEvent) => {\n        const { track } = event;\n        if (track.kind === \"audio\") {\n          track.enabled = micOn;\n        }\n      };\n      faceStream.addEventListener(\"addtrack\", onaddtrack);\n      return () => {\n        faceStream.removeEventListener(\"addtrack\", onaddtrack);\n      };\n    }\n    return undefined;\n  }, [faceStream, micOn]);\n\n  return { faceStream, faceStreamMap };\n};\n"],"sourceRoot":""}