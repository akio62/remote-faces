{"version":3,"sources":["media/screen.ts","hooks/useScreenShare.ts","components/ScreenShare.tsx","hooks/useNicknameMap.ts"],"names":["getScreenStream","a","constraints","video","navigator","mediaDevices","getDisplayMedia","stream","getVideoTracks","track","dispose","stop","videoType","Screen","React","memo","nickname","videoRef","useRef","useEffect","current","srcObject","className","ref","autoPlay","muted","ScreenShare","roomId","userId","useState","enabled","setEnabled","screenStream","setScreenStream","screenStreamMap","setScreenStreamMap","cleanupFns","forEach","fn","trackMap","useProxy","getRoomState","Object","entries","uid","getTracks","includes","prev","MediaStream","onended","addEventListener","push","removeEventListener","roomState","addMediaType","removeMediaType","result","addTrack","removeTrack","useScreenShare","nicknameMap","useNicknameMap","type","onClick","keys","map","screenUserId","setNicknameMap","ydoc","getMap","listener","copied","changed","data","x","isObject","info","observe","unobserve"],"mappings":"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","file":"static/js/17.c494eb94.chunk.js","sourcesContent":["export const getScreenStream = async () => {\n  try {\n    const constraints = { video: true };\n    const stream = (await (navigator.mediaDevices as any).getDisplayMedia(\n      constraints\n    )) as MediaStream;\n    const [track] = stream.getVideoTracks();\n    const dispose = () => {\n      track.stop();\n    };\n    return {\n      stream,\n      dispose,\n    };\n  } catch (e) {\n    return null;\n  }\n};\n","import { useEffect, useState, useRef } from \"react\";\nimport { useProxy } from \"valtio\";\n\nimport { getScreenStream } from \"../media/screen\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst videoType = \"screenVideo\";\n\nexport const useScreenShare = (\n  roomId: string,\n  userId: string,\n  enabled: boolean,\n  setEnabled: (enabled: boolean) => void\n) => {\n  const [screenStream, setScreenStream] = useState<MediaStream | null>(null);\n  const [screenStreamMap, setScreenStreamMap] = useState<{\n    [userId: string]: MediaStream | null;\n  }>({});\n\n  type CleanupFn = () => void;\n  const cleanupFns = useRef<CleanupFn[]>([]);\n  useEffect(() => {\n    const cleanup = () => {\n      cleanupFns.current.forEach((fn) => fn());\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = ([uid, track]: [string, MediaStreamTrack]) => {\n    if (screenStreamMap[uid]?.getTracks().includes(track)) return;\n    setScreenStreamMap((prev) => ({\n      ...prev,\n      [uid]: new MediaStream([track]),\n    }));\n    const onended = () => {\n      setScreenStreamMap((prev) => ({\n        ...prev,\n        [uid]: null,\n      }));\n    };\n    track.addEventListener(\"ended\", onended);\n    cleanupFns.current.push(() => {\n      track.removeEventListener(\"ended\", onended);\n    });\n  };\n\n  const trackMap = useProxy(getRoomState(roomId, userId).trackMap);\n  Object.entries(trackMap[videoType] || {}).forEach(onTrack);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    roomState.addMediaType(videoType);\n    return () => {\n      roomState.removeMediaType(videoType);\n    };\n  }, [roomId, userId]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let dispose: (() => void) | null = null;\n    if (enabled) {\n      (async () => {\n        const result = await getScreenStream();\n        if (!result) {\n          setEnabled(false);\n          return;\n        }\n        const [track] = result.stream.getVideoTracks();\n        roomState.addTrack(videoType, track);\n        setScreenStream(result.stream);\n        dispose = () => {\n          roomState.removeTrack(videoType);\n          result.dispose();\n          setScreenStream(null);\n          setEnabled(false);\n        };\n        track.addEventListener(\"ended\", () => {\n          if (dispose) dispose();\n          dispose = null;\n        });\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, userId, enabled, setEnabled]);\n\n  return { screenStream, screenStreamMap };\n};\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport \"./ScreenShare.css\";\nimport { useScreenShare } from \"../hooks/useScreenShare\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Screen = React.memo<{\n  nickname: string;\n  stream: MediaStream;\n}>(({ nickname, stream }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (stream && videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return (\n    <div>\n      <div className=\"ScreenShare-nickname\">{nickname}</div>\n      <video className=\"ScreenShare-video\" ref={videoRef} autoPlay muted />\n    </div>\n  );\n});\n\nexport const ScreenShare = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n}>(({ roomId, userId, nickname }) => {\n  const [enabled, setEnabled] = useState(false);\n  const { screenStream, screenStreamMap } = useScreenShare(\n    roomId,\n    userId,\n    enabled,\n    setEnabled\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n\n  return (\n    <div className=\"ScreenShare-container\">\n      <button type=\"button\" onClick={() => setEnabled(!enabled)}>\n        {enabled ? \"Stop screen share\" : \"Start screen share\"}\n      </button>\n      <div className=\"ScreenShare-body\">\n        {screenStream && <Screen nickname={nickname} stream={screenStream} />}\n        {Object.keys(screenStreamMap).map((screenUserId) => {\n          const stream = screenStreamMap[screenUserId];\n          if (!stream) return null;\n          return (\n            <Screen\n              key={screenUserId}\n              nickname={nicknameMap[screenUserId] || \"No Name\"}\n              stream={stream}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default ScreenShare;\n","import { useEffect, useState } from \"react\";\n\nimport { isObject } from \"../utils/types\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst hasInfoNickname = (x: unknown): x is { info: { nickname: string } } =>\n  isObject(x) &&\n  isObject((x as { info: unknown }).info) &&\n  typeof (x as { info: { nickname: unknown } }).info.nickname === \"string\";\n\ntype NicknameMap = {\n  [userId: string]: string;\n};\n\nexport const useNicknameMap = (roomId: string, userId: string) => {\n  const [nicknameMap, setNicknameMap] = useState<NicknameMap>({});\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const listener = () => {\n      setNicknameMap((prev) => {\n        const copied = { ...prev };\n        let changed = false;\n        map.forEach((data, uid) => {\n          if (uid === userId) return;\n          if (!hasInfoNickname(data)) return;\n          if (!copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          } else if (data.info.nickname !== copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          }\n        });\n        if (changed) {\n          return copied;\n        }\n        return prev;\n      });\n    };\n    map.observe(listener);\n    listener();\n    return () => {\n      map.unobserve(listener);\n    };\n  }, [roomId, userId]);\n\n  return nicknameMap;\n};\n"],"sourceRoot":""}