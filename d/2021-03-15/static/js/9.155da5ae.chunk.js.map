{"version":3,"sources":["utils/types.ts","states/roomMap.ts","utils/sleep.ts","components/Loading.tsx","components/FaceImages.tsx","components/ControlPanel.tsx","components/SelectivePane.tsx","components/SingleRoom.tsx","media/audio.ts","hooks/useFaceVideos.ts","media/video.ts","components/FaceCard.tsx","media/capture.ts","hooks/useFaceImages.ts"],"names":["isObject","x","hasStringProp","prop","hasObjectProp","roomMap","Map","getRoomState","roomId","userId","key","has","state","addMediaType","type","a","acceptingMediaTypes","includes","console","log","push","roomPromise","acceptMediaTypes","snapshot","removeMediaType","index","indexOf","splice","addTrack","track","removeTrack","dispose","proxy","networkStatusList","userIdMap","ydoc","ref","Y","trackMap","on","update","base64","btoa","String","fromCharCode","then","room","broadcastData","ydocUpdate","createRoom","status","unshift","length","pop","Object","entries","forEach","uid","peerIndex","data","sendData","info","binaryString","atob","Uint8Array","map","call","c","charCodeAt","mediaType","addEventListener","createRoomState","set","get","sleep","ms","Promise","resolve","setTimeout","Loading","React","memo","className","FaceImages","avatar","nickname","statusMesg","suspended","liveMode","micOn","speakerOn","videoDeviceId","audioDeviceId","useFaceImages","myImage","roomImages","useFaceVideos","faceStream","faceStreamMap","twoMinAgo","Date","now","FaceCard","image","stream","undefined","muted","item","message","obsoleted","updated","ControlPanel","setSuspended","setLiveMode","setMicOn","setSpeakerOn","secondColumnOpen","setSecondColumnOpen","onClick","title","onChange","e","target","value","Error","components","Welcome","lazy","SelectivePane","setStatusMesg","useState","activePane","setActivePane","multiple","size","keys","name","prev","filter","idx","fallback","SuspenseFallback","createElement","SingleRoom","useProxy","singleRoomState","config","useEffect","setRoomIdToUrl","style","display","getAudioStream","deviceId","constraints","audio","navigator","mediaDevices","getUserMedia","getAudioTracks","applyConstraints","echoCancellation","echoCancellationType","ideal","noiseSuppression","stop","addTrackToStream","disposeStream","newStream","MediaStream","dispatchEvent","MediaStreamTrackEvent","getTracks","videoEnabled","audioEnabled","uniqueMediaId","videoType","audioType","setFaceStream","setFaceStreamMap","isMounted","useRef","current","onTrack","s","oldStream","rest","roomState","getFaceVideoStream","videoStream","disposeVideo","getVideoTracks","videoTrack","Event","audioStream","disposeAudio","audioTrack","enabled","onaddtrack","event","kind","removeEventListener","getVideoStream","video","frameRate","max","width","exact","height","opacity","videoEle","srcObject","autoPlay","playsInline","src","BLANK_IMAGE","alt","captureImage","ImageCapture","imageCapture","takePhoto","blob","createImageBitmap","srcImg","grabFrame","srcW","srcH","document","autoplay","setAttribute","position","bottom","body","appendChild","removeChild","videoWidth","videoHeight","canvas","ctx","getContext","dstW","dstH","ratio","Math","min","y","drawImage","toDataURL","isImageData","isFaceInfo","setMyImage","setRoomImages","fatalError","setFatalError","getMap","listener","copied","changed","findIndex","filtered","observe","unsub","subscribe","unobserve","timer","checkObsoletedImage","tenMinAgo","next","flatMap","didCleanup","loop","clearTimeout"],"mappings":"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","file":"static/js/9.155da5ae.chunk.js","sourcesContent":["export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<\n  F extends (...args: any) => any\n> = ReturnType<F> extends Promise<infer T> ? T : never;\n","import { proxy, snapshot, ref } from \"valtio\";\nimport * as Y from \"yjs\";\n\nimport { PeerInfo, createRoom, NetworkStatus } from \"../network/room\";\n\ntype RoomState = {\n  networkStatusList: NetworkStatus[];\n  userIdMap: { [userId: string]: number }; // peerIndex\n  ydoc: Y.Doc;\n  acceptingMediaTypes: string[];\n  trackMap: {\n    [mediaType: string]: {\n      [userId: string]: MediaStreamTrack;\n    };\n  };\n  addMediaType: (type: string) => Promise<void>;\n  removeMediaType: (type: string) => Promise<void>;\n  addTrack: (type: string, track: MediaStreamTrack) => Promise<void>;\n  removeTrack: (type: string) => Promise<void>;\n  dispose: () => Promise<void>;\n};\n\nconst createRoomState = (roomId: string, userId: string) => {\n  const addMediaType = async (type: string) => {\n    if (state.acceptingMediaTypes.includes(type)) {\n      console.log(\"media type already added\", type);\n      return;\n    }\n    state.acceptingMediaTypes.push(type);\n    const room = await roomPromise;\n    room.acceptMediaTypes(snapshot(state.acceptingMediaTypes));\n  };\n  const removeMediaType = async (type: string) => {\n    const index = state.acceptingMediaTypes.indexOf(type);\n    if (index === -1) {\n      console.log(\"media type already added\", type);\n      return;\n    }\n    state.acceptingMediaTypes.splice(index, 1);\n    const room = await roomPromise;\n    room.acceptMediaTypes(snapshot(state.acceptingMediaTypes));\n  };\n  const addTrack = async (type: string, track: MediaStreamTrack) => {\n    const room = await roomPromise;\n    room.addTrack(type, track);\n  };\n  const removeTrack = async (type: string) => {\n    const room = await roomPromise;\n    room.removeTrack(type);\n  };\n  const dispose = async () => {\n    const room = await roomPromise;\n    room.dispose();\n  };\n  const state = proxy<RoomState>({\n    networkStatusList: [],\n    userIdMap: {},\n    ydoc: ref(new Y.Doc()),\n    acceptingMediaTypes: [],\n    trackMap: {},\n    addMediaType,\n    removeMediaType,\n    addTrack,\n    removeTrack,\n    dispose,\n  });\n  const updateNetworkStatus = (status: NetworkStatus) => {\n    state.networkStatusList.unshift(status);\n    if (state.networkStatusList.length > 10) {\n      state.networkStatusList.pop();\n    }\n    if (status?.type === \"CONNECTION_CLOSED\") {\n      Object.entries(state.userIdMap).forEach(([uid, idx]) => {\n        if (idx === status.peerIndex) {\n          delete state.userIdMap[uid];\n        }\n      });\n    }\n  };\n  const notifyNewPeer = (peerIndex: number) => {\n    const update = Y.encodeStateAsUpdate(state.ydoc);\n    const base64 = btoa(String.fromCharCode(...update));\n    const data = { ydocUpdate: base64 };\n    roomPromise.then((room) => {\n      // XXX this does not scale\n      room.sendData(data, peerIndex);\n    });\n  };\n  const receiveData = (data: any, info: PeerInfo) => {\n    state.userIdMap[info.userId] = info.peerIndex;\n    if (data?.ydocUpdate) {\n      const binaryString = atob(data.ydocUpdate);\n      const update = new Uint8Array(\n        ([].map.call(binaryString, (c: string) =>\n          c.charCodeAt(0)\n        ) as unknown) as ArrayBufferLike\n      );\n      Y.applyUpdate(state.ydoc, update);\n    }\n  };\n  state.ydoc.on(\"update\", (update: Uint8Array) => {\n    const base64 = btoa(String.fromCharCode(...update));\n    roomPromise.then((room) => {\n      room.broadcastData({ ydocUpdate: base64 });\n    });\n  });\n  const receiveTrack = (\n    mediaType: string,\n    track: MediaStreamTrack,\n    info: PeerInfo\n  ) => {\n    if (!state.trackMap[mediaType]) {\n      state.trackMap[mediaType] = {};\n    }\n    track.addEventListener(\"ended\", () => {\n      if (state.trackMap[mediaType][info.userId] === track) {\n        delete state.trackMap[mediaType][info.userId];\n      }\n    });\n    state.trackMap[mediaType][info.userId] = ref(track);\n  };\n  const roomPromise = createRoom(\n    roomId,\n    userId,\n    updateNetworkStatus,\n    notifyNewPeer,\n    receiveData,\n    receiveTrack\n  );\n  return state;\n};\n\nconst roomMap = new Map<string, RoomState>();\n\nexport const getRoomState = (roomId: string, userId: string) => {\n  const key = `${roomId}:${userId}`;\n  if (!roomMap.has(key)) {\n    const state = createRoomState(roomId, userId);\n    roomMap.set(key, state);\n  }\n  return roomMap.get(key) as RoomState;\n};\n\nexport const disposeRoomState = (roomId: string, userId: string) => {\n  const key = `${roomId}:${userId}`;\n  const state = roomMap.get(key);\n  if (state) {\n    roomMap.delete(key);\n    state.dispose();\n  }\n};\n","export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import React from \"react\";\n\nimport \"./Loading.css\";\n\nexport const Loading = React.memo(() => (\n  <div className=\"Loading-container\">\n    <div className=\"loader\">\n      <div>Loading...</div>\n    </div>\n  </div>\n));\n","import React from \"react\";\n\nimport \"./FaceImages.css\";\nimport { Loading } from \"./Loading\";\nimport { useFaceImages } from \"../hooks/useFaceImages\";\nimport { useFaceVideos } from \"../hooks/useFaceVideos\";\nimport { FaceCard } from \"./FaceCard\";\n\nexport const FaceImages = React.memo<{\n  roomId: string;\n  userId: string;\n  avatar: string;\n  nickname: string;\n  statusMesg: string;\n  suspended: boolean;\n  liveMode: boolean;\n  micOn: boolean;\n  speakerOn: boolean;\n  videoDeviceId?: string;\n  audioDeviceId?: string;\n}>(\n  ({\n    roomId,\n    userId,\n    avatar,\n    nickname,\n    statusMesg,\n    suspended,\n    liveMode,\n    micOn,\n    speakerOn,\n    videoDeviceId,\n    audioDeviceId,\n  }) => {\n    const { myImage, roomImages } = useFaceImages(\n      roomId,\n      userId,\n      avatar,\n      nickname,\n      statusMesg,\n      suspended,\n      liveMode,\n      micOn,\n      speakerOn,\n      videoDeviceId\n    );\n    const { faceStream, faceStreamMap } = useFaceVideos(\n      roomId,\n      userId,\n      liveMode,\n      liveMode,\n      micOn,\n      videoDeviceId,\n      audioDeviceId\n    );\n    const twoMinAgo = Date.now() - 2 * 60 * 1000;\n\n    return (\n      <div className=\"FaceImages-list\">\n        <div className=\"FaceImages-item\">\n          <FaceCard\n            image={myImage}\n            nickname={nickname}\n            statusMesg={statusMesg}\n            liveMode={liveMode}\n            stream={faceStream || undefined}\n            muted\n            micOn={micOn}\n            speakerOn={speakerOn}\n          />\n        </div>\n        {roomImages.map((item) => (\n          <div className=\"FaceImages-item\">\n            <FaceCard\n              key={item.userId}\n              image={item.image}\n              nickname={item.info.nickname}\n              statusMesg={item.info.message}\n              obsoleted={item.updated < twoMinAgo}\n              liveMode={item.info.liveMode}\n              stream={(liveMode && faceStreamMap[item.userId]) || undefined}\n              muted={!speakerOn}\n              micOn={item.info.micOn}\n              speakerOn={item.info.speakerOn}\n            />\n          </div>\n        ))}\n        {!roomImages.length && (\n          <div className=\"FaceImages-item\">\n            <Loading />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n","import React, { Dispatch, SetStateAction } from \"react\";\n\nimport \"./ControlPanel.css\";\n\nexport const ControlPanel = React.memo<{\n  suspended: boolean;\n  setSuspended: Dispatch<SetStateAction<boolean>>;\n  liveMode: boolean;\n  setLiveMode: Dispatch<SetStateAction<boolean>>;\n  micOn: boolean;\n  setMicOn: Dispatch<SetStateAction<boolean>>;\n  speakerOn: boolean;\n  setSpeakerOn: Dispatch<SetStateAction<boolean>>;\n  secondColumnOpen: boolean;\n  setSecondColumnOpen: Dispatch<SetStateAction<boolean>>;\n}>(\n  ({\n    suspended,\n    setSuspended,\n    liveMode,\n    setLiveMode,\n    setMicOn,\n    setSpeakerOn,\n    secondColumnOpen,\n    setSecondColumnOpen,\n  }) => (\n    <div className=\"ControlPanel-container\">\n      <button\n        type=\"button\"\n        onClick={() => setSuspended((x) => !x)}\n        title={suspended ? \"Enable Camera\" : \"Disable Camera\"}\n      >\n        &#x1F4F7;\n        {suspended && <span className=\"ControlPanel-disabled\">&#10060;</span>}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => setSecondColumnOpen((x) => !x)}\n        title={secondColumnOpen ? \"Close Right Pane\" : \"Open Right Pane\"}\n      >\n        {secondColumnOpen ? <>&#9664;</> : <>&#9654;</>}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => setLiveMode((x) => !x)}\n        title={liveMode ? \"Disable Live Mode\" : \"Enable Live Mode\"}\n      >\n        &#x1F3A5;\n        {!liveMode && <span className=\"ControlPanel-disabled\">&#10060;</span>}\n      </button>\n      <div className=\"ControlPanel-select\">\n        &#x1F39B;\n        <select\n          onChange={(e) => {\n            switch (e.target.value) {\n              case \"off\":\n                setSpeakerOn(false);\n                setMicOn(false);\n                break;\n              case \"speaker\":\n                setSpeakerOn(true);\n                setMicOn(false);\n                break;\n              case \"mic\":\n                setSpeakerOn(true);\n                setMicOn(true);\n                break;\n              default:\n                throw new Error(\"no option\");\n            }\n          }}\n        >\n          <option value=\"off\">Audio Off</option>\n          <option value=\"speaker\">Speaker Only</option>\n          <option value=\"mic\">Mic + Speaker</option>\n        </select>\n      </div>\n    </div>\n  )\n);\n","import React, { Suspense, createElement, useState } from \"react\";\n\nimport { SuspenseFallback } from \"./SuspenseFallback\";\nimport \"./SelectivePane.css\";\n\nconst components = {\n  Welcome: React.lazy(() => import(\"./Welcome\")),\n  \"Momentary Chat\": React.lazy(() => import(\"./MomentaryChat\")),\n  \"Gather Area\": React.lazy(() => import(\"./GatherArea\")),\n  \"Spatial Area\": React.lazy(() => import(\"./SpatialArea\")),\n  \"Screen Share\": React.lazy(() => import(\"./ScreenShare\")),\n  \"White Board\": React.lazy(() => import(\"./CollabWhiteBoard\")),\n  \"Video Share\": React.lazy(() => import(\"./VideoShare\")),\n  \"Go Board\": React.lazy(() => import(\"./GoBoard\")),\n};\n\nexport const SelectivePane = React.memo<{\n  roomId: string;\n  userId: string;\n  avatar: string;\n  nickname: string;\n  statusMesg: string;\n  setStatusMesg: (mesg: string) => void;\n  suspended: boolean;\n  videoDeviceId?: string;\n  audioDeviceId?: string;\n}>(\n  ({\n    roomId,\n    userId,\n    avatar,\n    nickname,\n    statusMesg,\n    setStatusMesg,\n    suspended,\n    videoDeviceId,\n    audioDeviceId,\n  }) => {\n    const [activePane, setActivePane] = useState<string[]>([\n      \"Welcome\",\n      \"Momentary Chat\",\n    ]);\n    const togglePane = (name: string) => {\n      setActivePane((prev) => {\n        if (prev.includes(name)) {\n          return prev.filter((item) => item !== name);\n        }\n        return [...prev, name];\n      });\n    };\n    return (\n      <div className=\"SelectivePane-container\">\n        <div className=\"SelectivePane-select\">\n          &#9776;\n          <select\n            multiple\n            size={Object.keys(components).length}\n            value={activePane}\n            onChange={(e) => togglePane(e.target.value)}\n          >\n            {Object.keys(components).map((name) => {\n              const idx = activePane.indexOf(name);\n              if (idx >= 0) {\n                return (\n                  <option key={name} value={name}>\n                    {`[${idx + 1}] ${name}`}\n                  </option>\n                );\n              }\n              return (\n                <option key={name} value={name}>\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className=\"SelectivePane-body\">\n          {activePane.map((name) => (\n            <Suspense key={name} fallback={<SuspenseFallback />}>\n              {createElement(components[name as keyof typeof components], {\n                roomId,\n                userId,\n                avatar,\n                nickname,\n                statusMesg,\n                setStatusMesg,\n                suspended,\n                videoDeviceId,\n                audioDeviceId,\n              })}\n            </Suspense>\n          ))}\n        </div>\n      </div>\n    );\n  }\n);\n","import React, { useEffect, useState } from \"react\";\nimport { useProxy } from \"valtio\";\n\nimport \"./SingleRoom.css\";\nimport { singleRoomState } from \"../states/singleRoom\";\nimport { setRoomIdToUrl } from \"../utils/url\";\nimport { FaceImages } from \"./FaceImages\";\nimport { ControlPanel } from \"./ControlPanel\";\nimport { SelectivePane } from \"./SelectivePane\";\n\nexport const SingleRoom = React.memo(() => {\n  const { roomId, userId, config } = useProxy(singleRoomState);\n  const [statusMesg, setStatusMesg] = useState(\"\");\n  useEffect(() => {\n    setRoomIdToUrl(roomId);\n  }, [roomId]);\n\n  const [suspended, setSuspended] = useState(true);\n  const [liveMode, setLiveMode] = useState(false);\n  const [micOn, setMicOn] = useState(false);\n  const [speakerOn, setSpeakerOn] = useState(false);\n  const [secondColumnOpen, setSecondColumnOpen] = useState(true);\n\n  return (\n    <div className=\"SingleRoom-container\">\n      <div className=\"SingleRoom-1st-column\">\n        <ControlPanel\n          suspended={suspended}\n          setSuspended={setSuspended}\n          liveMode={liveMode}\n          setLiveMode={setLiveMode}\n          micOn={micOn}\n          setMicOn={setMicOn}\n          speakerOn={speakerOn}\n          setSpeakerOn={setSpeakerOn}\n          secondColumnOpen={secondColumnOpen}\n          setSecondColumnOpen={setSecondColumnOpen}\n        />\n        <FaceImages\n          roomId={roomId}\n          userId={userId}\n          videoDeviceId={config.videoDeviceId}\n          audioDeviceId={config.audioDeviceId}\n          avatar={config.avatar}\n          nickname={config.nickname}\n          statusMesg={statusMesg}\n          suspended={suspended}\n          liveMode={liveMode}\n          micOn={micOn}\n          speakerOn={speakerOn}\n        />\n      </div>\n      <div\n        className=\"SingleRoom-2nd-column\"\n        style={{ display: secondColumnOpen ? \"inherit\" : \"none\" }}\n      >\n        <SelectivePane\n          roomId={roomId}\n          userId={userId}\n          avatar={config.avatar}\n          nickname={config.nickname}\n          statusMesg={statusMesg}\n          setStatusMesg={setStatusMesg}\n          suspended={suspended}\n          videoDeviceId={config.videoDeviceId}\n          audioDeviceId={config.audioDeviceId}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport default SingleRoom;\n","export const getAudioStream = async (deviceId?: string) => {\n  const constraints = deviceId\n    ? {\n        audio: { deviceId },\n      }\n    : { audio: true };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getAudioTracks();\n  await track.applyConstraints({\n    echoCancellation: true,\n    echoCancellationType: { ideal: \"system\" },\n    noiseSuppression: { ideal: true },\n  } as MediaTrackConstraints);\n  const dispose = () => {\n    track.stop();\n  };\n  return {\n    stream,\n    dispose,\n  };\n};\n","import { useEffect, useState, useRef } from \"react\";\nimport { useProxy } from \"valtio\";\n\nimport { getFaceVideoStream } from \"../media/video\";\nimport { getAudioStream } from \"../media/audio\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst addTrackToStream = (\n  track: MediaStreamTrack,\n  stream: MediaStream | null,\n  disposeStream: (s: MediaStream) => void\n) => {\n  const newStream = stream || new MediaStream();\n  newStream.addTrack(track);\n  newStream.dispatchEvent(new MediaStreamTrackEvent(\"addtrack\", { track }));\n  track.addEventListener(\"ended\", () => {\n    newStream.removeTrack(track);\n    if (newStream.getTracks().length === 0) {\n      disposeStream(newStream);\n    }\n  });\n  return newStream;\n};\n\nexport const useFaceVideos = (\n  roomId: string,\n  userId: string,\n  videoEnabled: boolean,\n  audioEnabled: boolean,\n  micOn: boolean,\n  videoDeviceId?: string,\n  audioDeviceId?: string,\n  uniqueMediaId?: string\n) => {\n  const videoType = `${uniqueMediaId || \"face\"}Video`;\n  const audioType = `${uniqueMediaId || \"face\"}Audio`;\n  const [faceStream, setFaceStream] = useState<MediaStream | null>(null);\n  const [faceStreamMap, setFaceStreamMap] = useState<{\n    [userId: string]: MediaStream;\n  }>({});\n\n  const isMounted = useRef(true);\n  useEffect(() => {\n    const cleanup = () => {\n      isMounted.current = false;\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = ([uid, track]: [string, MediaStreamTrack]) => {\n    if (faceStreamMap[uid]?.getTracks().includes(track)) return;\n    const disposeStream = (s: MediaStream) => {\n      if (isMounted.current) {\n        setFaceStreamMap((prev) => {\n          const { [uid]: oldStream, ...rest } = prev;\n          if (oldStream === s) {\n            return rest;\n          }\n          return prev;\n        });\n      }\n    };\n    setFaceStreamMap((prev) => {\n      const stream = prev[uid];\n      const newStream = addTrackToStream(track, stream, disposeStream);\n      if (stream === newStream) {\n        return prev;\n      }\n      return { ...prev, [uid]: newStream };\n    });\n  };\n\n  const trackMap = useProxy(getRoomState(roomId, userId).trackMap);\n  Object.entries(trackMap[videoType] || {}).forEach(onTrack);\n  Object.entries(trackMap[audioType] || {}).forEach(onTrack);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let dispose: (() => void) | null = null;\n    if (videoEnabled) {\n      (async () => {\n        const {\n          stream: videoStream,\n          dispose: disposeVideo,\n        } = await getFaceVideoStream(videoDeviceId);\n        const [videoTrack] = videoStream.getVideoTracks();\n        roomState.addMediaType(videoType);\n        roomState.addTrack(videoType, videoTrack);\n        const disposeStream = (s: MediaStream) => {\n          if (isMounted.current) {\n            setFaceStream((prev) => (prev === s ? null : prev));\n          }\n        };\n        setFaceStream((prev) =>\n          addTrackToStream(videoTrack, prev, disposeStream)\n        );\n        dispose = () => {\n          roomState.removeMediaType(videoType);\n          roomState.removeTrack(videoType);\n          disposeVideo();\n          // XXX we need to manually dispatch ended event, why?\n          videoTrack.dispatchEvent(new Event(\"ended\"));\n        };\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, userId, videoEnabled, videoDeviceId, videoType]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let dispose: (() => void) | null = null;\n    if (audioEnabled) {\n      (async () => {\n        const {\n          stream: audioStream,\n          dispose: disposeAudio,\n        } = await getAudioStream(audioDeviceId);\n        const [audioTrack] = audioStream.getAudioTracks();\n        roomState.addMediaType(audioType);\n        roomState.addTrack(audioType, audioTrack);\n        const disposeStream = (s: MediaStream) => {\n          if (isMounted.current) {\n            setFaceStream((prev) => (prev === s ? null : prev));\n          }\n        };\n        setFaceStream((prev) =>\n          addTrackToStream(audioTrack, prev, disposeStream)\n        );\n        dispose = () => {\n          roomState.removeMediaType(audioType);\n          roomState.removeTrack(audioType);\n          disposeAudio();\n          // XXX we need to manually dispatch ended event, why?\n          audioTrack.dispatchEvent(new Event(\"ended\"));\n        };\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, userId, audioEnabled, audioDeviceId, audioType]);\n  useEffect(() => {\n    if (faceStream) {\n      faceStream.getAudioTracks().forEach((track) => {\n        const audioTrack = track;\n        audioTrack.enabled = micOn;\n      });\n      const onaddtrack = (event: MediaStreamTrackEvent) => {\n        const { track } = event;\n        if (track.kind === \"audio\") {\n          track.enabled = micOn;\n        }\n      };\n      faceStream.addEventListener(\"addtrack\", onaddtrack);\n      return () => {\n        faceStream.removeEventListener(\"addtrack\", onaddtrack);\n      };\n    }\n    return undefined;\n  }, [faceStream, micOn]);\n\n  return { faceStream, faceStreamMap };\n};\n","export const getVideoStream = async (deviceId?: string) => {\n  const constraints = deviceId\n    ? {\n        video: { deviceId },\n      }\n    : { video: true };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getVideoTracks();\n  const dispose = () => {\n    track.stop();\n  };\n  return {\n    stream,\n    dispose,\n  };\n};\n\nexport const getFaceVideoStream = async (deviceId?: string) => {\n  const constraints = {\n    video: {\n      deviceId,\n      frameRate: { max: 5 },\n      width: { exact: 72 },\n      height: { exact: 72 },\n    },\n  };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getVideoTracks();\n  const dispose = () => {\n    track.stop();\n  };\n  return {\n    stream,\n    dispose,\n  };\n};\n","import React from \"react\";\n\nimport \"./FaceCard.css\";\nimport { BLANK_IMAGE } from \"../media/imagePresets\";\n\nexport const FaceCard = React.memo<{\n  image?: string;\n  nickname: string;\n  statusMesg: string;\n  obsoleted?: boolean;\n  liveMode: boolean;\n  stream?: MediaStream;\n  muted: boolean;\n  micOn: boolean;\n  speakerOn: boolean;\n}>(\n  ({\n    image,\n    nickname,\n    statusMesg,\n    obsoleted,\n    liveMode,\n    stream,\n    muted,\n    micOn,\n    speakerOn,\n  }) => (\n    <div\n      className=\"FaceCard-container\"\n      style={{ opacity: obsoleted ? 0.2 : 1 }}\n    >\n      {liveMode && !obsoleted && stream ? (\n        <video\n          className=\"FaceCard-photo\"\n          ref={(videoEle) => {\n            if (videoEle && videoEle.srcObject !== stream) {\n              // eslint-disable-next-line no-param-reassign\n              videoEle.srcObject = stream;\n            }\n          }}\n          autoPlay\n          playsInline\n          muted={muted}\n        />\n      ) : (\n        <img\n          src={image || BLANK_IMAGE}\n          className=\"FaceCard-photo\"\n          alt=\"faceImage\"\n        />\n      )}\n      <div className=\"FaceCard-name\">{nickname}</div>\n      <div\n        className=\"FaceCard-mesg\"\n        title={[...statusMesg][1] ? statusMesg : \"(No status message)\"}\n      >\n        {[...statusMesg][0]}\n      </div>\n      {liveMode && !obsoleted && stream && (\n        <div className=\"FaceCard-live-indicator\" title=\"Live Mode On\">\n          &#9673;\n        </div>\n      )}\n      {liveMode && !obsoleted && !stream && (\n        <div className=\"FaceCard-live-indicator\" title=\"Live Mode Available\">\n          &#9678;\n        </div>\n      )}\n      {liveMode && !obsoleted && (\n        <div className=\"FaceCard-mic-speaker-icons\">\n          {micOn && <span title=\"Mic On\">&#x1F3A4;</span>}\n          {speakerOn && <span title=\"Speaker On\">&#x1F508;</span>}\n        </div>\n      )}\n    </div>\n  )\n);\n","import { sleep } from \"../utils/sleep\";\n\nconst captureImage = async (stream: MediaStream, track: MediaStreamTrack) => {\n  if (typeof ImageCapture !== \"undefined\") {\n    const imageCapture = new ImageCapture(track);\n    await sleep(2000);\n    let srcImg: ImageBitmap;\n    try {\n      const blob = await imageCapture.takePhoto();\n      srcImg = await createImageBitmap(blob);\n    } catch (e) {\n      srcImg = await imageCapture.grabFrame();\n    }\n    const srcW = srcImg.width;\n    const srcH = srcImg.height;\n    return { srcImg, srcW, srcH };\n  }\n  const video = document.createElement(\"video\");\n  video.autoplay = true;\n  video.setAttribute(\"playsinline\", \"\");\n  video.style.display = \"block\";\n  video.style.width = \"1px\";\n  video.style.height = \"1px\";\n  video.style.position = \"absolute\";\n  video.style.bottom = \"0\";\n  document.body.appendChild(video);\n  const dispose = () => {\n    document.body.removeChild(video);\n  };\n  video.srcObject = stream;\n  await sleep(2000);\n  const srcImg = video;\n  const srcW = video.videoWidth;\n  const srcH = video.videoHeight;\n  return { srcImg, srcW, srcH, dispose };\n};\n\nexport const takePhoto = async (deviceId?: string) => {\n  const constraints = deviceId\n    ? {\n        video: { deviceId },\n      }\n    : { video: true };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  const [track] = stream.getVideoTracks();\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const dstW = 72;\n  const dstH = 72;\n  canvas.width = dstW;\n  canvas.height = dstH;\n  const { srcImg, srcW, srcH, dispose } = await captureImage(stream, track);\n  const ratio = Math.max(dstW / srcW, dstH / srcH);\n  const width = Math.min(srcW, dstW / ratio);\n  const height = Math.min(srcH, dstH / ratio);\n  const x = (srcW - width) / 2;\n  const y = (srcH - height) / 2;\n  ctx.drawImage(srcImg, x, y, width, height, 0, 0, dstW, dstH);\n  if (dispose) {\n    dispose();\n  }\n  track.stop();\n  return canvas.toDataURL(\"image/jpeg\");\n};\n","import { useEffect, useState } from \"react\";\nimport { subscribe } from \"valtio\";\n\nimport { isObject } from \"../utils/types\";\nimport { takePhoto } from \"../media/capture\";\nimport { getRoomState } from \"../states/roomMap\";\n\ntype ImageUrl = string;\n\ntype FaceInfo = {\n  nickname: string;\n  message: string;\n  liveMode: boolean;\n  micOn: boolean;\n  speakerOn: boolean;\n};\n\nconst isFaceInfo = (x: unknown): x is FaceInfo =>\n  isObject(x) &&\n  typeof (x as { nickname: unknown }).nickname === \"string\" &&\n  typeof (x as { message: unknown }).message === \"string\" &&\n  typeof (x as { liveMode: unknown }).liveMode === \"boolean\" &&\n  typeof (x as { micOn: unknown }).micOn === \"boolean\" &&\n  typeof (x as { speakerOn: unknown }).speakerOn === \"boolean\";\n\ntype ImageData = {\n  userId: string;\n  image: ImageUrl;\n  info: FaceInfo;\n  updated: number; // in milliseconds\n};\n\nconst isImageData = (x: unknown): x is ImageData =>\n  isObject(x) &&\n  typeof (x as { image: unknown }).image === \"string\" &&\n  isFaceInfo((x as { info: unknown }).info) &&\n  typeof (x as { updated: unknown }).updated === \"number\";\n\nexport const useFaceImages = (\n  roomId: string,\n  userId: string,\n  avatar: string,\n  nickname: string,\n  statusMesg: string,\n  suspended: boolean,\n  liveMode: boolean,\n  micOn: boolean,\n  speakerOn: boolean,\n  deviceId?: string\n) => {\n  const [myImage, setMyImage] = useState<ImageUrl>();\n  const [roomImages, setRoomImages] = useState<ImageData[]>([]);\n\n  const [fatalError, setFatalError] = useState<Error>();\n  if (fatalError) {\n    throw fatalError;\n  }\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const listener = () => {\n      setRoomImages((prev) => {\n        const copied = [...prev];\n        let changed = false;\n        map.forEach((data, uid) => {\n          if (uid === userId) return;\n          if (!roomState.userIdMap[uid]) return;\n          if (!isImageData(data)) return;\n          const index = copied.findIndex((item) => item.userId === uid);\n          if (index === -1) {\n            copied.push(data);\n            changed = true;\n          } else if (data.updated > copied[index].updated) {\n            copied[index] = data;\n            changed = true;\n          }\n        });\n        const filtered = copied.filter(\n          (item) => roomState.userIdMap[item.userId]\n        );\n        changed = changed || copied.length !== filtered.length;\n        if (changed) {\n          return filtered;\n        }\n        return prev;\n      });\n    };\n    map.observe(listener);\n    const unsub = subscribe(roomState.userIdMap, listener);\n    listener();\n    return () => {\n      unsub();\n      map.unobserve(listener);\n    };\n  }, [roomId, userId]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const checkObsoletedImage = () => {\n      const tenMinAgo = Date.now() - 10 * 60 * 1000;\n      setRoomImages((prev) => {\n        const next = prev.flatMap((item) => {\n          if (item.updated < tenMinAgo) {\n            return [];\n          }\n          return [item];\n        });\n        return prev.length !== next.length ? next : prev;\n      });\n    };\n    let didCleanup = false;\n    let timer: NodeJS.Timeout;\n    const loop = async () => {\n      if (didCleanup) return;\n      try {\n        checkObsoletedImage();\n        const image = suspended ? avatar : await takePhoto(deviceId);\n        if (didCleanup) return;\n        setMyImage(image);\n        const info: FaceInfo = {\n          nickname,\n          message: statusMesg,\n          liveMode,\n          micOn,\n          speakerOn,\n        };\n        const data: ImageData = {\n          userId,\n          image,\n          info,\n          updated: Date.now(),\n        };\n        map.set(userId, data);\n      } catch (e) {\n        setFatalError(e);\n      }\n      timer = setTimeout(loop, 2 * 60 * 1000);\n    };\n    loop();\n    return () => {\n      didCleanup = true;\n      clearTimeout(timer);\n    };\n  }, [\n    roomId,\n    userId,\n    deviceId,\n    avatar,\n    nickname,\n    statusMesg,\n    suspended,\n    liveMode,\n    micOn,\n    speakerOn,\n  ]);\n\n  return {\n    myImage,\n    roomImages,\n  };\n};\n"],"sourceRoot":""}