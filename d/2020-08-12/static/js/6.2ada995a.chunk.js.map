{"version":3,"sources":["utils/sleep.ts","network/trackUtils.ts","network/ipfsUtils.ts","network/ipfsRoom.ts","utils/types.ts"],"names":["sleep","ms","Promise","resolve","setTimeout","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","a","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","peerIndexCounter","DEFAULT_CONFIG","iceServers","urls","username","credential","sdpSemantics","createConnectionMap","map","Map","registerRemoteMediaTypeFromSDP","conn","msid2mediaType","sdpLines","mid","value","get","peer","split","forEach","line","startsWith","slice","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","peerId","userId","Error","peerIndex","sendPc","recvPc","getConn","findConn","Array","from","values","v","delConn","delete","getPeerIndexList","forEachConns","callback","forEachConnsAcceptingMedia","includes","size","getRemoteMediaType","registerRemoteMediaType","sdp","hasObjectProp","hasStringProp","createRoom","roomId","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","myIpfs","myPeerId","connMap","roomTopic","ROOM_ID_PREFIX_LEN","importCryptoKey","cryptoKey","showConnectedStatus","peerIndexList","type","parsePayload","encrypted","JSON","decrypt","payload","parse","console","log","info","undefined","sendPayload","topic","encrypt","stringify","byteLength","warn","pubsub","publish","error","sendPayloadDirectly","noop","subscribe","unsubscribe","broadcastData","data","sendData","acceptMediaTypes","mTypes","transceivers","getReceivers","mType","readyState","sendSDP","getMsid2MediaType","SDP","handlePayloadSDP","isObject","negotiationId","negotiationIdMap","startNegotiation","running","secureRandomId","negotiate","sendIce","ice","ICE","handlePayloadIce","direction","e","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","x","syncAllTracks","handlePayloadData","handlePayload","initConnection","payloadUserId","getUserIdFromPayload","pubsubHandler","msg","checkPeers","peers","lastInitIpfsTime","Date","now","prevIpfs","closeIpfs","initIpfs","Ipfs","create","repo","config","Addresses","Swarm","ipfs","id","mediaTypeMap","stream","MediaStream","name","removeTrack","item","sender","getSenders","s","senders","some","dispose","prop"],"mappings":"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","file":"static/js/6.2ada995a.chunk.js","sourcesContent":["export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { sleep } from \"../utils/sleep\";\n\nconst setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = async () => {\n    await sleep(5000);\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    }\n  };\n  track.addEventListener(\"mute\", onmute);\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n","import { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nlet peerIndexCounter = 0;\n\nconst getNextPeerIndex = () => {\n  peerIndexCounter += 1;\n  return peerIndexCounter;\n};\n\nexport type Connection = {\n  peerIndex: number;\n  peer: string; // ipfsId\n  userId: string;\n  sendPc: RTCPeerConnection;\n  recvPc: RTCPeerConnection;\n};\n\nconst DEFAULT_CONFIG = {\n  iceServers: [\n    { urls: \"stun:stun.l.google.com:19302\" },\n    {\n      urls: \"turn:0.peerjs.com:3478\",\n      username: \"peerjs\",\n      credential: \"peerjsp\",\n    },\n  ],\n  sdpSemantics: \"unified-plan\",\n};\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Connection;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (conn: Connection, mediaTypes: string[]) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (peerId: string, userId: string) => {\n    const value = map.get(peerId);\n    if (value) {\n      throw new Error(\"addConn: already exists\");\n    }\n    const conn: Connection = {\n      peerIndex: getNextPeerIndex(),\n      peer: peerId,\n      userId,\n      sendPc: new RTCPeerConnection(DEFAULT_CONFIG),\n      recvPc: new RTCPeerConnection(DEFAULT_CONFIG),\n    };\n    map.set(conn.peer, {\n      conn,\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n    return conn;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const findConn = (peerIndex: number) => {\n    const value = Array.from(map.values()).find(\n      (v) => v.conn.peerIndex === peerIndex\n    );\n    if (value) return value.conn;\n    return null;\n  };\n\n  const delConn = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n      conn.sendPc.close();\n      conn.recvPc.close();\n    } else {\n      throw new Error(\"delConn: does not exist\");\n    }\n  };\n\n  const getPeerIndexList = () =>\n    Array.from(map.values()).map((v) => v.conn.peerIndex);\n\n  const forEachConns = (callback: (conn: Connection) => void) => {\n    Array.from(map.values()).forEach((value) => {\n      callback(value.conn);\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Connection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const size = () => map.size;\n\n  const getRemoteMediaType = (conn: Connection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Connection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Connection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    getConn,\n    findConn,\n    delConn,\n    getPeerIndexList,\n    forEachConns,\n    forEachConnsAcceptingMedia,\n    size,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Ipfs, { IpfsType, PubsubHandler } from \"ipfs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  secureRandomId,\n  importCryptoKey,\n  encrypt,\n  decrypt,\n} from \"../utils/crypto\";\nimport { isObject, hasStringProp, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport { Connection, createConnectionMap } from \"./ipfsUtils\";\nimport { setupTrackStopOnLongMute } from \"./trackUtils\";\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  let myIpfs: IpfsType | null = null;\n  let myPeerId: string | null = null;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n\n  const roomTopic = roomId.slice(0, ROOM_ID_PREFIX_LEN);\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap.getPeerIndexList();\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n  };\n\n  const parsePayload = async (encrypted: ArrayBuffer): Promise<unknown> => {\n    try {\n      const payload = JSON.parse(await decrypt(encrypted, cryptoKey));\n      console.log(\"decrypted payload\", payload);\n      return payload;\n    } catch (e) {\n      console.info(\"Error in parsePayload\", e, encrypted);\n      return undefined;\n    }\n  };\n\n  const sendPayload = async (topic: string, payload: unknown) => {\n    try {\n      console.log(\"payload to encrypt\", topic, payload);\n      const encrypted = await encrypt(JSON.stringify(payload), cryptoKey);\n      console.log(\"sending encrypted\", encrypted.byteLength);\n      if (encrypted.byteLength > 262144) {\n        console.warn(\"encrypted message too large, aborting\");\n        return;\n      }\n      if (!myIpfs) {\n        console.warn(\"no myIpfs initialized\");\n        return;\n      }\n      await myIpfs.pubsub.publish(topic, encrypted);\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const sendPayloadDirectly = async (conn: Connection, payload: unknown) => {\n    const topic = `${roomTopic} ${conn.peer}`;\n    // HACK somehow, publish doesn't work without this\n    if (myIpfs) {\n      const noop = () => null;\n      await myIpfs.pubsub.subscribe(topic, noop);\n      await myIpfs.pubsub.unsubscribe(topic, noop);\n    }\n    await sendPayload(topic, payload);\n  };\n\n  const broadcastData = async (data: unknown) => {\n    if (disposed) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayload(roomTopic, payload);\n  };\n\n  const sendData = async (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.findConn(peerIndex);\n    if (!conn) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayloadDirectly(conn, payload);\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).sendData = sendData;\n  }\n\n  const acceptMediaTypes = (mTypes: string[]) => {\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConns((conn) => {\n        const info: PeerInfo = {\n          userId: conn.userId,\n          peerIndex: conn.peerIndex,\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        const transceivers = conn.recvPc.getTransceivers();\n        conn.recvPc.getReceivers().forEach((receiver) => {\n          const transceiver = transceivers.find((t) => t.receiver === receiver);\n          const mid = transceiver?.mid;\n          const mType = mid && connMap.getRemoteMediaType(conn, mid);\n          if (!mType) {\n            console.warn(\"failed to find media type from mid\");\n            return;\n          }\n          if (\n            receiver.track.readyState === \"live\" &&\n            !mediaTypes.includes(mType) &&\n            mTypes.includes(mType)\n          ) {\n            receiveTrack(\n              mType,\n              setupTrackStopOnLongMute(receiver.track, conn.recvPc),\n              info\n            );\n          }\n        });\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const sendSDP = async (\n    conn: Connection,\n    sdp:\n      | {\n          negotiationId: string;\n          offer: RTCSessionDescriptionInit;\n        }\n      | {\n          negotiationId: string;\n          answer: RTCSessionDescriptionInit;\n        }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    await sendPayloadDirectly(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Connection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    if (!hasStringProp(sdp, \"negotiationId\")) {\n      console.warn(\"negotiationId not found in SDP\");\n      return;\n    }\n    const { negotiationId } = sdp;\n    connMap.registerRemoteMediaType(conn, sdp);\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.recvPc.setRemoteDescription(sdp.offer);\n        const answer = await conn.recvPc.createAnswer();\n        await conn.recvPc.setLocalDescription(answer);\n        sendSDP(conn, { negotiationId, answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      if (negotiationIdMap.get(conn) === negotiationId) {\n        negotiationIdMap.delete(conn);\n      }\n      try {\n        await conn.sendPc.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const negotiationIdMap = new WeakMap<Connection, string>();\n  const startNegotiation = (conn: Connection) => {\n    const running = negotiationIdMap.has(conn);\n    negotiationIdMap.set(conn, secureRandomId());\n    if (running) return;\n    const negotiate = async () => {\n      const negotiationId = negotiationIdMap.get(conn);\n      if (!negotiationId) return;\n      const offer = await conn.sendPc.createOffer();\n      await conn.sendPc.setLocalDescription(offer);\n      await sendSDP(conn, { negotiationId, offer });\n      await sleep(5000);\n      negotiate();\n    };\n    negotiate();\n  };\n\n  const sendIce = (\n    conn: Connection,\n    ice: {\n      direction: \"send\" | \"recv\";\n      candidate: RTCIceCandidate;\n    }\n  ) => {\n    sendPayloadDirectly(conn, { ICE: ice });\n  };\n\n  const handlePayloadIce = (conn: Connection, ice: unknown) => {\n    if (!isObject(ice)) return;\n    if (!hasStringProp(ice, \"direction\")) {\n      console.warn(\"direction not found in ICE\");\n      return;\n    }\n    if (!hasObjectProp(ice, \"candidate\")) {\n      console.warn(\"candidate not found in ICE\");\n      return;\n    }\n    try {\n      if (ice.direction === \"send\") {\n        conn.recvPc.addIceCandidate(ice.candidate);\n      } else if (ice.direction === \"recv\") {\n        conn.sendPc.addIceCandidate(ice.candidate);\n      }\n    } catch (e) {\n      console.info(\"handleCandidate failed\", e);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Connection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadData = (conn: Connection, data: unknown) => {\n    const info: PeerInfo = {\n      userId: conn.userId,\n      peerIndex: conn.peerIndex,\n      mediaTypes: connMap.getAcceptingMediaTypes(conn),\n    };\n    try {\n      receiveData(data, info);\n    } catch (e) {\n      console.warn(\"receiveData\", e);\n    }\n  };\n\n  const handlePayload = async (conn: Connection, payload: unknown) => {\n    if (disposed) return;\n    try {\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadIce(conn, (payload as { ICE?: unknown }).ICE);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, payload);\n    }\n  };\n\n  const initConnection = (peerId: string, payloadUserId: string) => {\n    const conn = connMap.addConn(peerId, payloadUserId);\n    conn.sendPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"send\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"recv\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      const { mid } = event.transceiver;\n      const mType = mid && connMap.getRemoteMediaType(conn, mid);\n      if (!mType) {\n        console.warn(\"failed to find media type from mid\");\n        return;\n      }\n      const info: PeerInfo = {\n        userId: conn.userId,\n        peerIndex: conn.peerIndex,\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      receiveTrack(\n        mType,\n        setupTrackStopOnLongMute(event.track, conn.recvPc),\n        info\n      );\n    });\n    notifyNewPeer(conn.peerIndex);\n    updateNetworkStatus({\n      type: \"NEW_CONNECTION\",\n      peerIndex: conn.peerIndex,\n    });\n    return conn;\n  };\n\n  const getUserIdFromPayload = (payload: unknown) => {\n    if (!isObject(payload)) return null;\n    const payloadUserId = (payload as { userId: unknown }).userId;\n    if (typeof payloadUserId !== \"string\") return null;\n    return payloadUserId;\n  };\n\n  const pubsubHandler: PubsubHandler = async (msg) => {\n    if (msg.from === myPeerId) return;\n    const payload = await parsePayload(msg.data);\n    const payloadUserId = getUserIdFromPayload(payload);\n    let conn = connMap.getConn(msg.from);\n    if (!conn) {\n      if (payloadUserId) {\n        conn = initConnection(msg.from, payloadUserId);\n      } else {\n        console.warn(\"cannot initialize conn without user id\");\n      }\n    }\n    if (conn) {\n      await handlePayload(conn, payload);\n    }\n    showConnectedStatus();\n  };\n\n  const checkPeers = async () => {\n    if (disposed) return;\n    const peers = myIpfs ? myIpfs.pubsub.peers(roomTopic) : [];\n    connMap.forEachConns((conn) => {\n      if (!peers.includes(conn.peer)) {\n        connMap.delConn(conn);\n        updateNetworkStatus({\n          type: \"CONNECTION_CLOSED\",\n          peerIndex: conn.peerIndex,\n        });\n      }\n    });\n    if (\n      myIpfs &&\n      connMap.size() === 0 &&\n      lastInitIpfsTime + 3 * 60 * 1000 < Date.now()\n    ) {\n      const prevIpfs = myIpfs;\n      myIpfs = null;\n      myPeerId = null;\n      await closeIpfs(prevIpfs);\n      await sleep(20 * 1000);\n      await initIpfs();\n      return;\n    }\n    if (!peers.length) {\n      updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n      await sleep(1000);\n      checkPeers();\n      return;\n    }\n    if (!connMap.size()) {\n      await broadcastData(null);\n    }\n    await sleep(5000);\n    checkPeers();\n  };\n\n  let lastInitIpfsTime = 0;\n  const initIpfs = async () => {\n    lastInitIpfsTime = Date.now();\n    updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex: 0 });\n    const ipfs: IpfsType = await Ipfs.create({\n      repo: secureRandomId(),\n      config: {\n        Addresses: {\n          Swarm: [\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          ],\n        },\n      },\n    });\n    myPeerId = (await ipfs.id()).id;\n    await ipfs.pubsub.subscribe(roomTopic, pubsubHandler);\n    await ipfs.pubsub.subscribe(`${roomTopic} ${myPeerId}`, pubsubHandler);\n    myIpfs = ipfs;\n    if (process.env.NODE_ENV !== \"production\") {\n      (window as any).myIpfs = myIpfs;\n    }\n    checkPeers();\n  };\n  initIpfs();\n\n  const closeIpfs = async (ipfs: IpfsType) => {\n    await ipfs.pubsub.unsubscribe(`${roomTopic} ${myPeerId}`, pubsubHandler);\n    await ipfs.pubsub.unsubscribe(roomTopic, pubsubHandler);\n    await ipfs.stop();\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.sendPc.getSenders();\n      const sender = senders.find((s) => s.track === track);\n      if (sender) {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Connection) => {\n    const senders = conn.sendPc.getSenders();\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective) {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const dispose = async () => {\n    disposed = true;\n    if (myIpfs) {\n      closeIpfs(myIpfs);\n    }\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<F extends (...args: any) => any> = ReturnType<\n  F\n> extends Promise<infer T>\n  ? T\n  : never;\n"],"sourceRoot":""}