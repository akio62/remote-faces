{"version":3,"sources":["hooks/useGoBoard.ts","components/GoBoard.tsx"],"names":["useGoBoard","roomId","userId","syncDown","useEffect","list","getRoomState","ydoc","getArray","listener","toArray","flatMap","item","data","JSON","parse","x","obj","size","grid","length","some","c","Color","B","W","E","capCount","black","white","turn","e","isPositionData","observe","unobserve","syncUp","useCallback","positions","push","slice","map","stringify","delete","createPosition","positionData","position","Position","GoBoard","React","memo","actionsRef","useRef","current","useState","color","setColor","setCapCount","divRef","actions","element","game","Game","board","CanvasBoard","theme","themes","modernTheme","width","clientWidth","fieldObjects","markerObject","updateFieldObjects","filter","getStone","y","type","removeObject","get","FieldObject","addObject","BoardMarkupObject","hoverObject","clearHoverObject","on","_event","pos","isValid","setPosition","play","positionStack","pushPosition","popPosition","pass","undo","resize","setWidth","createGoBoard","window","addEventListener","removeEventListener","className","onClick","ref"],"mappings":"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","file":"static/js/21.f7f58192.chunk.js","sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport { Color } from \"wgo\";\n\nimport { getRoomState } from \"../states/roomMap\";\n\nexport type PositionData = {\n  size: number;\n  grid: Color[];\n  capCount: { black: number; white: number };\n  turn: Color.B | Color.W;\n};\n\nconst isPositionData = (x: unknown): x is PositionData => {\n  try {\n    const obj = x as PositionData;\n    if (typeof obj.size !== \"number\") return false;\n    if (obj.grid.length !== obj.size * obj.size) return false;\n    if (obj.grid.some((c) => c !== Color.B && c !== Color.W && c !== Color.E)) {\n      return false;\n    }\n    if (\n      typeof obj.capCount.black !== \"number\" ||\n      typeof obj.capCount.white !== \"number\"\n    ) {\n      return false;\n    }\n    if (obj.turn !== Color.B && obj.turn !== Color.W) return false;\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport type Action =\n  | {\n      type: \"play\";\n      position: PositionData;\n    }\n  | {\n      type: \"pass\";\n      position: PositionData;\n    }\n  | {\n      type: \"undo\";\n    };\n\nexport const useGoBoard = (\n  roomId: string,\n  userId: string,\n  syncDown: (positions: PositionData[]) => void\n) => {\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const list = roomState.ydoc.getArray(\"goBoard\");\n    const listener = () => {\n      syncDown(\n        list.toArray().flatMap((item) => {\n          try {\n            const data = JSON.parse(item as string);\n            if (isPositionData(data)) {\n              return [data];\n            }\n          } catch (e) {\n            // ignored\n          }\n          return [];\n        })\n      );\n    };\n    list.observe(listener);\n    listener();\n    return () => {\n      list.unobserve(listener);\n    };\n  }, [roomId, userId, syncDown]);\n\n  const syncUp = useCallback(\n    (positions: PositionData[]) => {\n      const roomState = getRoomState(roomId, userId);\n      const list = roomState.ydoc.getArray(\"goBoard\");\n      if (list.length < positions.length) {\n        list.push(positions.slice(list.length).map((x) => JSON.stringify(x)));\n      } else if (list.length > positions.length) {\n        list.delete(positions.length, list.length - positions.length);\n      }\n    },\n    [roomId, userId]\n  );\n\n  return { syncUp };\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  Game,\n  Color,\n  CanvasBoard,\n  themes,\n  FieldObject,\n  BoardMarkupObject,\n  Position,\n} from \"wgo\";\n\nimport \"./GoBoard.css\";\nimport { useGoBoard, PositionData } from \"../hooks/useGoBoard\";\n\nconst createPosition = (positionData: PositionData) => {\n  const position = new Position(positionData.size);\n  position.grid = positionData.grid;\n  position.capCount = positionData.capCount;\n  position.turn = positionData.turn;\n  return position;\n};\n\nconst createGoBoard = (\n  element: HTMLDivElement,\n  setColor: (c: \"black\" | \"white\") => void,\n  setCapCount: (capCount: { black: number; white: number }) => void,\n  syncUp: (positions: PositionData[]) => void\n) => {\n  const game = new Game(6);\n  const board = new CanvasBoard(element, {\n    theme: themes.modernTheme,\n    width: element.clientWidth / 2,\n    size: 6,\n  });\n  let fieldObjects: FieldObject[] = [];\n  let markerObject: BoardMarkupObject | null | false = null;\n  const updateFieldObjects = () => {\n    fieldObjects = fieldObjects.filter((obj) => {\n      if (\n        game.getStone(obj.x, obj.y) !== (obj.type === \"B\" ? Color.B : Color.W)\n      ) {\n        board.removeObject(obj);\n        return false;\n      }\n      return true;\n    });\n    if (markerObject) {\n      board.removeObject(markerObject);\n    }\n    markerObject = null;\n    for (let x = 0; x < game.position.size; x += 1) {\n      for (let y = 0; y < game.position.size; y += 1) {\n        const c = game.position.get(x, y);\n        if (\n          c &&\n          !fieldObjects.some(\n            (obj) =>\n              obj.x === x &&\n              obj.y === y &&\n              c === (obj.type === \"B\" ? Color.B : Color.W)\n          )\n        ) {\n          const obj = new FieldObject(c === Color.B ? \"B\" : \"W\", x, y);\n          board.addObject(obj);\n          fieldObjects.push(obj);\n          if (markerObject === null) {\n            markerObject = new BoardMarkupObject(\"SQ\", x, y, c);\n            board.addObject(markerObject);\n          } else if (markerObject) {\n            // we don't know what is the last move\n            board.removeObject(markerObject);\n            markerObject = false; // don't put marker this time\n          }\n        }\n      }\n    }\n  };\n  let hoverObject: FieldObject | null = null;\n  const clearHoverObject = () => {\n    if (hoverObject) {\n      board.removeObject(hoverObject);\n      hoverObject = null;\n    }\n  };\n  board.on(\"mousemove\", (_event, pos) => {\n    const isValid = pos && game.isValid(pos.x, pos.y);\n    if (!isValid) {\n      clearHoverObject();\n      return;\n    }\n    if (!hoverObject) {\n      hoverObject = new FieldObject(game.turn === Color.B ? \"B\" : \"W\");\n    } else if (hoverObject.x === pos.x && hoverObject.y === pos.y) {\n      return;\n    } else {\n      board.removeObject(hoverObject);\n    }\n    hoverObject.setPosition(pos.x, pos.y);\n    board.addObject(hoverObject);\n  });\n  board.on(\"mouseout\", clearHoverObject);\n  board.on(\"click\", (_event, { x, y }) => {\n    const isValid = game.isValid(x, y);\n    if (isValid) {\n      clearHoverObject();\n      game.play(x, y);\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      syncUp(game.positionStack);\n    }\n  });\n  setColor(game.turn === Color.B ? \"black\" : \"white\");\n  const syncDown = (positions: PositionData[]) => {\n    if (game.positionStack.length === positions.length) return;\n    while (game.positionStack.length < positions.length) {\n      game.pushPosition(createPosition(positions[game.positionStack.length]));\n    }\n    while (game.positionStack.length > positions.length) {\n      game.popPosition();\n    }\n    updateFieldObjects();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    setCapCount(game.position.capCount);\n    clearHoverObject();\n  };\n  const pass = () => {\n    game.pass();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    syncUp(game.positionStack);\n  };\n  const undo = () => {\n    if (game.popPosition()) {\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      syncUp(game.positionStack);\n    }\n  };\n  const resize = () => {\n    board.setWidth(element.clientWidth / 2);\n  };\n  return { syncDown, pass, undo, resize };\n};\n\nexport const GoBoard = React.memo<{\n  roomId: string;\n  userId: string;\n}>(({ roomId, userId }) => {\n  const actionsRef = useRef<{\n    syncDown: (positions: PositionData[]) => void;\n    pass: () => void;\n    undo: () => void;\n    resize: () => void;\n  }>();\n  const syncDown = useCallback((positions: PositionData[]) => {\n    if (actionsRef.current) {\n      actionsRef.current.syncDown(positions);\n    }\n  }, []);\n  const { syncUp } = useGoBoard(roomId, userId, syncDown);\n  const [color, setColor] = useState<\"black\" | \"white\">(\"black\");\n  const [capCount, setCapCount] = useState<{\n    black: number;\n    white: number;\n  }>({ black: 0, white: 0 });\n  const divRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (divRef.current) {\n      const div = divRef.current;\n      const actions = createGoBoard(div, setColor, setCapCount, syncUp);\n      actionsRef.current = actions;\n      window.addEventListener(\"resize\", actions.resize);\n      return () => {\n        window.removeEventListener(\"resize\", actions.resize);\n      };\n    }\n    return undefined;\n  }, [syncUp]);\n  const pass = () => {\n    if (actionsRef.current) {\n      actionsRef.current.pass();\n    }\n  };\n  const undo = () => {\n    if (actionsRef.current) {\n      actionsRef.current.undo();\n    }\n  };\n  return (\n    <div className=\"GoBoard-container\">\n      <div className=\"GoBoard-toolbar\">\n        Next Turn: {color === \"black\" ? \"Black\" : \"White\"}\n        <button type=\"button\" onClick={pass}>\n          Pass\n        </button>\n        <button type=\"button\" onClick={undo}>\n          Undo\n        </button>\n        <div>\n          Capture Count: Black {capCount.black}, White {capCount.white}\n        </div>\n      </div>\n      <div className=\"GoBoard-canvas\" ref={divRef} />\n    </div>\n  );\n});\n\nexport default GoBoard;\n"],"sourceRoot":""}