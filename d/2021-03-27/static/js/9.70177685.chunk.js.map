{"version":3,"sources":["utils/types.ts","utils/sleep.ts","network/trackUtils.ts","network/ipfsUtils.ts","network/ipfsRoom.ts"],"names":["isObject","x","hasStringProp","prop","hasObjectProp","sleep","ms","Promise","resolve","setTimeout","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","timeout","readyState","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","a","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","videoTrackToImageConverter","kind","Error","canvas","document","createElement","ctx","getContext","imageCapture","ImageCapture","getImage","grabFrame","bitmap","width","height","drawImage","toDataURL","console","log","createImage","src","img","Image","onload","onerror","imageToVideoTrackConverter","captureStream","getVideoTracks","videoTrack","setImage","dataURL","peerIndexCounter","DEFAULT_CONFIG","iceServers","urls","username","credential","sdpSemantics","createConnectionMap","map","Map","registerRemoteMediaTypeFromSDP","conn","msid2mediaType","sdpLines","mid","value","get","peer","split","forEach","line","startsWith","slice","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","peerId","userId","peerIndex","sendPc","recvPc","getConn","findConn","Array","from","values","v","delConn","delete","getPeerIndexList","forEachConns","callback","forEachConnsAcceptingMedia","includes","size","getRemoteMediaType","registerRemoteMediaType","sdp","createRoom","roomId","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","connMap","roomTopic","ROOM_ID_PREFIX_LEN","importCryptoKey","cryptoKey","type","Ipfs","create","repo","secureRandomId","config","Addresses","Swarm","myIpfs","id","myPeerId","myIpfsPubSubRoom","IpfsPubSubRoom","on","msg","pubsubHandler","broadcastData","parsePayload","encrypted","decryptStringFromChunks","str","undefined","payload","JSON","parse","info","sendPayload","topic","encryptStringToChunks","stringify","broadcast","error","sendPayloadDirectly","sendTo","data","sendData","acceptMediaTypes","mTypes","transceivers","getReceivers","mType","warn","sendSDP","getMsid2MediaType","SDP","handlePayloadSDP","negotiationId","negotiationIdMap","startNegotiation","running","negotiate","signalingState","sendIce","ice","ICE","handlePayloadIce","direction","e","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","syncAllTracks","handlePayloadData","handlePayload","initConnection","payloadUserId","getUserIdFromPayload","peerIndexList","mediaTypeMap","stream","MediaStream","name","removeTrack","item","sender","getSenders","s","senders","some","dispose","leave"],"mappings":"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","file":"static/js/9.70177685.chunk.js","sourcesContent":["export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<\n  F extends (...args: any) => any\n> = ReturnType<F> extends Promise<infer T> ? T : never;\n","export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","const setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = (timeout = 1000) => {\n    if (track.readyState === \"ended\") return;\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    } else if (timeout < 64000) {\n      setTimeout(() => {\n        onmute(timeout * 2);\n      }, timeout);\n    }\n  };\n  track.addEventListener(\"mute\", () => onmute());\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n\nexport const videoTrackToImageConverter = async (track: MediaStreamTrack) => {\n  if (track.kind !== \"video\") {\n    throw new Error(\"track kind is not video\");\n  }\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const imageCapture = new ImageCapture(track);\n  const getImage = async () => {\n    try {\n      const bitmap = await imageCapture.grabFrame();\n      canvas.width = bitmap.width;\n      canvas.height = bitmap.height;\n      ctx.drawImage(bitmap, 0, 0);\n      return canvas.toDataURL(\"image/jpeg\");\n    } catch (e) {\n      console.log(\"failed to grab frame from viedeo track\", e);\n      return null;\n    }\n  };\n  return { getImage };\n};\n\nconst createImage = (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = src;\n  });\n\nexport const imageToVideoTrackConverter = () => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const canvasStream = (canvas as any).captureStream() as MediaStream;\n  const [videoTrack] = canvasStream.getVideoTracks();\n  const setImage = async (dataURL: string) => {\n    const img = await createImage(dataURL);\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n  };\n  return { videoTrack, setImage };\n};\n","import { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nlet peerIndexCounter = 0;\n\nconst getNextPeerIndex = () => {\n  peerIndexCounter += 1;\n  return peerIndexCounter;\n};\n\nexport type Connection = {\n  peerIndex: number;\n  peer: string; // ipfsId\n  userId: string;\n  sendPc: RTCPeerConnection;\n  recvPc: RTCPeerConnection;\n};\n\nconst DEFAULT_CONFIG = {\n  iceServers: [\n    { urls: \"stun:stun.l.google.com:19302\" },\n    {\n      urls: \"turn:0.peerjs.com:3478\",\n      username: \"peerjs\",\n      credential: \"peerjsp\",\n    },\n  ],\n  sdpSemantics: \"unified-plan\",\n};\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Connection;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (conn: Connection, mediaTypes: string[]) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (peerId: string, userId: string) => {\n    const value = map.get(peerId);\n    if (value) {\n      throw new Error(\"addConn: already exists\");\n    }\n    const conn: Connection = {\n      peerIndex: getNextPeerIndex(),\n      peer: peerId,\n      userId,\n      sendPc: new RTCPeerConnection(DEFAULT_CONFIG),\n      recvPc: new RTCPeerConnection(DEFAULT_CONFIG),\n    };\n    map.set(conn.peer, {\n      conn,\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n    return conn;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const findConn = (peerIndex: number) => {\n    const value = Array.from(map.values()).find(\n      (v) => v.conn.peerIndex === peerIndex\n    );\n    if (value) return value.conn;\n    return null;\n  };\n\n  const delConn = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n      conn.sendPc.close();\n      conn.recvPc.close();\n    } else {\n      throw new Error(\"delConn: does not exist\");\n    }\n  };\n\n  const getPeerIndexList = () =>\n    Array.from(map.values()).map((v) => v.conn.peerIndex);\n\n  const forEachConns = (callback: (conn: Connection) => void) => {\n    Array.from(map.values()).forEach((value) => {\n      callback(value.conn);\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Connection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const size = () => map.size;\n\n  const getRemoteMediaType = (conn: Connection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Connection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Connection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    getConn,\n    findConn,\n    delConn,\n    getPeerIndexList,\n    forEachConns,\n    forEachConnsAcceptingMedia,\n    size,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Ipfs, { PubsubHandler } from \"ipfs\";\nimport IpfsPubSubRoom from \"ipfs-pubsub-room\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  secureRandomId,\n  importCryptoKey,\n  encryptStringToChunks,\n  decryptStringFromChunks,\n} from \"../utils/crypto\";\nimport { isObject, hasStringProp, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport { Connection, createConnectionMap } from \"./ipfsUtils\";\nimport { setupTrackStopOnLongMute } from \"./trackUtils\";\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n\n  const roomTopic = roomId.slice(0, ROOM_ID_PREFIX_LEN);\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex: 0 });\n  const myIpfs = await Ipfs.create({\n    repo: secureRandomId(),\n    config: {\n      Addresses: {\n        Swarm: [\n          \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          // \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n        ],\n      },\n    },\n  });\n  const myPeerId = (await myIpfs.id()).id;\n  const myIpfsPubSubRoom = new IpfsPubSubRoom(myIpfs, roomTopic);\n  myIpfsPubSubRoom.on(\"message\", (msg) => pubsubHandler(msg));\n  myIpfsPubSubRoom.on(\"peer joined\", () => {\n    broadcastData(null); // XXX this is not efficient, we don't need to broadcast\n  });\n  myIpfsPubSubRoom.on(\"peer left\", (peerId: string) => {\n    const conn = connMap.getConn(peerId);\n    if (conn) {\n      connMap.delConn(conn);\n      updateNetworkStatus({\n        type: \"CONNECTION_CLOSED\",\n        peerIndex: conn.peerIndex,\n      });\n    }\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myIpfs = myIpfs;\n  }\n\n  const parsePayload = async (encrypted: ArrayBuffer): Promise<unknown> => {\n    try {\n      const str = await decryptStringFromChunks(encrypted, cryptoKey);\n      if (str === null) return undefined;\n      const payload = JSON.parse(str);\n      console.log(\"decrypted payload\", payload);\n      return payload;\n    } catch (e) {\n      console.info(\"Error in parsePayload\", e, encrypted);\n      return undefined;\n    }\n  };\n\n  const sendPayload = async (topic: string, payload: unknown) => {\n    try {\n      console.log(\"payload to encrypt\", topic, payload);\n      for await (const encrypted of encryptStringToChunks(\n        JSON.stringify(payload),\n        cryptoKey\n      )) {\n        myIpfsPubSubRoom.broadcast(encrypted);\n      }\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const sendPayloadDirectly = async (conn: Connection, payload: unknown) => {\n    try {\n      for await (const encrypted of encryptStringToChunks(\n        JSON.stringify(payload),\n        cryptoKey\n      )) {\n        myIpfsPubSubRoom.sendTo(conn.peer, encrypted);\n      }\n    } catch (e) {\n      console.error(\"sendPayloadDirectly\", e);\n    }\n  };\n\n  const broadcastData = async (data: unknown) => {\n    if (disposed) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayload(roomTopic, payload);\n  };\n\n  const sendData = async (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.findConn(peerIndex);\n    if (!conn) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayloadDirectly(conn, payload);\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).sendData = sendData;\n  }\n\n  const acceptMediaTypes = (mTypes: string[]) => {\n    if (disposed) return;\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConns((conn) => {\n        const info: PeerInfo = {\n          userId: conn.userId,\n          peerIndex: conn.peerIndex,\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        const transceivers = conn.recvPc.getTransceivers();\n        conn.recvPc.getReceivers().forEach((receiver) => {\n          const transceiver = transceivers.find((t) => t.receiver === receiver);\n          const mid = transceiver?.mid;\n          const mType = mid && connMap.getRemoteMediaType(conn, mid);\n          if (!mType) {\n            console.warn(\"failed to find media type from mid\");\n            return;\n          }\n          if (\n            receiver.track.readyState === \"live\" &&\n            !mediaTypes.includes(mType) &&\n            mTypes.includes(mType)\n          ) {\n            receiveTrack(\n              mType,\n              setupTrackStopOnLongMute(receiver.track, conn.recvPc),\n              info\n            );\n          }\n        });\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const sendSDP = async (\n    conn: Connection,\n    sdp:\n      | {\n          negotiationId: string;\n          offer: RTCSessionDescriptionInit;\n        }\n      | {\n          negotiationId: string;\n          answer: RTCSessionDescriptionInit;\n        }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    await sendPayloadDirectly(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Connection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    if (!hasStringProp(sdp, \"negotiationId\")) {\n      console.warn(\"negotiationId not found in SDP\");\n      return;\n    }\n    const { negotiationId } = sdp;\n    connMap.registerRemoteMediaType(conn, sdp);\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.recvPc.setRemoteDescription(sdp.offer);\n        const answer = await conn.recvPc.createAnswer();\n        await conn.recvPc.setLocalDescription(answer);\n        sendSDP(conn, { negotiationId, answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      if (negotiationIdMap.get(conn) === negotiationId) {\n        negotiationIdMap.delete(conn);\n      }\n      try {\n        await conn.sendPc.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const negotiationIdMap = new WeakMap<Connection, string>();\n  const startNegotiation = (conn: Connection) => {\n    const running = negotiationIdMap.has(conn);\n    negotiationIdMap.set(conn, secureRandomId());\n    if (running) return;\n    const negotiate = async () => {\n      const negotiationId = negotiationIdMap.get(conn);\n      if (!negotiationId) return;\n      if (conn.sendPc.signalingState === \"closed\") {\n        negotiationIdMap.delete(conn);\n        return;\n      }\n      const offer = await conn.sendPc.createOffer();\n      await conn.sendPc.setLocalDescription(offer);\n      await sendSDP(conn, { negotiationId, offer });\n      await sleep(5000);\n      negotiate();\n    };\n    negotiate();\n  };\n\n  const sendIce = (\n    conn: Connection,\n    ice: {\n      direction: \"send\" | \"recv\";\n      candidate: RTCIceCandidate;\n    }\n  ) => {\n    sendPayloadDirectly(conn, { ICE: ice });\n  };\n\n  const handlePayloadIce = (conn: Connection, ice: unknown) => {\n    if (!isObject(ice)) return;\n    if (!hasStringProp(ice, \"direction\")) {\n      console.warn(\"direction not found in ICE\");\n      return;\n    }\n    if (!hasObjectProp(ice, \"candidate\")) {\n      console.warn(\"candidate not found in ICE\");\n      return;\n    }\n    try {\n      if (ice.direction === \"send\") {\n        conn.recvPc.addIceCandidate(ice.candidate);\n      } else if (ice.direction === \"recv\") {\n        conn.sendPc.addIceCandidate(ice.candidate);\n      }\n    } catch (e) {\n      console.info(\"handleCandidate failed\", e);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Connection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadData = (conn: Connection, data: unknown) => {\n    const info: PeerInfo = {\n      userId: conn.userId,\n      peerIndex: conn.peerIndex,\n      mediaTypes: connMap.getAcceptingMediaTypes(conn),\n    };\n    try {\n      receiveData(data, info);\n    } catch (e) {\n      console.warn(\"receiveData\", e);\n    }\n  };\n\n  const handlePayload = async (conn: Connection, payload: unknown) => {\n    try {\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadIce(conn, (payload as { ICE?: unknown }).ICE);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, payload);\n    }\n  };\n\n  const initConnection = (peerId: string, payloadUserId: string) => {\n    const conn = connMap.addConn(peerId, payloadUserId);\n    conn.sendPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"send\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"recv\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      const { mid } = event.transceiver;\n      const mType = mid && connMap.getRemoteMediaType(conn, mid);\n      if (!mType) {\n        console.warn(\"failed to find media type from mid\");\n        return;\n      }\n      const info: PeerInfo = {\n        userId: conn.userId,\n        peerIndex: conn.peerIndex,\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      receiveTrack(\n        mType,\n        setupTrackStopOnLongMute(event.track, conn.recvPc),\n        info\n      );\n    });\n    notifyNewPeer(conn.peerIndex);\n    updateNetworkStatus({\n      type: \"NEW_CONNECTION\",\n      peerIndex: conn.peerIndex,\n    });\n    return conn;\n  };\n\n  const getUserIdFromPayload = (payload: unknown) => {\n    if (!isObject(payload)) return null;\n    const payloadUserId = (payload as { userId: unknown }).userId;\n    if (typeof payloadUserId !== \"string\") return null;\n    return payloadUserId;\n  };\n\n  const pubsubHandler: PubsubHandler = async (msg) => {\n    if (disposed) return;\n    if (msg.from === myPeerId) return;\n    const payload = await parsePayload(msg.data);\n    if (payload === undefined) return;\n    const payloadUserId = getUserIdFromPayload(payload);\n    let conn = connMap.getConn(msg.from);\n    if (!conn) {\n      if (payloadUserId) {\n        conn = initConnection(msg.from, payloadUserId);\n      } else {\n        console.warn(\"cannot initialize conn without user id\");\n      }\n    }\n    if (conn) {\n      await handlePayload(conn, payload);\n    }\n    const peerIndexList = connMap.getPeerIndexList();\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (disposed) return;\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    if (disposed) return;\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.sendPc.getSenders();\n      const sender = senders.find((s) => s.track === track);\n      if (sender && conn.sendPc.signalingState !== \"closed\") {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Connection) => {\n    const senders = conn.sendPc.getSenders();\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective && conn.sendPc.signalingState !== \"closed\") {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const dispose = async () => {\n    disposed = true;\n    await myIpfsPubSubRoom.leave();\n    await myIpfs.stop();\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n"],"sourceRoot":""}