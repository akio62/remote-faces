{"version":3,"sources":["utils/crypto.ts","utils/url.ts","utils/sleep.ts","utils/types.ts","network/common.ts","network/peerjsUtils.ts","network/trackUtils.ts","network/peerjsRoom.ts","network/room.ts","../../node_modules/peerjs/dist sync","components/ErrorFallback.tsx","components/SuspenseFallback.tsx","components/SingleRoomEntrance.tsx","components/GitHubCorner.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["secureRandomId","len","buf","window","crypto","getRandomValues","Uint8Array","arr","Array","from","hex","map","b","toString","padStart","join","rand4","Uint16Array","generateCryptoKey","a","subtle","generateKey","name","length","key","exportKey","importCryptoKey","usages","size","i","parseInt","slice","importKey","cryptoKey","encrypt","data","encoder","TextEncoder","iv","encode","encrypted","byteLength","set","decrypt","decrypted","decoder","TextDecoder","decode","copyHashFromLink","link","srcHash","URL","hash","srcSearchParams","URLSearchParams","dstHash","location","dstSearchParams","forEach","value","e","extractRoomIdFromLink","get","getRoomIdFromUrl","setRoomIdToUrl","roomId","searchParams","getServerConfigFromUrl","server","url","secure","protocol","defaultPort","host","split","port","Number","path","pathname","sleep","ms","Promise","resolve","setTimeout","isObject","x","ROOM_ID_PREFIX_LEN","generatePeerId","peerIndex","getPeerIndexFromPeerId","peerId","getPeerIndexFromConn","conn","peer","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","onmute","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","guessSeed","id","createRoom","userId","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","myPeer","connMap","Map","addConn","close","mediaTypes","markConnected","connected","isConnected","setUserId","getUserId","setMediaTypes","getMediaTypes","hasConn","getConn","delConn","delete","getConnectedPeerIds","keys","filter","k","forEachConnectedConns","callback","values","forEachConnsAcceptingMedia","mediaType","includes","clearAll","console","log","clear","createConnectionMap","localStream","showConnectedStatus","peerIndexList","type","connectPeer","disconnected","connect","initConnection","broadcastData","peers","sendPayload","sendSDP","sdp","SDP","handlePayloadSDP","offer","peerConnection","setRemoteDescription","syncAllTracks","createAnswer","answer","setLocalDescription","info","Math","random","removeAllTracks","warn","handlePayloadUserId","payloadUserId","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","handlePayloadPeers","startsWith","isValidPeerId","handlePayloadData","connUserId","handlePayload","JSON","payload","parse","stringify","send","error","on","iceGatheringState","onicecandidate","scheduledNegotiation","createOffer","event","reInitMyPeer","waitSec","floor","initMyPeer","index","isSeed","Peer","debug","seedId","err","destroy","destroyed","reconnect","force","existsAllSeeds","oldPeer","trackMediaTypeMap","senders","getSenders","mTypes","getTracks","mType","sender","addTrack","removeTrack","some","transport","sendData","acceptMediaTypes","MediaStream","getReceivers","readyState","s","dispose","peerjsCreateRoom","webpackEmptyContext","req","Error","code","module","exports","ErrorFallback","React","memo","useState","setWaitSec","useEffect","reload","message","SuspenseFallback","className","Landing","lazy","SingleRoom","roomIdFromUrl","SingleRoomEntrance","setRoomId","linkShown","setLinkShown","linkText","setLinkText","onCreateNew","onClick","onChange","target","placeholder","disabled","GitHubCorner","fill","color","href","aria-label","rel","width","height","viewBox","style","position","top","border","right","aria-hidden","d","transformOrigin","ErrorBoundary","state","children","this","props","PureComponent","App","fallback","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b709f6fe.chunk.js","sourcesContent":["export const sha256 = async (text: string) => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(text);\n  const buf = await window.crypto.subtle.digest(\"SHA-256\", data);\n  const arr = Array.from(new Uint8Array(buf));\n  const hex = arr.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hex;\n};\n\nexport const secureRandomId = (len = 32) => {\n  const buf = window.crypto.getRandomValues(new Uint8Array(len));\n  const arr = Array.from(buf);\n  const hex = arr.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hex;\n};\n\nexport const rand4 = () => {\n  const rand = window.crypto.getRandomValues(new Uint16Array(1))[0];\n  return 1000 + (rand % 9000);\n};\n\nexport const generateCryptoKey = async () => {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 128 },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n  const buf = await window.crypto.subtle.exportKey(\"raw\", key);\n  const arr = Array.from(new Uint8Array(buf));\n  const hex = arr.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hex;\n};\n\nexport const importCryptoKey = async (\n  key: string,\n  usages: (\"encrypt\" | \"decrypt\")[]\n) => {\n  const size = key.length / 2;\n  const buf = new Uint8Array(size);\n  for (let i = 0; i < size; i += 1) {\n    buf[i] = parseInt(key.slice(i * 2, i * 2 + 2), 16);\n  }\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    buf,\n    { name: \"AES-GCM\", length: 128 },\n    true,\n    usages\n  );\n  return cryptoKey;\n};\n\nexport const encrypt = async (data: string, key: string) => {\n  const encoder = new TextEncoder();\n  const cryptoKey = await importCryptoKey(key, [\"encrypt\"]);\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encrypted = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv },\n    cryptoKey,\n    encoder.encode(data)\n  );\n  const buf = new Uint8Array(iv.length + encrypted.byteLength);\n  buf.set(iv);\n  buf.set(new Uint8Array(encrypted), iv.length);\n  return buf;\n};\n\nexport const decrypt = async (buf: ArrayBuffer, key: string) => {\n  const cryptoKey = await importCryptoKey(key, [\"decrypt\"]);\n  const decrypted = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: buf.slice(0, 12) },\n    cryptoKey,\n    buf.slice(12)\n  );\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = decoder.decode(new Uint8Array(decrypted));\n  return data;\n};\n","export const copyHashFromLink = (link: string) => {\n  try {\n    const srcHash = new URL(link).hash.slice(1);\n    const srcSearchParams = new URLSearchParams(srcHash);\n    const dstHash = window.location.hash.slice(1);\n    const dstSearchParams = new URLSearchParams(dstHash);\n    srcSearchParams.forEach((value, key) => {\n      dstSearchParams.set(key, value);\n    });\n    window.location.hash = dstSearchParams.toString();\n  } catch (e) {\n    // ignore\n  }\n};\n\nexport const extractRoomIdFromLink = (link: string) => {\n  try {\n    const hash = new URL(link).hash.slice(1);\n    const searchParams = new URLSearchParams(hash);\n    return searchParams.get(\"roomId\");\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const getRoomIdFromUrl = () => {\n  const hash = window.location.hash.slice(1);\n  const searchParams = new URLSearchParams(hash);\n  return searchParams.get(\"roomId\");\n};\n\nexport const setRoomIdToUrl = (roomId: string) => {\n  const hash = window.location.hash.slice(1);\n  const searchParams = new URLSearchParams(hash);\n  searchParams.set(\"roomId\", roomId);\n  window.location.hash = searchParams.toString();\n};\n\nexport const getServerConfigFromUrl = () => {\n  const hash = window.location.hash.slice(1);\n  const searchParams = new URLSearchParams(hash);\n  const server = searchParams.get(\"server\");\n  try {\n    const url = new URL(server || \"\");\n    const secure = url.protocol === \"https:\";\n    const defaultPort = secure ? 443 : 80;\n    return {\n      host: url.host.split(\":\")[0],\n      port: url.port ? Number(url.port) : defaultPort,\n      path: url.pathname,\n      secure,\n    };\n  } catch (e) {\n    // ignore\n  }\n  return null;\n};\n","export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","export const isObject = (x: unknown): x is object =>\n  typeof x === \"object\" && x !== null;\n","export const ROOM_ID_PREFIX_LEN = 32;\n\nexport type NetworkStatus =\n  | { type: \"CONNECTING_SEED_PEERS\" }\n  | { type: \"NEW_CONNECTION\"; peerIndex: number }\n  | { type: \"CONNECTION_CLOSED\"; peerIndex: number }\n  | { type: \"INITIALIZING_PEER\"; peerIndex: number }\n  | { type: \"RECONNECTING\" }\n  | { type: \"SERVER_ERROR\" }\n  | { type: \"UNKNOWN_ERROR\"; err: Error }\n  | { type: \"CONNECTED_PEERS\"; peerIndexList: number[] };\n\ntype UpdateNetworkStatus = (status: NetworkStatus) => void;\n\nexport type PeerInfo = {\n  userId: string;\n  peerIndex: number;\n  mediaTypes: string[];\n};\ntype NotifyNewPeer = (peerIndex: number) => void;\ntype ReceiveData = (data: unknown, info: PeerInfo) => void;\ntype ReceiveTrack = (track: MediaStreamTrack, info: PeerInfo) => void;\n\nexport type CreateRoom = (\n  roomId: string,\n  userId: string,\n  updateNetworkStatus: UpdateNetworkStatus,\n  notifyNewPeer: NotifyNewPeer,\n  receiveData: ReceiveData,\n  receiveTrack: ReceiveTrack\n) => {\n  broadcastData: (data: unknown) => void;\n  sendData: (data: unknown, peerIndex: number) => void;\n  acceptMediaTypes: (mediaTypes: string[]) => void;\n  addTrack: (mediaType: string, track: MediaStreamTrack) => void;\n  removeTrack: (mediaType: string, track: MediaStreamTrack) => void;\n  dispose: () => void;\n};\n","import Peer from \"peerjs\";\n\nimport { ROOM_ID_PREFIX_LEN } from \"./common\";\n\nexport const isValidPeerId = (\n  roomId: string,\n  peerId: unknown\n): peerId is string =>\n  typeof peerId === \"string\" &&\n  peerId.startsWith(`${roomId.slice(0, ROOM_ID_PREFIX_LEN)} `);\n\nexport const generatePeerId = (roomId: string, peerIndex: number) =>\n  `${roomId.slice(0, ROOM_ID_PREFIX_LEN)} ${peerIndex}`;\n\nexport const getPeerIndexFromPeerId = (peerId: string) =>\n  Number(peerId.split(\" \")[1]);\n\nexport const getPeerIndexFromConn = (conn: Peer.DataConnection) =>\n  getPeerIndexFromPeerId(conn.peer);\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Peer.DataConnection;\n    connected?: boolean;\n    userId?: string;\n    mediaTypes: string[];\n  };\n  const map = new Map<string, Value>();\n\n  const addConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.conn.close();\n    }\n    map.set(conn.peer, { conn, mediaTypes: [] });\n  };\n\n  const markConnected = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.connected = true;\n    }\n  };\n\n  const isConnected = (peerId: string) => {\n    const value = map.get(peerId);\n    return (value && value.connected) || false;\n  };\n\n  const setUserId = (conn: Peer.DataConnection, userId: string) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.userId = userId;\n    }\n  };\n\n  const getUserId = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return value && value.userId;\n  };\n\n  const setMediaTypes = (conn: Peer.DataConnection, mediaTypes: string[]) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.mediaTypes = mediaTypes;\n    }\n  };\n\n  const getMediaTypes = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return (value && value.mediaTypes) || [];\n  };\n\n  const hasConn = (peerId: string) => map.has(peerId);\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const delConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n    }\n  };\n\n  const getConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => map.get(k)?.connected);\n\n  const forEachConnectedConns = (\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (\n        value.connected &&\n        value.mediaTypes &&\n        value.mediaTypes.includes(mediaType)\n      ) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const clearAll = () => {\n    if (map.size) {\n      console.log(\"connectionMap garbage:\", map);\n    }\n    map.clear();\n  };\n\n  return {\n    addConn,\n    markConnected,\n    isConnected,\n    setUserId,\n    getUserId,\n    setMediaTypes,\n    getMediaTypes,\n    hasConn,\n    getConn,\n    delConn,\n    getConnectedPeerIds,\n    forEachConnectedConns,\n    forEachConnsAcceptingMedia,\n    clearAll,\n  };\n};\n","import { sleep } from \"../utils/sleep\";\n\nconst setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = async () => {\n    await sleep(5000);\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    }\n  };\n  track.addEventListener(\"mute\", onmute);\n  return track;\n};\n","import Peer from \"peerjs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport { rand4, encrypt, decrypt } from \"../utils/crypto\";\nimport { getServerConfigFromUrl } from \"../utils/url\";\nimport { isObject } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport {\n  isValidPeerId,\n  generatePeerId,\n  getPeerIndexFromPeerId,\n  getPeerIndexFromConn,\n  createConnectionMap,\n} from \"./peerjsUtils\";\nimport { setupTrackStopOnLongMute } from \"./trackUtils\";\n\nconst MIN_SEED_PEER_INDEX = 10; // config\nconst MAX_SEED_PEER_INDEX = 14; // config\nconst guessSeed = (id: string) => {\n  const peerIndex = getPeerIndexFromPeerId(id);\n  return MIN_SEED_PEER_INDEX <= peerIndex && peerIndex <= MAX_SEED_PEER_INDEX;\n};\n\nexport const createRoom: CreateRoom = (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  let myPeer: Peer | null = null;\n  const connMap = createConnectionMap();\n  let mediaTypes: string[] = [];\n  let localStream: MediaStream | null = null;\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap\n      .getConnectedPeerIds()\n      .map(getPeerIndexFromPeerId);\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n  };\n\n  const connectPeer = (id: string) => {\n    if (disposed) return;\n    if (!myPeer || myPeer.id === id || myPeer.disconnected) return;\n    if (connMap.hasConn(id)) return;\n    console.log(\"connectPeer\", id);\n    const conn = myPeer.connect(id);\n    initConnection(conn);\n  };\n\n  const broadcastData = (data: unknown) => {\n    if (disposed) return;\n    const peers = connMap.getConnectedPeerIds();\n    connMap.forEachConnectedConns((conn) => {\n      sendPayload(conn, { userId, data, peers, mediaTypes });\n    });\n  };\n\n  const sendData = (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.getConn(generatePeerId(roomId, peerIndex));\n    if (!conn) return;\n    const peers = connMap.getConnectedPeerIds();\n    sendPayload(conn, { userId, data, peers, mediaTypes });\n  };\n\n  const sendSDP = (conn: Peer.DataConnection, sdp: unknown) => {\n    sendPayload(conn, { SDP: sdp });\n  };\n\n  const handlePayloadSDP = async (conn: Peer.DataConnection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    if (isObject((sdp as { offer: unknown }).offer)) {\n      const { offer } = sdp as { offer: object };\n      try {\n        await conn.peerConnection.setRemoteDescription(offer as any);\n        syncAllTracks(conn);\n        const answer = await conn.peerConnection.createAnswer();\n        await conn.peerConnection.setLocalDescription(answer);\n        sendSDP(conn, { answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (isObject((sdp as { answer: unknown }).answer)) {\n      const { answer } = sdp as { answer: object };\n      try {\n        await conn.peerConnection.setRemoteDescription(answer as any);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n        await sleep(Math.random() * 30 * 1000);\n        removeAllTracks(conn);\n        syncAllTracks(conn);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const handlePayloadUserId = (\n    conn: Peer.DataConnection,\n    payloadUserId: unknown\n  ) => {\n    if (typeof payloadUserId === \"string\") {\n      connMap.setUserId(conn, payloadUserId as string);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Peer.DataConnection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadPeers = (peers: unknown) => {\n    if (Array.isArray(peers)) {\n      peers.forEach((peer) => {\n        if (isValidPeerId(roomId, peer)) {\n          connectPeer(peer);\n        }\n      });\n    }\n  };\n\n  const handlePayloadData = (conn: Peer.DataConnection, data: unknown) => {\n    const connUserId = connMap.getUserId(conn);\n    if (connUserId) {\n      const info: PeerInfo = {\n        userId: connUserId,\n        peerIndex: getPeerIndexFromConn(conn),\n        mediaTypes: connMap.getMediaTypes(conn),\n      };\n      try {\n        receiveData(data, info);\n      } catch (e) {\n        console.warn(\"receiveData\", e);\n      }\n    }\n  };\n\n  const handlePayload = async (\n    conn: Peer.DataConnection,\n    encrypted: ArrayBuffer\n  ) => {\n    if (disposed) return;\n    try {\n      const payload = JSON.parse(\n        await decrypt(encrypted, roomId.slice(ROOM_ID_PREFIX_LEN))\n      );\n      console.log(\"decrypted payload\", conn.peer, payload);\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadUserId(conn, (payload as { userId?: unknown }).userId);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadPeers((payload as { peers?: unknown }).peers);\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, encrypted);\n    }\n  };\n\n  const sendPayload = async (conn: Peer.DataConnection, payload: unknown) => {\n    try {\n      const encrypted = await encrypt(\n        JSON.stringify(payload),\n        roomId.slice(ROOM_ID_PREFIX_LEN)\n      );\n      conn.send(encrypted);\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const initConnection = (conn: Peer.DataConnection) => {\n    if (connMap.isConnected(conn.peer)) {\n      conn.close();\n      return;\n    }\n    connMap.addConn(conn);\n    conn.on(\"open\", () => {\n      connMap.markConnected(conn);\n      console.log(\"dataConnection open\", conn);\n      showConnectedStatus();\n      const peerIndex = getPeerIndexFromPeerId(conn.peer);\n      notifyNewPeer(peerIndex);\n    });\n    conn.on(\"data\", (buf: ArrayBuffer) => handlePayload(conn, buf));\n    conn.peerConnection.addEventListener(\"icegatheringstatechange\", () => {\n      const pc = conn.peerConnection;\n      if (pc.iceGatheringState === \"complete\") {\n        pc.onicecandidate = () => undefined;\n      }\n    });\n    const scheduledNegotiation = new WeakMap<Peer.DataConnection, boolean>();\n    conn.peerConnection.addEventListener(\"negotiationneeded\", async () => {\n      if (scheduledNegotiation.has(conn)) return;\n      scheduledNegotiation.set(conn, true);\n      await sleep(2000);\n      scheduledNegotiation.delete(conn);\n      if (!connMap.isConnected(conn.peer)) return;\n      const offer = await conn.peerConnection.createOffer();\n      await conn.peerConnection.setLocalDescription(offer);\n      sendSDP(conn, { offer });\n    });\n    conn.peerConnection.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      const connUserId = connMap.getUserId(conn);\n      if (connUserId) {\n        const info: PeerInfo = {\n          userId: connUserId,\n          peerIndex: getPeerIndexFromPeerId(conn.peer),\n          mediaTypes: connMap.getMediaTypes(conn),\n        };\n        receiveTrack(\n          setupTrackStopOnLongMute(event.track, conn.peerConnection),\n          info\n        );\n      }\n    });\n    conn.on(\"close\", () => {\n      connMap.delConn(conn);\n      console.log(\"dataConnection closed\", conn);\n      updateNetworkStatus({\n        type: \"CONNECTION_CLOSED\",\n        peerIndex: getPeerIndexFromConn(conn),\n      });\n      showConnectedStatus();\n      if (connMap.getConnectedPeerIds().length === 0) {\n        reInitMyPeer(true);\n      } else if (\n        guessSeed(conn.peer) &&\n        myPeer &&\n        !myPeer.disconnected &&\n        !guessSeed(myPeer.id)\n      ) {\n        const waitSec = 30 + Math.floor(Math.random() * 60);\n        console.log(\n          `Disconnected seed peer: ${getPeerIndexFromPeerId(\n            conn.peer\n          )}, reinit in ${waitSec}sec...`\n        );\n        setTimeout(reInitMyPeer, waitSec * 1000);\n      }\n    });\n  };\n\n  const initMyPeer = (index = MIN_SEED_PEER_INDEX) => {\n    if (disposed) return;\n    if (myPeer) return;\n    connMap.clearAll();\n    const isSeed = MIN_SEED_PEER_INDEX <= index && index <= MAX_SEED_PEER_INDEX;\n    const peerIndex = isSeed ? index : rand4();\n    updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex });\n    const id = generatePeerId(roomId, peerIndex);\n    console.log(\"initMyPeer start\", index, id);\n    const peer = new Peer(id, {\n      ...(getServerConfigFromUrl() || {}),\n      debug: 3,\n    });\n    myPeer = peer;\n    peer.on(\"open\", () => {\n      myPeer = peer;\n      if (process.env.NODE_ENV !== \"production\") {\n        (window as any).myPeer = myPeer;\n      }\n      updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n      for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n        const seedId = generatePeerId(roomId, i);\n        connectPeer(seedId);\n      }\n    });\n    peer.on(\"error\", (err) => {\n      if (err.type === \"unavailable-id\") {\n        myPeer = null;\n        peer.destroy();\n        initMyPeer(index + 1);\n      } else if (err.type === \"peer-unavailable\") {\n        // ignore\n      } else if (err.type === \"disconnected\") {\n        console.log(\"initMyPeer disconnected error\", index, err);\n        peer.destroy();\n      } else if (err.type === \"network\") {\n        console.log(\"initMyPeer network error\", index, err);\n      } else if (err.type === \"server-error\") {\n        console.log(\"initMyPeer server error\", index, err);\n        updateNetworkStatus({ type: \"SERVER_ERROR\" });\n      } else {\n        console.error(\"initMyPeer unknown error\", index, err.type, err);\n        updateNetworkStatus({ type: \"UNKNOWN_ERROR\", err });\n      }\n    });\n    peer.on(\"connection\", (conn) => {\n      if (myPeer !== peer) {\n        conn.close();\n        return;\n      }\n      console.log(\"new connection received\", conn);\n      updateNetworkStatus({\n        type: \"NEW_CONNECTION\",\n        peerIndex: getPeerIndexFromConn(conn),\n      });\n      initConnection(conn);\n    });\n    peer.on(\"disconnected\", () => {\n      console.log(\"initMyPeer disconnected\", index);\n      setTimeout(() => {\n        if (myPeer === peer && !peer.destroyed) {\n          console.log(\"initMyPeer reconnecting\", index);\n          updateNetworkStatus({ type: \"RECONNECTING\" });\n          peer.reconnect();\n        }\n      }, 5 * 1000);\n    });\n    peer.on(\"close\", () => {\n      if (myPeer === peer) {\n        console.log(\"initMyPeer closed, re-initializing\", index);\n        myPeer = null;\n        setTimeout(initMyPeer, 20 * 1000);\n      } else {\n        console.log(\"initMyPeer closed, ignoring\", index);\n      }\n    });\n  };\n  initMyPeer();\n\n  const reInitMyPeer = (force?: boolean) => {\n    if (!myPeer) return;\n    if (myPeer.disconnected) return; // should already be handled\n    if (!force) {\n      if (guessSeed(myPeer.id)) return;\n      let existsAllSeeds = true;\n      for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n        const id = generatePeerId(roomId, i);\n        if (!connMap.isConnected(id)) {\n          existsAllSeeds = false;\n          break;\n        }\n      }\n      if (existsAllSeeds) {\n        showConnectedStatus();\n        return;\n      }\n    }\n    const oldPeer = myPeer;\n    myPeer = null;\n    oldPeer.destroy();\n    initMyPeer();\n  };\n\n  const acceptMediaTypes = (mTypes: string[]) => {\n    mediaTypes = mTypes;\n    if (mediaTypes.length) {\n      if (!localStream) {\n        localStream = new MediaStream();\n        connMap.forEachConnectedConns((conn) => {\n          const connUserId = connMap.getUserId(conn);\n          if (connUserId) {\n            const info: PeerInfo = {\n              userId: connUserId,\n              peerIndex: getPeerIndexFromPeerId(conn.peer),\n              mediaTypes: connMap.getMediaTypes(conn),\n            };\n            conn.peerConnection.getReceivers().forEach((receiver) => {\n              if (receiver.track.readyState !== \"live\") return;\n              receiveTrack(\n                setupTrackStopOnLongMute(receiver.track, conn.peerConnection),\n                info\n              );\n            });\n          }\n        });\n      }\n    } else {\n      localStream = null;\n    }\n    broadcastData(null);\n  };\n\n  const trackMediaTypeMap = new WeakMap<MediaStreamTrack, string>();\n\n  const addTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (!localStream) return;\n    trackMediaTypeMap.set(track, mediaType);\n    localStream.addTrack(track);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        if (!localStream) return;\n        conn.peerConnection.addTrack(track, localStream);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (localStream) {\n      localStream.removeTrack(track);\n    }\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.peerConnection.getSenders();\n      const sender = senders.find((s) => s.track === track);\n      if (sender) {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection.getSenders();\n    const mTypes = connMap.getMediaTypes(conn);\n    if (localStream) {\n      localStream.getTracks().forEach((track) => {\n        const mType = trackMediaTypeMap.get(track);\n        if (\n          localStream &&\n          mType &&\n          mTypes.includes(mType) &&\n          senders.every((sender) => sender.track !== track)\n        ) {\n          conn.peerConnection.addTrack(track, localStream);\n        }\n      });\n    }\n    senders.forEach((sender) => {\n      if (sender.track) {\n        const mType = trackMediaTypeMap.get(sender.track);\n        if (!mType || !mTypes.includes(mType)) {\n          conn.peerConnection.removeTrack(sender);\n        }\n      }\n    });\n    if (senders.some((sender) => sender.track && !sender.transport)) {\n      conn.peerConnection.dispatchEvent(new Event(\"negotiationneeded\"));\n    }\n  };\n\n  const removeAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection.getSenders();\n    senders.forEach((sender) => {\n      if (sender.track) {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const dispose = () => {\n    disposed = true;\n    if (myPeer) {\n      myPeer.destroy();\n    }\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","import type { CreateRoom } from \"./common\";\nimport { createRoom as peerjsCreateRoom } from \"./peerjsRoom\";\n\nexport type { NetworkStatus, PeerInfo } from \"./common\";\nexport { ROOM_ID_PREFIX_LEN } from \"./common\";\n\nexport const createRoom: CreateRoom = (...args) => {\n  return peerjsCreateRoom(...args);\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 31;","import React, { useEffect, useState } from \"react\";\n\nexport const ErrorFallback = React.memo<{\n  err: Error;\n}>(({ err }) => {\n  const [waitSec, setWaitSec] = useState(30);\n\n  useEffect(() => {\n    if (waitSec > 0) {\n      setTimeout(() => {\n        setWaitSec(waitSec - 1);\n      }, 1000);\n    } else {\n      window.location.reload();\n    }\n  });\n\n  return (\n    <div>\n      <h1>Unrecoverable error occurred.</h1>\n      {err && (\n        <h6>\n          {err.name}: {err.message}\n        </h6>\n      )}\n      <p>Will auto reload in {waitSec} sec.</p>\n    </div>\n  );\n});\n","import React from \"react\";\n\nimport \"./SuspenseFallback.css\";\n\nexport const SuspenseFallback = React.memo(() => (\n  <div className=\"Loading-container\">\n    <div>Loading...</div>\n  </div>\n));\n","import React, { useState } from \"react\";\n\nimport \"./SingleRoomEntrance.css\";\nimport { secureRandomId, generateCryptoKey } from \"../utils/crypto\";\nimport { ROOM_ID_PREFIX_LEN } from \"../network/room\";\nimport {\n  getRoomIdFromUrl,\n  extractRoomIdFromLink,\n  copyHashFromLink,\n} from \"../utils/url\";\n\nconst Landing = React.lazy(() => import(\"./Landing\"));\nconst SingleRoom = React.lazy(() => import(\"./SingleRoom\"));\n\nconst roomIdFromUrl = getRoomIdFromUrl();\nconst userId = secureRandomId();\n\nexport const SingleRoomEntrance = React.memo(() => {\n  const [roomId, setRoomId] = useState<string | null>(roomIdFromUrl);\n  const [linkShown, setLinkShown] = useState(false);\n  const [linkText, setLinkText] = useState(\"\");\n\n  const onCreateNew = async () => {\n    setRoomId(\n      secureRandomId(ROOM_ID_PREFIX_LEN / 2) + (await generateCryptoKey())\n    );\n  };\n\n  const onEnter = () => {\n    copyHashFromLink(linkText);\n    setRoomId(extractRoomIdFromLink(linkText));\n  };\n\n  if (roomId) {\n    return <SingleRoom roomId={roomId} userId={userId} />;\n  }\n\n  return (\n    <div className=\"SingleRoomEntrance-container\">\n      <Landing>\n        <div className=\"SingleRoomEntrance-input\">\n          {!linkShown && (\n            <>\n              <div>\n                <button type=\"button\" onClick={onCreateNew}>\n                  Create a new room\n                </button>\n              </div>\n              <div className=\"SingleRoomEntrance-or\">OR</div>\n              <div>\n                <button type=\"button\" onClick={() => setLinkShown(true)}>\n                  Enter an existing room link\n                </button>\n              </div>\n            </>\n          )}\n          {linkShown && (\n            <div>\n              <input\n                value={linkText}\n                onChange={(e) => setLinkText(e.target.value)}\n                placeholder=\"Enter room link...\"\n              />\n              <button\n                type=\"button\"\n                onClick={onEnter}\n                disabled={!extractRoomIdFromLink(linkText)}\n              >\n                Enter room\n              </button>\n              <button type=\"button\" onClick={() => setLinkShown(false)}>\n                Cancel\n              </button>\n            </div>\n          )}\n        </div>\n      </Landing>\n    </div>\n  );\n});\n","import React from \"react\";\n\nimport \"./GitHubCorner.css\";\n\n// http://tholman.com/github-corners/\nexport const GitHubCorner = React.memo<{\n  size?: number;\n  fill?: string;\n  color?: string;\n}>(({ size, fill, color }) => (\n  <a\n    href=\"https://github.com/dai-shi/remote-faces\"\n    className=\"GitHubCorner-container\"\n    aria-label=\"View source on GitHub\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <svg\n      width={size || 80}\n      height={size || 80}\n      viewBox=\"0 0 250 250\"\n      style={{\n        fill: fill || \"#151513\",\n        color: color || \"#fff\",\n        position: \"absolute\",\n        top: 0,\n        border: 0,\n        right: 0,\n      }}\n      aria-hidden=\"true\"\n    >\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n        fill=\"currentColor\"\n        style={{ transformOrigin: \"130px 106px\" }}\n        className=\"GitHubCorner-octo-arm\"\n      />\n      <path\n        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n        fill=\"currentColor\"\n        className=\"GitHubCorner-octo-body\"\n      />\n    </svg>\n  </a>\n));\n","import React, { Suspense } from \"react\";\n\nimport \"./App.css\";\nimport { ErrorFallback } from \"./ErrorFallback\";\nimport { SuspenseFallback } from \"./SuspenseFallback\";\nimport { SingleRoomEntrance } from \"./SingleRoomEntrance\";\nimport { GitHubCorner } from \"./GitHubCorner\";\n\nclass ErrorBoundary extends React.PureComponent {\n  state: { err?: Error } = {};\n\n  static getDerivedStateFromError(err: Error) {\n    return { err };\n  }\n\n  render() {\n    const { children } = this.props;\n    const { err } = this.state;\n    if (err) return <ErrorFallback err={err} />;\n    return children;\n  }\n}\n\nexport const App = React.memo(() => (\n  <div className=\"App\">\n    <ErrorBoundary>\n      <Suspense fallback={<SuspenseFallback />}>\n        <SingleRoomEntrance />\n        <GitHubCorner size={40} fill=\"gray\" />\n      </Suspense>\n    </ErrorBoundary>\n  </div>\n));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}