{"version":3,"sources":["utils/types.ts","utils/sleep.ts","network/trackUtils.ts","network/peerjsUtils.ts","network/peerjsRoom.ts","../../node_modules/peerjs/dist sync"],"names":["isObject","x","hasStringProp","prop","hasObjectProp","sleep","ms","Promise","resolve","setTimeout","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","timeout","readyState","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","a","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","videoTrackToImageConverter","kind","Error","canvas","document","createElement","ctx","getContext","imageCapture","ImageCapture","getImage","grabFrame","bitmap","width","height","drawImage","toDataURL","console","log","createImage","src","img","Image","onload","onerror","imageToVideoTrackConverter","captureStream","getVideoTracks","videoTrack","setImage","dataURL","isValidPeerId","roomId","peerId","startsWith","slice","ROOM_ID_PREFIX_LEN","generatePeerId","peerIndex","getPeerIndexFromPeerId","Number","split","getPeerIndexFromConn","conn","peer","createConnectionMap","map","Map","registerRemoteMediaTypeFromSDP","msid2mediaType","sdpLines","mid","value","get","forEach","line","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","createdAt","Date","now","markConnected","connected","isConnected","setUserId","userId","getUserId","hasEffectiveConn","getConn","delConn","delete","getConnectedPeerIds","Array","from","keys","filter","k","forEachConnectedConns","callback","values","forEachConnsAcceptingMedia","includes","clearAll","size","clear","getRemoteMediaType","registerRemoteMediaType","sdp","MIN_SEED_PEER_INDEX","MAX_SEED_PEER_INDEX","guessSeed","id","createRoom","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","connMap","importCryptoKey","cryptoKey","initMyPeer","index","rand4","type","Peer","getPeerJsConfigFromUrl","on","i","seedId","connectPeer","err","destroy","then","error","initConnection","destroyed","reconnect","disconnected","myPeer","showConnectedStatus","peerIndexList","connect","broadcastData","data","peers","sendPayload","sendData","sendSDP","getMsid2MediaType","SDP","handlePayloadSDP","peerConnection","syncAllTracks","info","Math","random","removeAllTracks","warn","handlePayloadUserId","payloadUserId","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","handlePayloadPeers","handlePayloadData","connUserId","e","handlePayload","encrypted","JSON","decryptString","payload","parse","encryptString","stringify","send","open","buf","iceGatheringState","onicecandidate","negotiationScheduled","signalingState","mType","reInitMyPeer","waitSec","floor","force","existsAllSeeds","acceptMediaTypes","mTypes","transceivers","getReceivers","mediaTypeMap","stream","MediaStream","name","removeTrack","item","sender","getSenders","s","senders","some","transport","dispose","webpackEmptyContext","req","code","module","exports"],"mappings":"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","file":"static/js/12.97d6778c.chunk.js","sourcesContent":["export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<\n  F extends (...args: any) => any\n> = ReturnType<F> extends Promise<infer T> ? T : never;\n","export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","const setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = (timeout = 1000) => {\n    if (track.readyState === \"ended\") return;\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    } else if (timeout < 64000) {\n      setTimeout(() => {\n        onmute(timeout * 2);\n      }, timeout);\n    }\n  };\n  track.addEventListener(\"mute\", () => onmute());\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n\nexport const videoTrackToImageConverter = async (track: MediaStreamTrack) => {\n  if (track.kind !== \"video\") {\n    throw new Error(\"track kind is not video\");\n  }\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const imageCapture = new ImageCapture(track);\n  const getImage = async () => {\n    try {\n      const bitmap = await imageCapture.grabFrame();\n      canvas.width = bitmap.width;\n      canvas.height = bitmap.height;\n      ctx.drawImage(bitmap, 0, 0);\n      return canvas.toDataURL(\"image/jpeg\");\n    } catch (e) {\n      console.log(\"failed to grab frame from viedeo track\", e);\n      return null;\n    }\n  };\n  return { getImage };\n};\n\nconst createImage = (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = src;\n  });\n\nexport const imageToVideoTrackConverter = () => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const canvasStream = (canvas as any).captureStream() as MediaStream;\n  const [videoTrack] = canvasStream.getVideoTracks();\n  const setImage = async (dataURL: string) => {\n    const img = await createImage(dataURL);\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n  };\n  return { videoTrack, setImage };\n};\n","import Peer from \"peerjs\";\n\nimport { ROOM_ID_PREFIX_LEN } from \"./common\";\nimport { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nexport const isValidPeerId = (\n  roomId: string,\n  peerId: unknown\n): peerId is string =>\n  typeof peerId === \"string\" &&\n  peerId.startsWith(`${roomId.slice(0, ROOM_ID_PREFIX_LEN)} `);\n\nexport const generatePeerId = (roomId: string, peerIndex: number) =>\n  `${roomId.slice(0, ROOM_ID_PREFIX_LEN)} ${peerIndex}`;\n\nexport const getPeerIndexFromPeerId = (peerId: string) =>\n  Number(peerId.split(\" \")[1]);\n\nexport const getPeerIndexFromConn = (conn: Peer.DataConnection) =>\n  getPeerIndexFromPeerId(conn.peer);\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Peer.DataConnection;\n    createdAt: number;\n    connected?: boolean;\n    userId?: string;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (\n    conn: Peer.DataConnection,\n    mediaTypes: string[]\n  ) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.conn.close();\n    }\n    map.set(conn.peer, {\n      conn,\n      createdAt: Date.now(),\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n  };\n\n  const markConnected = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.connected = true;\n    }\n  };\n\n  const isConnected = (peerId: string) => {\n    const value = map.get(peerId);\n    return (value && value.connected) || false;\n  };\n\n  const setUserId = (conn: Peer.DataConnection, userId: string) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.userId = userId;\n    }\n  };\n\n  const getUserId = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return value && value.userId;\n  };\n\n  const hasEffectiveConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return false;\n    if (value.connected) return true;\n    return value.createdAt > Date.now() - 60 * 1000;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const delConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n    }\n  };\n\n  const getConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => map.get(k)?.connected);\n\n  const forEachConnectedConns = (\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected && value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const clearAll = () => {\n    if (map.size) {\n      console.log(\"connectionMap garbage:\", map);\n    }\n    map.clear();\n  };\n\n  const getRemoteMediaType = (conn: Peer.DataConnection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Peer.DataConnection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Peer.DataConnection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    markConnected,\n    isConnected,\n    setUserId,\n    getUserId,\n    hasEffectiveConn,\n    getConn,\n    delConn,\n    getConnectedPeerIds,\n    forEachConnectedConns,\n    forEachConnsAcceptingMedia,\n    clearAll,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Peer from \"peerjs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  rand4,\n  importCryptoKey,\n  encryptString,\n  decryptString,\n} from \"../utils/crypto\";\nimport { getPeerJsConfigFromUrl } from \"../utils/url\";\nimport { isObject, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport {\n  isValidPeerId,\n  generatePeerId,\n  getPeerIndexFromPeerId,\n  getPeerIndexFromConn,\n  createConnectionMap,\n} from \"./peerjsUtils\";\nimport { setupTrackStopOnLongMute } from \"./trackUtils\";\n\nconst MIN_SEED_PEER_INDEX = 10; // config\nconst MAX_SEED_PEER_INDEX = 14; // config\nconst guessSeed = (id: string) => {\n  const peerIndex = getPeerIndexFromPeerId(id);\n  return MIN_SEED_PEER_INDEX <= peerIndex && peerIndex <= MAX_SEED_PEER_INDEX;\n};\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  const initMyPeer = (index = MIN_SEED_PEER_INDEX): Promise<Peer> =>\n    new Promise((resolve, reject) => {\n      if (disposed) {\n        reject(new Error(\"already disposed\"));\n        return;\n      }\n      connMap.clearAll();\n      const isSeed =\n        MIN_SEED_PEER_INDEX <= index && index <= MAX_SEED_PEER_INDEX;\n      const peerIndex = isSeed ? index : rand4();\n      updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex });\n      const id = generatePeerId(roomId, peerIndex);\n      console.log(\"initMyPeer start\", index, id);\n      const peer = new Peer(id, getPeerJsConfigFromUrl());\n      peer.on(\"open\", () => {\n        resolve(peer);\n        if (process.env.NODE_ENV !== \"production\") {\n          (window as any).myPeer = peer;\n        }\n        updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n        setTimeout(() => {\n          for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n            const seedId = generatePeerId(roomId, i);\n            connectPeer(seedId);\n          }\n        }, 10);\n      });\n      peer.on(\"error\", (err) => {\n        if (err.type === \"unavailable-id\") {\n          peer.destroy();\n          initMyPeer(index + 1).then(resolve, reject);\n        } else if (err.type === \"peer-unavailable\") {\n          // ignore\n        } else if (err.type === \"disconnected\") {\n          console.log(\"initMyPeer disconnected error\", index, err);\n        } else if (err.type === \"network\") {\n          console.log(\"initMyPeer network error\", index, err);\n        } else if (err.type === \"server-error\") {\n          console.log(\"initMyPeer server error\", index, err);\n          updateNetworkStatus({ type: \"SERVER_ERROR\" });\n        } else {\n          console.error(\"initMyPeer unknown error\", index, err.type, err);\n          updateNetworkStatus({ type: \"UNKNOWN_ERROR\", err });\n        }\n      });\n      peer.on(\"connection\", (conn) => {\n        console.log(\"new connection received\", conn);\n        updateNetworkStatus({\n          type: \"NEW_CONNECTION\",\n          peerIndex: getPeerIndexFromConn(conn),\n        });\n        initConnection(conn);\n      });\n      peer.on(\"disconnected\", () => {\n        console.log(\"initMyPeer disconnected\", index);\n        setTimeout(() => {\n          if (!peer.destroyed) {\n            console.log(\"initMyPeer reconnecting\", index);\n            updateNetworkStatus({ type: \"RECONNECTING\" });\n            peer.reconnect();\n            setTimeout(async () => {\n              if (peer.disconnected) {\n                console.log(\"reconnect failed, re-initializing\", index);\n                peer.destroy();\n                myPeer = await initMyPeer();\n              }\n            }, 60 * 1000);\n          }\n        }, 5 * 1000);\n      });\n    });\n  let myPeer = await initMyPeer();\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap\n      .getConnectedPeerIds()\n      .map(getPeerIndexFromPeerId);\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n    console.log(\"myPeer index\", getPeerIndexFromPeerId(myPeer.id || \"\"));\n  };\n\n  const connectPeer = (id: string) => {\n    if (disposed) return;\n    if (myPeer.id === id || myPeer.disconnected) return;\n    if (connMap.hasEffectiveConn(id)) return;\n    console.log(\"connectPeer\", id);\n    const conn = myPeer.connect(id);\n    initConnection(conn);\n  };\n\n  const broadcastData = (data: unknown) => {\n    if (disposed) return;\n    const peers = connMap.getConnectedPeerIds();\n    connMap.forEachConnectedConns((conn) => {\n      sendPayload(conn, { userId, data, peers, mediaTypes });\n    });\n  };\n\n  const sendData = (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.getConn(generatePeerId(roomId, peerIndex));\n    if (!conn) return;\n    const peers = connMap.getConnectedPeerIds();\n    sendPayload(conn, { userId, data, peers, mediaTypes });\n  };\n\n  const sendSDP = (\n    conn: Peer.DataConnection,\n    sdp: { offer: unknown } | { answer: unknown }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    sendPayload(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Peer.DataConnection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    connMap.registerRemoteMediaType(conn, sdp);\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(sdp.offer);\n        syncAllTracks(conn);\n        const answer = await conn.peerConnection.createAnswer();\n        await conn.peerConnection.setLocalDescription(answer);\n        sendSDP(conn, { answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n        await sleep(Math.random() * 30 * 1000);\n        removeAllTracks(conn);\n        syncAllTracks(conn);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const handlePayloadUserId = (\n    conn: Peer.DataConnection,\n    payloadUserId: unknown\n  ) => {\n    if (typeof payloadUserId === \"string\") {\n      connMap.setUserId(conn, payloadUserId);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Peer.DataConnection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadPeers = (peers: unknown) => {\n    if (Array.isArray(peers)) {\n      peers.forEach((peer) => {\n        if (isValidPeerId(roomId, peer)) {\n          connectPeer(peer);\n        }\n      });\n    }\n  };\n\n  const handlePayloadData = (conn: Peer.DataConnection, data: unknown) => {\n    const connUserId = connMap.getUserId(conn);\n    if (connUserId) {\n      const info: PeerInfo = {\n        userId: connUserId,\n        peerIndex: getPeerIndexFromConn(conn),\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      try {\n        receiveData(data, info);\n      } catch (e) {\n        console.warn(\"receiveData\", e);\n      }\n    }\n  };\n\n  const handlePayload = async (\n    conn: Peer.DataConnection,\n    encrypted: ArrayBuffer\n  ) => {\n    if (disposed) return;\n    try {\n      const payload = JSON.parse(await decryptString(encrypted, cryptoKey));\n      // console.log(\"decrypted payload\", conn.peer, payload);\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadUserId(conn, (payload as { userId?: unknown }).userId);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadPeers((payload as { peers?: unknown }).peers);\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, encrypted);\n    }\n  };\n\n  const sendPayload = async (conn: Peer.DataConnection, payload: unknown) => {\n    try {\n      const encrypted = await encryptString(JSON.stringify(payload), cryptoKey);\n      conn.send(encrypted);\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const initConnection = (conn: Peer.DataConnection) => {\n    if (connMap.isConnected(conn.peer)) {\n      console.info(\"dataConnection already in map, overriding\", conn.peer);\n    }\n    connMap.addConn(conn);\n    setTimeout(() => {\n      if (!connMap.isConnected(conn.peer)) {\n        console.log(\n          \"dataConnection is still not connected, possibly a bug\",\n          conn.peer,\n          conn.open\n        );\n      }\n    }, 30 * 1000);\n    if (conn.open) {\n      console.warn(\n        \"dataConnection is already open before adding handler, this can cause a bug\"\n      );\n    }\n    conn.on(\"open\", () => {\n      connMap.markConnected(conn);\n      console.log(\"dataConnection open\", conn);\n      showConnectedStatus();\n      const peerIndex = getPeerIndexFromPeerId(conn.peer);\n      notifyNewPeer(peerIndex);\n    });\n    conn.on(\"data\", (buf: ArrayBuffer) => handlePayload(conn, buf));\n    conn.peerConnection.addEventListener(\"icegatheringstatechange\", () => {\n      const pc = conn.peerConnection;\n      if (pc.iceGatheringState === \"complete\") {\n        pc.onicecandidate = () => undefined;\n      }\n    });\n    let negotiationScheduled = false;\n    conn.peerConnection.addEventListener(\"negotiationneeded\", async () => {\n      if (negotiationScheduled) return;\n      negotiationScheduled = true;\n      await sleep(5000);\n      negotiationScheduled = false;\n      if (!connMap.isConnected(conn.peer)) return;\n      if (!conn.peerConnection) return;\n      if (conn.peerConnection.signalingState === \"closed\") return;\n      const offer = await conn.peerConnection.createOffer();\n      await conn.peerConnection.setLocalDescription(offer);\n      sendSDP(conn, { offer });\n    });\n    conn.peerConnection.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      if (!connMap.isConnected(conn.peer)) {\n        console.warn(\"received track from non-connected peer, ignoring\");\n        return;\n      }\n      const { mid } = event.transceiver;\n      const mType = mid && connMap.getRemoteMediaType(conn, mid);\n      if (!mType) {\n        console.warn(\"failed to find media type from mid\");\n        return;\n      }\n      const connUserId = connMap.getUserId(conn);\n      if (connUserId) {\n        const info: PeerInfo = {\n          userId: connUserId,\n          peerIndex: getPeerIndexFromPeerId(conn.peer),\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        receiveTrack(\n          mType,\n          setupTrackStopOnLongMute(event.track, conn.peerConnection),\n          info\n        );\n      }\n    });\n    conn.on(\"close\", () => {\n      connMap.delConn(conn);\n      console.log(\"dataConnection closed\", conn);\n      updateNetworkStatus({\n        type: \"CONNECTION_CLOSED\",\n        peerIndex: getPeerIndexFromConn(conn),\n      });\n      showConnectedStatus();\n      if (connMap.getConnectedPeerIds().length === 0) {\n        reInitMyPeer(true);\n      } else if (\n        guessSeed(conn.peer) &&\n        !myPeer.disconnected &&\n        !guessSeed(myPeer.id)\n      ) {\n        const waitSec = 30 + Math.floor(Math.random() * 60);\n        console.log(\n          `Disconnected seed peer: ${getPeerIndexFromPeerId(\n            conn.peer\n          )}, reinit in ${waitSec}sec...`\n        );\n        setTimeout(reInitMyPeer, waitSec * 1000);\n      }\n    });\n  };\n\n  const reInitMyPeer = async (force?: boolean) => {\n    if (myPeer.disconnected) return; // should already be handled\n    if (!force) {\n      if (guessSeed(myPeer.id)) return;\n      let existsAllSeeds = true;\n      for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n        const id = generatePeerId(roomId, i);\n        if (!connMap.isConnected(id)) {\n          existsAllSeeds = false;\n          break;\n        }\n      }\n      if (existsAllSeeds) {\n        showConnectedStatus();\n        return;\n      }\n    }\n    myPeer.destroy();\n    myPeer = await initMyPeer();\n  };\n\n  const acceptMediaTypes = (mTypes: string[]) => {\n    if (disposed) return;\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConnectedConns((conn) => {\n        const connUserId = connMap.getUserId(conn);\n        if (connUserId) {\n          const info: PeerInfo = {\n            userId: connUserId,\n            peerIndex: getPeerIndexFromPeerId(conn.peer),\n            mediaTypes: connMap.getAcceptingMediaTypes(conn),\n          };\n          const transceivers = conn.peerConnection.getTransceivers();\n          conn.peerConnection.getReceivers().forEach((receiver) => {\n            const transceiver = transceivers.find(\n              (t) => t.receiver === receiver\n            );\n            const mid = transceiver?.mid;\n            const mType = mid && connMap.getRemoteMediaType(conn, mid);\n            if (!mType) {\n              console.warn(\"failed to find media type from mid\");\n              return;\n            }\n            if (\n              receiver.track.readyState === \"live\" &&\n              !mediaTypes.includes(mType) &&\n              mTypes.includes(mType)\n            ) {\n              receiveTrack(\n                mType,\n                setupTrackStopOnLongMute(receiver.track, conn.peerConnection),\n                info\n              );\n            }\n          });\n        }\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (disposed) return;\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.peerConnection.addTrack(track, stream);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    if (disposed) return;\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.peerConnection?.getSenders() ?? [];\n      const sender = senders.find((s) => s.track === track);\n      if (sender && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection?.getSenders() ?? [];\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.peerConnection.addTrack(track, stream);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n    if (senders.some((sender) => sender.track && !sender.transport)) {\n      conn.peerConnection.dispatchEvent(new Event(\"negotiationneeded\"));\n    }\n  };\n\n  const removeAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection?.getSenders() ?? [];\n    senders.forEach((sender) => {\n      if (sender.track && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const dispose = () => {\n    disposed = true;\n    myPeer.destroy();\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 658;"],"sourceRoot":""}