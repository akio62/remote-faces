{"version":3,"sources":["hooks/useGoBoard.ts","components/GoBoard.tsx"],"names":["isGoBoardData","x","isObject","indexOf","isAction","action","updatedAt","obj","size","grid","length","some","c","Color","B","W","E","capCount","black","white","turn","e","isPositionData","position","createGoBoard","element","setColor","setCapCount","sendData","game","Game","board","CanvasBoard","theme","themes","modernTheme","width","clientWidth","fieldObjects","markerObject","updateFieldObjects","filter","getStone","y","type","removeObject","get","FieldObject","addObjectAt","push","BoardMarkupObject","hoverObject","clearHoverObject","on","_event","pos","isValid","play","receiveData","_action","positionData","Position","createPosition","pushPosition","pass","undo","popPosition","resize","setWidth","GoBoard","React","memo","roomId","userId","actionsRef","useRef","lastDataRef","useRoomNewPeer","useCallback","a","current","broadcastData","useBroadcastData","data","Date","now","useRoomData","useGoBoard","useState","color","divRef","useEffect","div","actions","window","addEventListener","removeEventListener","className","onClick","ref"],"mappings":"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","file":"static/js/6.7affaaf4.chunk.js","sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { Color } from \"wgo\";\n\nimport { isObject } from \"../utils/types\";\nimport { useRoomData, useBroadcastData, useRoomNewPeer } from \"./useRoom\";\n\nexport type PositionData = {\n  size: number;\n  grid: Color[];\n  capCount: { black: number; white: number };\n  turn: Color.B | Color.W;\n};\n\nconst isPositionData = (x: unknown): x is PositionData => {\n  try {\n    const obj = x as PositionData;\n    if (typeof obj.size !== \"number\") return false;\n    if (obj.grid.length !== obj.size * obj.size) return false;\n    if (obj.grid.some((c) => c !== Color.B && c !== Color.W && c !== Color.E)) {\n      return false;\n    }\n    if (\n      typeof obj.capCount.black !== \"number\" ||\n      typeof obj.capCount.white !== \"number\"\n    ) {\n      return false;\n    }\n    if (obj.turn !== Color.B && obj.turn !== Color.W) return false;\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport type Action = \"play\" | \"pass\" | \"undo\";\n\nconst isAction = (x: unknown): x is Action =>\n  [\"play\", \"pass\", \"undo\"].indexOf(x as string) >= 0;\n\ntype GoBoardData = {\n  action: \"play\" | \"pass\" | \"undo\";\n  position: PositionData;\n  updatedAt: number; // in millisecond\n};\n\nconst isGoBoardData = (x: unknown): x is GoBoardData =>\n  isObject(x) &&\n  isAction((x as { action: unknown }).action) &&\n  typeof (x as { updatedAt: unknown }).updatedAt === \"number\" &&\n  isPositionData((x as { position: unknown }).position);\n\nexport const useGoBoard = (\n  roomId: string,\n  userId: string,\n  receiveData: (action: Action, position: PositionData) => void\n) => {\n  const lastDataRef = useRef<GoBoardData>();\n  useRoomNewPeer(\n    roomId,\n    userId,\n    useCallback(async function* getInitialDataIterator() {\n      if (!lastDataRef.current) return;\n      yield lastDataRef.current;\n    }, [])\n  );\n\n  const broadcastData = useBroadcastData(roomId, userId);\n  const sendData = useCallback(\n    (action: Action, position: PositionData) => {\n      const data: GoBoardData = {\n        action,\n        position,\n        updatedAt: Date.now(),\n      };\n      broadcastData(data);\n      lastDataRef.current = data;\n    },\n    [broadcastData]\n  );\n\n  useRoomData(\n    roomId,\n    userId,\n    useCallback(\n      (data) => {\n        if (!isGoBoardData(data)) return;\n        if (\n          lastDataRef.current &&\n          lastDataRef.current.updatedAt > data.updatedAt\n        ) {\n          return;\n        }\n        lastDataRef.current = data;\n        receiveData(data.action, data.position);\n      },\n      [receiveData]\n    )\n  );\n\n  return {\n    sendData,\n  };\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  Game,\n  Color,\n  CanvasBoard,\n  themes,\n  FieldObject,\n  BoardMarkupObject,\n  Position,\n} from \"wgo\";\n\nimport \"./GoBoard.css\";\nimport { useGoBoard, Action, PositionData } from \"../hooks/useGoBoard\";\n\nconst createPosition = (positionData: PositionData) => {\n  const position = new Position(positionData.size);\n  position.grid = positionData.grid;\n  position.capCount = positionData.capCount;\n  position.turn = positionData.turn;\n  return position;\n};\n\nconst createGoBoard = (\n  element: HTMLDivElement,\n  setColor: (c: \"black\" | \"white\") => void,\n  setCapCount: (capCount: { black: number; white: number }) => void,\n  sendData: (action: Action, positionData: PositionData) => void\n) => {\n  const game = new Game(6);\n  const board = new CanvasBoard(element, {\n    theme: themes.modernTheme,\n    width: element.clientWidth,\n    size: 6,\n  });\n  let fieldObjects: FieldObject[] = [];\n  let markerObject: BoardMarkupObject | null | false = null;\n  const updateFieldObjects = () => {\n    fieldObjects = fieldObjects.filter((obj) => {\n      if (\n        game.getStone(obj.x, obj.y) !== (obj.type === \"B\" ? Color.B : Color.W)\n      ) {\n        board.removeObject(obj);\n        return false;\n      }\n      return true;\n    });\n    if (markerObject) {\n      board.removeObject(markerObject);\n    }\n    markerObject = null;\n    for (let x = 0; x < game.position.size; x += 1) {\n      for (let y = 0; y < game.position.size; y += 1) {\n        const c = game.position.get(x, y);\n        if (\n          c &&\n          !fieldObjects.some(\n            (obj) =>\n              obj.x === x &&\n              obj.y === y &&\n              c === (obj.type === \"B\" ? Color.B : Color.W)\n          )\n        ) {\n          const obj = new FieldObject(c === Color.B ? \"B\" : \"W\");\n          board.addObjectAt(x, y, obj);\n          fieldObjects.push(obj);\n          if (markerObject === null) {\n            markerObject = new BoardMarkupObject(\"SQ\", c);\n            board.addObjectAt(x, y, markerObject);\n          } else if (markerObject) {\n            // we don't know what is the last move\n            board.removeObject(markerObject);\n            markerObject = false; // don't put marker this time\n          }\n        }\n      }\n    }\n  };\n  let hoverObject: FieldObject | null = null;\n  const clearHoverObject = () => {\n    if (hoverObject) {\n      board.removeObject(hoverObject);\n      hoverObject = null;\n    }\n  };\n  board.on(\"mousemove\", (_event, pos) => {\n    const isValid = pos && game.isValid(pos.x, pos.y);\n    if (!isValid) {\n      clearHoverObject();\n      return;\n    }\n    if (!hoverObject) {\n      hoverObject = new FieldObject(game.turn === Color.B ? \"B\" : \"W\");\n    } else if (hoverObject.x === pos.x && hoverObject.y === pos.y) {\n      return;\n    } else {\n      board.removeObject(hoverObject);\n    }\n    board.addObjectAt(pos.x, pos.y, hoverObject);\n  });\n  board.on(\"mouseout\", clearHoverObject);\n  board.on(\"click\", (_event, { x, y }) => {\n    const isValid = game.isValid(x, y);\n    if (isValid) {\n      clearHoverObject();\n      game.play(x, y);\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      sendData(\"play\", game.position);\n    }\n  });\n  setColor(game.turn === Color.B ? \"black\" : \"white\");\n  const receiveData = (_action: Action, positionData: PositionData) => {\n    const position = createPosition(positionData);\n    game.pushPosition(position);\n    updateFieldObjects();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    setCapCount(game.position.capCount);\n  };\n  const pass = () => {\n    game.pass();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    sendData(\"pass\", game.position);\n  };\n  const undo = () => {\n    game.popPosition();\n    updateFieldObjects();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    setCapCount(game.position.capCount);\n    sendData(\"undo\", game.position);\n  };\n  const resize = () => {\n    board.setWidth(element.clientWidth);\n  };\n  return { receiveData, pass, undo, resize };\n};\n\nexport const GoBoard = React.memo<{\n  roomId: string;\n  userId: string;\n}>(({ roomId, userId }) => {\n  const actionsRef = useRef<{\n    receiveData: (action: Action, positionData: PositionData) => void;\n    pass: () => void;\n    undo: () => void;\n    resize: () => void;\n  }>();\n  const receiveData = useCallback(\n    (action: Action, positionData: PositionData) => {\n      if (actionsRef.current) {\n        actionsRef.current.receiveData(action, positionData);\n      }\n    },\n    []\n  );\n  const { sendData } = useGoBoard(roomId, userId, receiveData);\n  const [color, setColor] = useState<\"black\" | \"white\">(\"black\");\n  const [capCount, setCapCount] = useState<{\n    black: number;\n    white: number;\n  }>({ black: 0, white: 0 });\n  const divRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (divRef.current) {\n      const div = divRef.current;\n      const actions = createGoBoard(div, setColor, setCapCount, sendData);\n      actionsRef.current = actions;\n      window.addEventListener(\"resize\", actions.resize);\n      return () => {\n        window.removeEventListener(\"resize\", actions.resize);\n      };\n    }\n    return undefined;\n  }, [sendData]);\n  const pass = () => {\n    if (actionsRef.current) {\n      actionsRef.current.pass();\n    }\n  };\n  const undo = () => {\n    if (actionsRef.current) {\n      actionsRef.current.undo();\n    }\n  };\n  return (\n    <div className=\"GoBoard-container\">\n      <div className=\"GoBoard-toolbar\">\n        Next Turn: {color === \"black\" ? \"Black\" : \"White\"}\n        <button type=\"button\" onClick={pass}>\n          Pass\n        </button>\n        <button type=\"button\" onClick={undo}>\n          Undo\n        </button>\n        <div>\n          Capture Count: Black {capCount.black}, White {capCount.white}\n        </div>\n      </div>\n      <div className=\"GoBoard-canvas\" ref={divRef} />\n    </div>\n  );\n});\n\nexport default GoBoard;\n"],"sourceRoot":""}