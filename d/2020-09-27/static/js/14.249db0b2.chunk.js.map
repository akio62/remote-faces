{"version":3,"sources":["media/screen.ts","components/ScreenShare.tsx","hooks/useScreenShare.ts"],"names":["getScreenStream","a","constraints","video","navigator","mediaDevices","getDisplayMedia","stream","getVideoTracks","track","dispose","stop","Screen","React","memo","nickname","videoRef","useRef","useEffect","current","srcObject","className","ref","autoPlay","muted","ScreenShare","roomId","userId","useState","enabled","setEnabled","screenStream","setScreenStream","screenStreamMap","setScreenStreamMap","cleanupFns","forEach","fn","onTrack","useCallback","info","prev","MediaStream","onended","addEventListener","push","removeEventListener","addTrack","useRoomMedia","result","removeTrack","useScreenShare","nicknameMap","useNicknameMap","type","onClick","Object","keys","map","screenUserId","key"],"mappings":"sRAAaA,EAAe,uCAAG,sCAAAC,EAAA,sEAErBC,EAAc,CAAEC,OAAO,GAFF,SAGJC,UAAUC,aAAqBC,gBACpDJ,GAJyB,cAGrBK,EAHqB,SAMXA,EAAOC,iBANI,mBAMpBC,EANoB,KAOrBC,EAAU,WACdD,EAAME,QARmB,kBAUpB,CACLJ,SACAG,YAZyB,2DAepB,MAfoB,0DAAH,qD,kBCMtBE,EAASC,IAAMC,MAGlB,YAA2B,IAAxBC,EAAuB,EAAvBA,SAAUR,EAAa,EAAbA,OACRS,EAAWC,iBAAyB,MAM1C,OALAC,qBAAU,WACJX,GAAUS,EAASG,UACrBH,EAASG,QAAQC,UAAYb,KAE9B,CAACA,IAEF,6BACE,yBAAKc,UAAU,wBAAwBN,GACvC,2BAAOM,UAAU,oBAAoBC,IAAKN,EAAUO,UAAQ,EAACC,OAAK,QAK3DC,EAAcZ,IAAMC,MAI9B,YAAmC,IAAhCY,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,OAAQZ,EAAe,EAAfA,SAAe,EACLa,oBAAS,GADJ,mBAC5BC,EAD4B,KACnBC,EADmB,OCvBP,SAC5BJ,EACAC,EACAE,EACAC,GACI,IAAD,EACqCF,mBAA6B,MADlE,mBACIG,EADJ,KACkBC,EADlB,OAE2CJ,mBAE3C,IAJA,mBAEIK,EAFJ,KAEqBC,EAFrB,KAOGC,EAAalB,iBAAoB,IACvCC,qBAAU,WAIR,OAHgB,WACdiB,EAAWhB,QAAQiB,SAAQ,SAACC,GAAD,OAAQA,UAGpC,IAEH,IAAMC,EAAUC,sBAAW,uCAAC,WAAO9B,EAAO+B,GAAd,eAAAvC,EAAA,sDAC1BiC,GAAmB,SAACO,GAAD,mBAAC,eACfA,GADc,kBAEhBD,EAAKb,OAAS,IAAIe,YAAY,CAACjC,SAE5BkC,EAAU,WACdT,GAAmB,SAACO,GAAD,mBAAC,eACfA,GADc,kBAEhBD,EAAKb,OAAS,WAGnBlB,EAAMmC,iBAAiB,QAASD,GAChCR,EAAWhB,QAAQ0B,MAAK,WACtBpC,EAAMqC,oBAAoB,QAASH,MAbX,2CAAD,wDAexB,IAEGI,EAAWC,YAAatB,EAAQC,EAAQW,EAAS,eA+BvD,OA7BApB,qBAAU,WACR,IAAIR,EAA+B,KAuBnC,OAtBImB,GAAWkB,GACb,sBAAC,oCAAA9C,EAAA,sEACsBD,IADtB,UACOiD,EADP,8BAGGnB,GAAW,GAHd,4BAMiBmB,EAAO1C,OAAOC,iBAN/B,mBAMQC,EANR,KAOOyC,EAAcH,EAAStC,GAC7BuB,EAAgBiB,EAAO1C,QACvBG,EAAU,WACRwC,IACAD,EAAOvC,UACPsB,EAAgB,MAChBF,GAAW,IAEbrB,EAAMmC,iBAAiB,SAAS,WAC1BlC,GAASA,IACbA,EAAU,QAjBb,2CAAD,GAqBK,WACDA,GAASA,OAEd,CAACgB,EAAQG,EAASC,EAAYiB,IAE1B,CAAEhB,eAAcE,mBD3CmBkB,CACxCzB,EACAC,EACAE,EACAC,GAJMC,EAF2B,EAE3BA,aAAcE,EAFa,EAEbA,gBAMhBmB,EAAcC,YAAe3B,EAAQC,GAE3C,OACE,yBAAKN,UAAU,yBACb,4BAAQiC,KAAK,SAASC,QAAS,kBAAMzB,GAAYD,KAC9CA,EAAU,oBAAsB,sBAElCE,GAAgB,kBAACnB,EAAD,CAAQG,SAAUA,EAAUR,OAAQwB,IACpDyB,OAAOC,KAAKxB,GAAiByB,KAAI,SAACC,GACjC,IAAMpD,EAAS0B,EAAgB0B,GAC/B,OAAKpD,EAEH,kBAACK,EAAD,CACEgD,IAAKD,EACL5C,SAAUqC,EAAYO,IAAiB,UACvCpD,OAAQA,IALQ,YAabkB","file":"static/js/14.249db0b2.chunk.js","sourcesContent":["export const getScreenStream = async () => {\n  try {\n    const constraints = { video: true };\n    const stream = (await (navigator.mediaDevices as any).getDisplayMedia(\n      constraints\n    )) as MediaStream;\n    const [track] = stream.getVideoTracks();\n    const dispose = () => {\n      track.stop();\n    };\n    return {\n      stream,\n      dispose,\n    };\n  } catch (e) {\n    return null;\n  }\n};\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport \"./ScreenShare.css\";\nimport { useScreenShare } from \"../hooks/useScreenShare\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Screen = React.memo<{\n  nickname: string;\n  stream: MediaStream;\n}>(({ nickname, stream }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (stream && videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return (\n    <div>\n      <div className=\"ScreenShare-nickname\">{nickname}</div>\n      <video className=\"ScreenShare-video\" ref={videoRef} autoPlay muted />\n    </div>\n  );\n});\n\nexport const ScreenShare = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n}>(({ roomId, userId, nickname }) => {\n  const [enabled, setEnabled] = useState(false);\n  const { screenStream, screenStreamMap } = useScreenShare(\n    roomId,\n    userId,\n    enabled,\n    setEnabled\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n\n  return (\n    <div className=\"ScreenShare-container\">\n      <button type=\"button\" onClick={() => setEnabled(!enabled)}>\n        {enabled ? \"Stop screen share\" : \"Start screen share\"}\n      </button>\n      {screenStream && <Screen nickname={nickname} stream={screenStream} />}\n      {Object.keys(screenStreamMap).map((screenUserId) => {\n        const stream = screenStreamMap[screenUserId];\n        if (!stream) return null;\n        return (\n          <Screen\n            key={screenUserId}\n            nickname={nicknameMap[screenUserId] || \"No Name\"}\n            stream={stream}\n          />\n        );\n      })}\n    </div>\n  );\n});\n\nexport default ScreenShare;\n","import { useCallback, useEffect, useState, useRef } from \"react\";\n\nimport { getScreenStream } from \"../media/screen\";\nimport { useRoomMedia } from \"./useRoom\";\n\nexport const useScreenShare = (\n  roomId: string,\n  userId: string,\n  enabled: boolean,\n  setEnabled: (enabled: boolean) => void\n) => {\n  const [screenStream, setScreenStream] = useState<MediaStream | null>(null);\n  const [screenStreamMap, setScreenStreamMap] = useState<{\n    [userId: string]: MediaStream | null;\n  }>({});\n\n  type CleanupFn = () => void;\n  const cleanupFns = useRef<CleanupFn[]>([]);\n  useEffect(() => {\n    const cleanup = () => {\n      cleanupFns.current.forEach((fn) => fn());\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = useCallback(async (track, info) => {\n    setScreenStreamMap((prev) => ({\n      ...prev,\n      [info.userId]: new MediaStream([track]),\n    }));\n    const onended = () => {\n      setScreenStreamMap((prev) => ({\n        ...prev,\n        [info.userId]: null,\n      }));\n    };\n    track.addEventListener(\"ended\", onended);\n    cleanupFns.current.push(() => {\n      track.removeEventListener(\"ended\", onended);\n    });\n  }, []);\n\n  const addTrack = useRoomMedia(roomId, userId, onTrack, \"screenVideo\");\n\n  useEffect(() => {\n    let dispose: (() => void) | null = null;\n    if (enabled && addTrack) {\n      (async () => {\n        const result = await getScreenStream();\n        if (!result) {\n          setEnabled(false);\n          return;\n        }\n        const [track] = result.stream.getVideoTracks();\n        const removeTrack = addTrack(track);\n        setScreenStream(result.stream);\n        dispose = () => {\n          removeTrack();\n          result.dispose();\n          setScreenStream(null);\n          setEnabled(false);\n        };\n        track.addEventListener(\"ended\", () => {\n          if (dispose) dispose();\n          dispose = null;\n        });\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, enabled, setEnabled, addTrack]);\n\n  return { screenStream, screenStreamMap };\n};\n"],"sourceRoot":""}