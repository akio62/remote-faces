{"version":3,"sources":["utils/types.ts","utils/sleep.ts","network/trackUtils.ts","network/peerjsUtils.ts","network/peerjsRoom.ts","../../node_modules/peerjs/dist sync"],"names":["isObject","x","hasStringProp","prop","hasObjectProp","sleep","ms","Promise","resolve","setTimeout","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","timeout","readyState","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","a","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","videoTrackToImageConverter","kind","Error","canvas","document","createElement","ctx","getContext","imageCapture","ImageCapture","getImage","grabFrame","bitmap","width","height","drawImage","toDataURL","console","log","createImage","src","img","Image","onload","onerror","imageToVideoTrackConverter","captureStream","getVideoTracks","videoTrack","setImage","dataURL","isValidPeerId","roomId","peerId","startsWith","slice","ROOM_ID_PREFIX_LEN","generatePeerId","peerIndex","getPeerIndexFromPeerId","Number","split","getPeerIndexFromConn","conn","peer","createConnectionMap","map","Map","registerRemoteMediaTypeFromSDP","msid2mediaType","sdpLines","mid","value","get","forEach","line","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","createdAt","Date","now","markConnected","connected","isConnectedPeerId","isConnected","setUserId","userId","getUserId","hasFreshConn","getConn","delConn","delete","getConnectedPeerIds","Array","from","keys","filter","k","getNotConnectedPeerIds","forEachConnectedConns","callback","values","forEachConnsAcceptingMedia","includes","clearAll","size","entries","v","id","clear","getRemoteMediaType","registerRemoteMediaType","sdp","MIN_SEED_PEER_INDEX","MAX_SEED_PEER_INDEX","guessSeed","createRoom","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","connMap","importCryptoKey","cryptoKey","initMyPeer","index","rand4","type","Peer","getPeerJsConfigFromUrl","on","i","seedId","connectPeer","err","destroy","then","error","initConnection","destroyed","reconnect","disconnected","myPeer","showConnectedStatus","peerIndexList","force","connect","broadcastData","data","peers","sendPayload","sendData","sendSDP","getMsid2MediaType","SDP","handlePayloadSDP","peerConnection","syncAllTracks","info","Math","random","removeAllTracks","warn","handlePayloadUserId","payloadUserId","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","handlePayloadPeers","handlePayloadData","connUserId","e","handlePayload","encrypted","JSON","decryptString","payload","parse","encryptString","stringify","send","buf","iceGatheringState","onicecandidate","negotiationScheduled","signalingState","mType","reInitMyPeer","waitSec","floor","existsAllSeeds","acceptMediaTypes","mTypes","transceivers","getReceivers","mediaTypeMap","stream","MediaStream","name","removeTrack","item","sender","getSenders","s","senders","some","transport","dispose","webpackEmptyContext","req","code","module","exports"],"mappings":"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","file":"static/js/12.a38bd075.chunk.js","sourcesContent":["export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<\n  F extends (...args: any) => any\n> = ReturnType<F> extends Promise<infer T> ? T : never;\n","export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","const setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = (timeout = 1000) => {\n    if (track.readyState === \"ended\") return;\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    } else if (timeout < 64000) {\n      setTimeout(() => {\n        onmute(timeout * 2);\n      }, timeout);\n    }\n  };\n  track.addEventListener(\"mute\", () => onmute());\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n\nexport const videoTrackToImageConverter = async (track: MediaStreamTrack) => {\n  if (track.kind !== \"video\") {\n    throw new Error(\"track kind is not video\");\n  }\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const imageCapture = new ImageCapture(track);\n  const getImage = async () => {\n    try {\n      const bitmap = await imageCapture.grabFrame();\n      canvas.width = bitmap.width;\n      canvas.height = bitmap.height;\n      ctx.drawImage(bitmap, 0, 0);\n      return canvas.toDataURL(\"image/jpeg\");\n    } catch (e) {\n      console.log(\"failed to grab frame from viedeo track\", e);\n      return null;\n    }\n  };\n  return { getImage };\n};\n\nconst createImage = (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = src;\n  });\n\nexport const imageToVideoTrackConverter = () => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const canvasStream = (canvas as any).captureStream() as MediaStream;\n  const [videoTrack] = canvasStream.getVideoTracks();\n  const setImage = async (dataURL: string) => {\n    const img = await createImage(dataURL);\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n  };\n  return { videoTrack, setImage };\n};\n","import Peer from \"peerjs\";\n\nimport { ROOM_ID_PREFIX_LEN } from \"./common\";\nimport { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nexport const isValidPeerId = (\n  roomId: string,\n  peerId: unknown\n): peerId is string =>\n  typeof peerId === \"string\" &&\n  peerId.startsWith(`${roomId.slice(0, ROOM_ID_PREFIX_LEN)} `);\n\nexport const generatePeerId = (roomId: string, peerIndex: number) =>\n  `${roomId.slice(0, ROOM_ID_PREFIX_LEN)} ${peerIndex}`;\n\nexport const getPeerIndexFromPeerId = (peerId: string) =>\n  Number(peerId.split(\" \")[1]);\n\nexport const getPeerIndexFromConn = (conn: Peer.DataConnection) =>\n  getPeerIndexFromPeerId(conn.peer);\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Peer.DataConnection;\n    createdAt: number;\n    connected?: boolean;\n    userId?: string;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (\n    conn: Peer.DataConnection,\n    mediaTypes: string[]\n  ) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    map.set(conn.peer, {\n      conn,\n      createdAt: Date.now(),\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n    if (value) {\n      value.conn.close();\n    }\n  };\n\n  const markConnected = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      value.connected = true;\n    }\n  };\n\n  const isConnectedPeerId = (peerId: string) => {\n    const value = map.get(peerId);\n    return (value && value.connected) || false;\n  };\n\n  const isConnected = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return (value && value.conn === conn && value.connected) || false;\n  };\n\n  const setUserId = (conn: Peer.DataConnection, userId: string) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.userId = userId;\n    }\n  };\n\n  const getUserId = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return value && value.userId;\n  };\n\n  const hasFreshConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return false;\n    return value.createdAt > Date.now() - 5 * 60 * 1000;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const delConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n      return true;\n    }\n    return false;\n  };\n\n  const getConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => map.get(k)?.connected);\n\n  const getNotConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => !map.get(k)?.connected);\n\n  const forEachConnectedConns = (\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected && value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const clearAll = () => {\n    if (map.size) {\n      console.log(\n        \"connectionMap garbage:\",\n        [...map.entries()].map(([k, v]) => ({\n          id: k,\n          createdAt: v.createdAt,\n          connected: v.connected,\n          userId: v.userId,\n        }))\n      );\n    }\n    map.clear();\n  };\n\n  const getRemoteMediaType = (conn: Peer.DataConnection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Peer.DataConnection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Peer.DataConnection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    markConnected,\n    isConnectedPeerId,\n    isConnected,\n    setUserId,\n    getUserId,\n    hasFreshConn,\n    getConn,\n    delConn,\n    getConnectedPeerIds,\n    getNotConnectedPeerIds,\n    forEachConnectedConns,\n    forEachConnsAcceptingMedia,\n    clearAll,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Peer from \"peerjs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  rand4,\n  importCryptoKey,\n  encryptString,\n  decryptString,\n} from \"../utils/crypto\";\nimport { getPeerJsConfigFromUrl } from \"../utils/url\";\nimport { isObject, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport {\n  isValidPeerId,\n  generatePeerId,\n  getPeerIndexFromPeerId,\n  getPeerIndexFromConn,\n  createConnectionMap,\n} from \"./peerjsUtils\";\nimport { setupTrackStopOnLongMute } from \"./trackUtils\";\n\nconst MIN_SEED_PEER_INDEX = 10; // config\nconst MAX_SEED_PEER_INDEX = 14; // config\nconst guessSeed = (id: string) => {\n  const peerIndex = getPeerIndexFromPeerId(id);\n  return MIN_SEED_PEER_INDEX <= peerIndex && peerIndex <= MAX_SEED_PEER_INDEX;\n};\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  const initMyPeer = (index = MIN_SEED_PEER_INDEX): Promise<Peer> =>\n    new Promise((resolve, reject) => {\n      if (disposed) {\n        reject(new Error(\"already disposed\"));\n        return;\n      }\n      connMap.clearAll();\n      const isSeed =\n        MIN_SEED_PEER_INDEX <= index && index <= MAX_SEED_PEER_INDEX;\n      const peerIndex = isSeed ? index : rand4();\n      updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex });\n      const id = generatePeerId(roomId, peerIndex);\n      const peer = new Peer(id, getPeerJsConfigFromUrl());\n      peer.on(\"open\", () => {\n        resolve(peer);\n        if (process.env.NODE_ENV !== \"production\") {\n          (window as any).myPeer = peer;\n        }\n        updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n        setTimeout(() => {\n          for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n            const seedId = generatePeerId(roomId, i);\n            connectPeer(seedId, true);\n          }\n        }, 10);\n      });\n      peer.on(\"error\", (err) => {\n        if (err.type === \"unavailable-id\") {\n          peer.destroy();\n          initMyPeer(index + 1).then(resolve, reject);\n        } else if (err.type === \"peer-unavailable\") {\n          // ignore\n        } else if (err.type === \"disconnected\") {\n          console.log(\"initMyPeer disconnected error\", peerIndex, err);\n        } else if (err.type === \"network\") {\n          console.log(\"initMyPeer network error\", peerIndex, err);\n        } else if (err.type === \"server-error\") {\n          console.log(\"initMyPeer server error\", peerIndex, err);\n          updateNetworkStatus({ type: \"SERVER_ERROR\" });\n        } else {\n          console.error(\"initMyPeer unknown error\", peerIndex, err.type, err);\n          updateNetworkStatus({ type: \"UNKNOWN_ERROR\", err });\n        }\n      });\n      peer.on(\"connection\", (conn) => {\n        updateNetworkStatus({\n          type: \"NEW_CONNECTION\",\n          peerIndex: getPeerIndexFromConn(conn),\n        });\n        initConnection(conn);\n      });\n      peer.on(\"disconnected\", () => {\n        console.log(\"initMyPeer disconnected\", peerIndex);\n        setTimeout(() => {\n          if (!peer.destroyed) {\n            updateNetworkStatus({ type: \"RECONNECTING\", peerIndex });\n            peer.reconnect();\n            setTimeout(async () => {\n              if (peer.disconnected) {\n                console.log(\"reconnect failed, re-initializing\", peerIndex);\n                peer.destroy();\n                myPeer = await initMyPeer();\n              }\n            }, 60 * 1000);\n          }\n        }, 5 * 1000);\n      });\n    });\n  let myPeer = await initMyPeer();\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap\n      .getConnectedPeerIds()\n      .map(getPeerIndexFromPeerId);\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n    console.log(\n      \"myPeer index:\",\n      myPeer.id && getPeerIndexFromPeerId(myPeer.id),\n      \", connnecting:\",\n      connMap.getNotConnectedPeerIds().map(getPeerIndexFromPeerId)\n    );\n  };\n\n  const connectPeer = (id: string, force?: boolean) => {\n    if (disposed) return;\n    if (myPeer.id === id || myPeer.disconnected) return;\n    if (connMap.isConnectedPeerId(id)) return;\n    if (connMap.hasFreshConn(id)) return;\n    if (\n      force ||\n      getPeerIndexFromPeerId(id) < getPeerIndexFromPeerId(myPeer.id)\n    ) {\n      console.log(\"connectPeer\", id);\n      const conn = myPeer.connect(id);\n      initConnection(conn);\n    }\n  };\n\n  const broadcastData = (data: unknown) => {\n    if (disposed) return;\n    const peers = connMap.getConnectedPeerIds();\n    connMap.forEachConnectedConns((conn) => {\n      sendPayload(conn, { userId, data, peers, mediaTypes });\n    });\n  };\n\n  const sendData = (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.getConn(generatePeerId(roomId, peerIndex));\n    if (!conn) return;\n    const peers = connMap.getConnectedPeerIds();\n    sendPayload(conn, { userId, data, peers, mediaTypes });\n  };\n\n  const sendSDP = (\n    conn: Peer.DataConnection,\n    sdp: { offer: unknown } | { answer: unknown }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    sendPayload(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Peer.DataConnection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    connMap.registerRemoteMediaType(conn, sdp);\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(sdp.offer);\n        syncAllTracks(conn);\n        const answer = await conn.peerConnection.createAnswer();\n        await conn.peerConnection.setLocalDescription(answer);\n        sendSDP(conn, { answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n        await sleep(Math.random() * 30 * 1000);\n        removeAllTracks(conn);\n        syncAllTracks(conn);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const handlePayloadUserId = (\n    conn: Peer.DataConnection,\n    payloadUserId: unknown\n  ) => {\n    if (typeof payloadUserId === \"string\") {\n      connMap.setUserId(conn, payloadUserId);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Peer.DataConnection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadPeers = (peers: unknown) => {\n    if (Array.isArray(peers)) {\n      peers.forEach((peer) => {\n        if (isValidPeerId(roomId, peer)) {\n          connectPeer(peer);\n        }\n      });\n    }\n  };\n\n  const handlePayloadData = (conn: Peer.DataConnection, data: unknown) => {\n    const connUserId = connMap.getUserId(conn);\n    if (connUserId) {\n      const info: PeerInfo = {\n        userId: connUserId,\n        peerIndex: getPeerIndexFromConn(conn),\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      try {\n        receiveData(data, info);\n      } catch (e) {\n        console.warn(\"receiveData\", e);\n      }\n    }\n  };\n\n  const handlePayload = async (\n    conn: Peer.DataConnection,\n    encrypted: ArrayBuffer\n  ) => {\n    if (disposed) return;\n    try {\n      const payload = JSON.parse(await decryptString(encrypted, cryptoKey));\n      // console.log(\"decrypted payload\", conn.peer, payload);\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadUserId(conn, (payload as { userId?: unknown }).userId);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadPeers((payload as { peers?: unknown }).peers);\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, encrypted);\n    }\n  };\n\n  const sendPayload = async (conn: Peer.DataConnection, payload: unknown) => {\n    try {\n      const encrypted = await encryptString(JSON.stringify(payload), cryptoKey);\n      conn.send(encrypted);\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const initConnection = (conn: Peer.DataConnection) => {\n    if (connMap.isConnectedPeerId(conn.peer)) {\n      console.info(\"dataConnection already in map, overriding\", conn.peer);\n    }\n    connMap.addConn(conn);\n    conn.on(\"open\", () => {\n      connMap.markConnected(conn);\n      const peerIndex = getPeerIndexFromConn(conn);\n      console.log(\"dataConnection open\", peerIndex);\n      showConnectedStatus();\n      notifyNewPeer(peerIndex);\n    });\n    conn.on(\"data\", (buf: ArrayBuffer) => handlePayload(conn, buf));\n    conn.peerConnection.addEventListener(\"icegatheringstatechange\", () => {\n      const pc = conn.peerConnection;\n      if (pc.iceGatheringState === \"complete\") {\n        pc.onicecandidate = () => undefined;\n      }\n    });\n    let negotiationScheduled = false;\n    conn.peerConnection.addEventListener(\"negotiationneeded\", async () => {\n      if (negotiationScheduled) return;\n      negotiationScheduled = true;\n      await sleep(5000);\n      negotiationScheduled = false;\n      if (!connMap.isConnected(conn)) return;\n      if (!conn.peerConnection) return;\n      if (conn.peerConnection.signalingState === \"closed\") return;\n      const offer = await conn.peerConnection.createOffer();\n      await conn.peerConnection.setLocalDescription(offer);\n      sendSDP(conn, { offer });\n    });\n    conn.peerConnection.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      if (!connMap.isConnected(conn)) {\n        console.warn(\"received track from non-connected peer, ignoring\");\n        return;\n      }\n      const { mid } = event.transceiver;\n      const mType = mid && connMap.getRemoteMediaType(conn, mid);\n      if (!mType) {\n        console.warn(\"failed to find media type from mid\");\n        return;\n      }\n      const connUserId = connMap.getUserId(conn);\n      if (connUserId) {\n        const info: PeerInfo = {\n          userId: connUserId,\n          peerIndex: getPeerIndexFromPeerId(conn.peer),\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        receiveTrack(\n          mType,\n          setupTrackStopOnLongMute(event.track, conn.peerConnection),\n          info\n        );\n      }\n    });\n    conn.on(\"close\", () => {\n      if (!connMap.delConn(conn)) return;\n      const peerIndex = getPeerIndexFromConn(conn);\n      updateNetworkStatus({ type: \"CONNECTION_CLOSED\", peerIndex });\n      showConnectedStatus();\n      if (connMap.getConnectedPeerIds().length === 0) {\n        reInitMyPeer(true);\n      } else if (\n        guessSeed(conn.peer) &&\n        !myPeer.disconnected &&\n        !guessSeed(myPeer.id)\n      ) {\n        const waitSec = 5 * 60 + Math.floor(Math.random() * 5 * 60);\n        console.log(\n          `Disconnected seed peer: ${peerIndex}, reinit in ${waitSec}sec...`\n        );\n        setTimeout(reInitMyPeer, waitSec * 1000);\n      }\n    });\n  };\n\n  const reInitMyPeer = async (force?: boolean) => {\n    if (myPeer.disconnected) return; // should already be handled\n    if (!force) {\n      if (guessSeed(myPeer.id)) return;\n      let existsAllSeeds = true;\n      for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n        const id = generatePeerId(roomId, i);\n        if (!connMap.isConnectedPeerId(id)) {\n          existsAllSeeds = false;\n          break;\n        }\n      }\n      if (existsAllSeeds) {\n        showConnectedStatus();\n        return;\n      }\n    }\n    myPeer.destroy();\n    myPeer = await initMyPeer();\n  };\n\n  const acceptMediaTypes = (mTypes: string[]) => {\n    if (disposed) return;\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConnectedConns((conn) => {\n        const connUserId = connMap.getUserId(conn);\n        if (connUserId) {\n          const info: PeerInfo = {\n            userId: connUserId,\n            peerIndex: getPeerIndexFromPeerId(conn.peer),\n            mediaTypes: connMap.getAcceptingMediaTypes(conn),\n          };\n          const transceivers = conn.peerConnection.getTransceivers();\n          conn.peerConnection.getReceivers().forEach((receiver) => {\n            const transceiver = transceivers.find(\n              (t) => t.receiver === receiver\n            );\n            const mid = transceiver?.mid;\n            const mType = mid && connMap.getRemoteMediaType(conn, mid);\n            if (!mType) {\n              console.warn(\"failed to find media type from mid\");\n              return;\n            }\n            if (\n              receiver.track.readyState === \"live\" &&\n              !mediaTypes.includes(mType) &&\n              mTypes.includes(mType)\n            ) {\n              receiveTrack(\n                mType,\n                setupTrackStopOnLongMute(receiver.track, conn.peerConnection),\n                info\n              );\n            }\n          });\n        }\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (disposed) return;\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.peerConnection.addTrack(track, stream);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    if (disposed) return;\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.peerConnection?.getSenders() ?? [];\n      const sender = senders.find((s) => s.track === track);\n      if (sender && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection?.getSenders() ?? [];\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.peerConnection.addTrack(track, stream);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n    if (senders.some((sender) => sender.track && !sender.transport)) {\n      conn.peerConnection.dispatchEvent(new Event(\"negotiationneeded\"));\n    }\n  };\n\n  const removeAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection?.getSenders() ?? [];\n    senders.forEach((sender) => {\n      if (sender.track && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const dispose = () => {\n    disposed = true;\n    myPeer.destroy();\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 661;"],"sourceRoot":""}