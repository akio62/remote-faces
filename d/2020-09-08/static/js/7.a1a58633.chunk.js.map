{"version":3,"sources":["utils/sleep.ts","network/trackUtils.ts","network/ipfsUtils.ts","network/pubsubRoom.ts","utils/types.ts"],"names":["sleep","ms","Promise","resolve","setTimeout","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","a","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","videoTrackToImageConverter","kind","Error","imageCapture","ImageCapture","canvas","document","createElement","ctx","getContext","getImage","grabFrame","bitmap","width","height","drawImage","toDataURL","console","log","createImage","src","img","Image","onload","onerror","imageToVideoTrackConverter","captureStream","getVideoTracks","videoTrack","setImage","dataURL","peerIndexCounter","DEFAULT_CONFIG","iceServers","urls","username","credential","sdpSemantics","createConnectionMap","map","Map","registerRemoteMediaTypeFromSDP","conn","msid2mediaType","sdpLines","mid","value","get","peer","split","forEach","line","startsWith","slice","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","peerId","userId","peerIndex","sendPc","recvPc","getConn","findConn","Array","from","values","v","delConn","delete","getPeerIndexList","forEachConns","callback","forEachConnsAcceptingMedia","includes","size","getRemoteMediaType","registerRemoteMediaType","sdp","hasObjectProp","hasStringProp","topicsForMediaTypes","getTopicForMediaType","roomId","key","topic","sha256","ROOM_ID_PREFIX_LEN","createRoom","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","connMap","roomTopic","importCryptoKey","cryptoKey","type","Ipfs","create","repo","secureRandomId","config","Addresses","Swarm","myIpfs","id","myPeerId","pubsub","subscribe","msg","pubsubHandler","parsePayload","encrypted","decryptStringFromChunks","str","undefined","payload","JSON","parse","info","sendPayload","encryptStringToChunks","stringify","publish","error","sendPayloadDirectly","noop","unsubscribe","broadcastData","data","sendData","faceAudioDisposeList","faceVideoDisposeList","acceptMediaTypes","mTypes","faceAudioHandler","warn","c","worker","audioCtx","AudioContext","destination","createMediaStreamDestination","currTime","pending","Worker","onmessage","e","buffer","Float32Array","currentTime","audioBuffer","createBuffer","copyToChannel","audioBufferSource","createBufferSource","connect","onended","start","audioTrack","stream","getAudioTracks","push","terminate","decryptBufferToChunks","byteOffset","byteLength","bufList","buf","postMessage","dispose","splice","faceVideoHandler","filter","transceivers","getReceivers","mType","readyState","sendSDP","getMsid2MediaType","SDP","handlePayloadSDP","isObject","negotiationId","negotiationIdMap","startNegotiation","running","negotiate","sendIce","ice","ICE","handlePayloadIce","direction","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","x","syncAllTracks","handlePayloadData","handlePayload","initConnection","payloadUserId","getUserIdFromPayload","peerIndexList","checkPeers","peers","trackDisposeMap","runDispose","mediaTypeMap","MediaStream","trackSource","createMediaStreamSource","audioWorklet","addModule","audioEncoder","AudioWorkletNode","port","encryptBufferFromChunks","faceVideoDisposed","loop","name","removeTrack","item","sender","getSenders","s","senders","some","prop"],"mappings":"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","file":"static/js/7.a1a58633.chunk.js","sourcesContent":["export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { sleep } from \"../utils/sleep\";\n\nconst setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = async () => {\n    await sleep(5000);\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    }\n  };\n  track.addEventListener(\"mute\", onmute);\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n\nexport const videoTrackToImageConverter = async (track: MediaStreamTrack) => {\n  if (track.kind !== \"video\") {\n    throw new Error(\"track kind is not video\");\n  }\n  const imageCapture = new ImageCapture(track);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const getImage = async () => {\n    try {\n      const bitmap = await imageCapture.grabFrame();\n      canvas.width = bitmap.width;\n      canvas.height = bitmap.height;\n      ctx.drawImage(bitmap, 0, 0);\n      return canvas.toDataURL(\"image/jpeg\");\n    } catch (e) {\n      console.log(\"failed to grab frame from viedeo track\", e);\n      return null;\n    }\n  };\n  return { getImage };\n};\n\nconst createImage = (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = src;\n  });\n\nexport const imageToVideoTrackConverter = () => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const canvasStream = (canvas as any).captureStream() as MediaStream;\n  const [videoTrack] = canvasStream.getVideoTracks();\n  const setImage = async (dataURL: string) => {\n    const img = await createImage(dataURL);\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n  };\n  return { videoTrack, setImage };\n};\n","import { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nlet peerIndexCounter = 0;\n\nconst getNextPeerIndex = () => {\n  peerIndexCounter += 1;\n  return peerIndexCounter;\n};\n\nexport type Connection = {\n  peerIndex: number;\n  peer: string; // ipfsId\n  userId: string;\n  sendPc: RTCPeerConnection;\n  recvPc: RTCPeerConnection;\n};\n\nconst DEFAULT_CONFIG = {\n  iceServers: [\n    { urls: \"stun:stun.l.google.com:19302\" },\n    {\n      urls: \"turn:0.peerjs.com:3478\",\n      username: \"peerjs\",\n      credential: \"peerjsp\",\n    },\n  ],\n  sdpSemantics: \"unified-plan\",\n};\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Connection;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (conn: Connection, mediaTypes: string[]) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (peerId: string, userId: string) => {\n    const value = map.get(peerId);\n    if (value) {\n      throw new Error(\"addConn: already exists\");\n    }\n    const conn: Connection = {\n      peerIndex: getNextPeerIndex(),\n      peer: peerId,\n      userId,\n      sendPc: new RTCPeerConnection(DEFAULT_CONFIG),\n      recvPc: new RTCPeerConnection(DEFAULT_CONFIG),\n    };\n    map.set(conn.peer, {\n      conn,\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n    return conn;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const findConn = (peerIndex: number) => {\n    const value = Array.from(map.values()).find(\n      (v) => v.conn.peerIndex === peerIndex\n    );\n    if (value) return value.conn;\n    return null;\n  };\n\n  const delConn = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n      conn.sendPc.close();\n      conn.recvPc.close();\n    } else {\n      throw new Error(\"delConn: does not exist\");\n    }\n  };\n\n  const getPeerIndexList = () =>\n    Array.from(map.values()).map((v) => v.conn.peerIndex);\n\n  const forEachConns = (callback: (conn: Connection) => void) => {\n    Array.from(map.values()).forEach((value) => {\n      callback(value.conn);\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Connection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const size = () => map.size;\n\n  const getRemoteMediaType = (conn: Connection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Connection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Connection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    getConn,\n    findConn,\n    delConn,\n    getPeerIndexList,\n    forEachConns,\n    forEachConnsAcceptingMedia,\n    size,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Ipfs, { PubsubHandler } from \"ipfs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  sha256,\n  secureRandomId,\n  importCryptoKey,\n  encryptStringToChunks,\n  decryptStringFromChunks,\n  encryptBufferFromChunks,\n  decryptBufferToChunks,\n} from \"../utils/crypto\";\nimport { isObject, hasStringProp, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport { Connection, createConnectionMap } from \"./ipfsUtils\";\nimport {\n  setupTrackStopOnLongMute,\n  loopbackPeerConnection,\n  videoTrackToImageConverter,\n  imageToVideoTrackConverter,\n} from \"./trackUtils\";\n\nconst topicsForMediaTypes = new Map<string, string>();\n\nconst getTopicForMediaType = async (roomId: string, mediaType: string) => {\n  const key = `${roomId} ${mediaType}`;\n  let topic = topicsForMediaTypes.get(key);\n  if (!topic) {\n    topic = (await sha256(key)).slice(0, ROOM_ID_PREFIX_LEN);\n    topicsForMediaTypes.set(key, topic);\n  }\n  return topic;\n};\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n\n  const roomTopic = roomId.slice(0, ROOM_ID_PREFIX_LEN);\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex: 0 });\n  const myIpfs = await Ipfs.create({\n    repo: secureRandomId(),\n    config: {\n      Addresses: {\n        Swarm: [\n          \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n        ],\n      },\n    },\n  });\n  const myPeerId = (await myIpfs.id()).id;\n  await myIpfs.pubsub.subscribe(roomTopic, (msg) => pubsubHandler(msg));\n  await myIpfs.pubsub.subscribe(`${roomTopic} ${myPeerId}`, (msg) =>\n    pubsubHandler(msg)\n  );\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myIpfs = myIpfs;\n  }\n\n  const parsePayload = async (encrypted: ArrayBuffer): Promise<unknown> => {\n    try {\n      const str = await decryptStringFromChunks(encrypted, cryptoKey);\n      if (str === null) return undefined;\n      const payload = JSON.parse(str);\n      console.log(\"decrypted payload\", payload);\n      return payload;\n    } catch (e) {\n      console.info(\"Error in parsePayload\", e, encrypted);\n      return undefined;\n    }\n  };\n\n  const sendPayload = async (topic: string, payload: unknown) => {\n    try {\n      console.log(\"payload to encrypt\", topic, payload);\n      for await (const encrypted of encryptStringToChunks(\n        JSON.stringify(payload),\n        cryptoKey\n      )) {\n        await myIpfs.pubsub.publish(topic, encrypted);\n      }\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const sendPayloadDirectly = async (conn: Connection, payload: unknown) => {\n    const topic = `${roomTopic} ${conn.peer}`;\n    // HACK somehow, publish doesn't work without this\n    const noop = () => null;\n    await myIpfs.pubsub.subscribe(topic, noop);\n    await myIpfs.pubsub.unsubscribe(topic, noop);\n    await sendPayload(topic, payload);\n  };\n\n  const broadcastData = async (data: unknown) => {\n    if (disposed) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayload(roomTopic, payload);\n  };\n\n  const sendData = async (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.findConn(peerIndex);\n    if (!conn) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayloadDirectly(conn, payload);\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).sendData = sendData;\n  }\n\n  // TODO very limited use case for now\n  const faceAudioDisposeList: (() => void)[] = [];\n  const faceVideoDisposeList: (() => void)[] = [];\n\n  const acceptMediaTypes = async (mTypes: string[]) => {\n    if (disposed) return;\n    if (mTypes.includes(\"faceAudio\") && !faceAudioDisposeList.length) {\n      // XXX experimental\n      const topic = await getTopicForMediaType(roomId, \"faceAudio\");\n      const faceAudioHandler: PubsubHandler = async (msg) => {\n        if (msg.from === myPeerId) return;\n        const conn = connMap.getConn(msg.from);\n        if (!conn) {\n          console.warn(\"conn not ready\");\n          return;\n        }\n        const info: PeerInfo = {\n          userId: conn.userId,\n          peerIndex: conn.peerIndex,\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        const c: {\n          worker: Worker;\n        } = conn as any; // TODO do it more cleanly\n        if (!c.worker) {\n          const audioCtx = new AudioContext();\n          const destination = audioCtx.createMediaStreamDestination();\n          let currTime = 0;\n          let pending = 0;\n          const worker = new Worker(\"audio-decoder.js\", { type: \"module\" });\n          worker.onmessage = (e) => {\n            const buffer = new Float32Array(e.data);\n            if (!pending) {\n              currTime = audioCtx.currentTime;\n            }\n            currTime += 0.06; // 60ms\n            pending += 1;\n            const audioBuffer = audioCtx.createBuffer(1, 2880, 48000);\n            audioBuffer.copyToChannel(buffer, 0);\n            const audioBufferSource = audioCtx.createBufferSource();\n            audioBufferSource.buffer = audioBuffer;\n            audioBufferSource.connect(destination);\n            audioBufferSource.onended = () => {\n              pending -= 1;\n            };\n            audioBufferSource.start(currTime);\n          };\n          c.worker = worker;\n          const audioTrack = destination.stream.getAudioTracks()[0];\n          receiveTrack(\n            \"faceAudio\",\n            await loopbackPeerConnection(audioTrack),\n            info\n          );\n          faceAudioDisposeList.push(() => {\n            audioCtx.close();\n            audioTrack.dispatchEvent(new Event(\"ended\"));\n            worker.terminate();\n            if (c.worker === worker) {\n              delete c.worker;\n            }\n          });\n        }\n        const bufList = await decryptBufferToChunks(\n          msg.data.buffer,\n          msg.data.byteOffset,\n          msg.data.byteLength,\n          cryptoKey\n        );\n        if (c.worker) {\n          bufList.forEach((buf) => {\n            c.worker.postMessage([buf], [buf]);\n          });\n        }\n      };\n      myIpfs.pubsub.subscribe(topic, faceAudioHandler);\n      faceAudioDisposeList.push(() => {\n        myIpfs.pubsub.unsubscribe(topic, faceAudioHandler);\n      });\n    } else if (!mTypes.includes(\"faceAudio\") && faceAudioDisposeList.length) {\n      faceAudioDisposeList.forEach((dispose) => dispose());\n      faceAudioDisposeList.splice(0, faceAudioDisposeList.length);\n    }\n    if (mTypes.includes(\"faceVideo\") && !faceVideoDisposeList.length) {\n      // XXX experimental\n      const topic = await getTopicForMediaType(roomId, \"faceVideo\");\n      const faceVideoHandler: PubsubHandler = async (msg) => {\n        if (msg.from === myPeerId) return;\n        const conn = connMap.getConn(msg.from);\n        if (!conn) {\n          console.warn(\"conn not ready\");\n          return;\n        }\n        const info: PeerInfo = {\n          userId: conn.userId,\n          peerIndex: conn.peerIndex,\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        const c: {\n          setImage: (s: string) => void;\n        } = conn as any; // TODO do it more cleanly\n        if (!c.setImage) {\n          const { videoTrack, setImage } = imageToVideoTrackConverter();\n          c.setImage = setImage;\n          receiveTrack(\"faceVideo\", videoTrack, info);\n          faceVideoDisposeList.push(() => {\n            videoTrack.dispatchEvent(new Event(\"ended\"));\n          });\n        }\n        try {\n          const dataURL = await decryptStringFromChunks(msg.data, cryptoKey);\n          if (dataURL) {\n            c.setImage(dataURL);\n          }\n        } catch (e) {\n          console.info(\"Error in parse for face video\", e);\n        }\n      };\n      myIpfs.pubsub.subscribe(topic, faceVideoHandler);\n      faceVideoDisposeList.push(() => {\n        myIpfs.pubsub.unsubscribe(topic, faceVideoHandler);\n      });\n    } else if (!mTypes.includes(\"faceVideo\") && faceVideoDisposeList.length) {\n      faceVideoDisposeList.forEach((dispose) => dispose());\n      faceVideoDisposeList.splice(0, faceVideoDisposeList.length);\n    }\n    // eslint-disable-next-line no-param-reassign\n    mTypes = mTypes.filter((t) => t !== \"faceAudio\" && t !== \"faceVideo\");\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConns((conn) => {\n        const info: PeerInfo = {\n          userId: conn.userId,\n          peerIndex: conn.peerIndex,\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        const transceivers = conn.recvPc.getTransceivers();\n        conn.recvPc.getReceivers().forEach((receiver) => {\n          const transceiver = transceivers.find((t) => t.receiver === receiver);\n          const mid = transceiver?.mid;\n          const mType = mid && connMap.getRemoteMediaType(conn, mid);\n          if (!mType) {\n            console.warn(\"failed to find media type from mid\");\n            return;\n          }\n          if (\n            receiver.track.readyState === \"live\" &&\n            !mediaTypes.includes(mType) &&\n            mTypes.includes(mType)\n          ) {\n            receiveTrack(\n              mType,\n              setupTrackStopOnLongMute(receiver.track, conn.recvPc),\n              info\n            );\n          }\n        });\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const sendSDP = async (\n    conn: Connection,\n    sdp:\n      | {\n          negotiationId: string;\n          offer: RTCSessionDescriptionInit;\n        }\n      | {\n          negotiationId: string;\n          answer: RTCSessionDescriptionInit;\n        }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    await sendPayloadDirectly(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Connection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    if (!hasStringProp(sdp, \"negotiationId\")) {\n      console.warn(\"negotiationId not found in SDP\");\n      return;\n    }\n    const { negotiationId } = sdp;\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.recvPc.setRemoteDescription(sdp.offer);\n        const answer = await conn.recvPc.createAnswer();\n        await conn.recvPc.setLocalDescription(answer);\n        sendSDP(conn, { negotiationId, answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      if (negotiationIdMap.get(conn) === negotiationId) {\n        negotiationIdMap.delete(conn);\n      }\n      try {\n        await conn.sendPc.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const negotiationIdMap = new WeakMap<Connection, string>();\n  const startNegotiation = (conn: Connection) => {\n    const running = negotiationIdMap.has(conn);\n    negotiationIdMap.set(conn, secureRandomId());\n    if (running) return;\n    const negotiate = async () => {\n      const negotiationId = negotiationIdMap.get(conn);\n      if (!negotiationId) return;\n      const offer = await conn.sendPc.createOffer();\n      await conn.sendPc.setLocalDescription(offer);\n      await sendSDP(conn, { negotiationId, offer });\n      await sleep(5000);\n      negotiate();\n    };\n    negotiate();\n  };\n\n  const sendIce = (\n    conn: Connection,\n    ice: {\n      direction: \"send\" | \"recv\";\n      candidate: RTCIceCandidate;\n    }\n  ) => {\n    sendPayloadDirectly(conn, { ICE: ice });\n  };\n\n  const handlePayloadIce = (conn: Connection, ice: unknown) => {\n    if (!isObject(ice)) return;\n    if (!hasStringProp(ice, \"direction\")) {\n      console.warn(\"direction not found in ICE\");\n      return;\n    }\n    if (!hasObjectProp(ice, \"candidate\")) {\n      console.warn(\"candidate not found in ICE\");\n      return;\n    }\n    try {\n      if (ice.direction === \"send\") {\n        conn.recvPc.addIceCandidate(ice.candidate);\n      } else if (ice.direction === \"recv\") {\n        conn.sendPc.addIceCandidate(ice.candidate);\n      }\n    } catch (e) {\n      console.info(\"handleCandidate failed\", e);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Connection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadData = (conn: Connection, data: unknown) => {\n    const info: PeerInfo = {\n      userId: conn.userId,\n      peerIndex: conn.peerIndex,\n      mediaTypes: connMap.getAcceptingMediaTypes(conn),\n    };\n    try {\n      receiveData(data, info);\n    } catch (e) {\n      console.warn(\"receiveData\", e);\n    }\n  };\n\n  const handlePayload = async (conn: Connection, payload: unknown) => {\n    try {\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadIce(conn, (payload as { ICE?: unknown }).ICE);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, payload);\n    }\n  };\n\n  const initConnection = (peerId: string, payloadUserId: string) => {\n    const conn = connMap.addConn(peerId, payloadUserId);\n    conn.sendPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"send\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"recv\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      const info: PeerInfo = {\n        userId: conn.userId,\n        peerIndex: conn.peerIndex,\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      receiveTrack(\n        \"TODO\",\n        setupTrackStopOnLongMute(event.track, conn.recvPc),\n        info\n      );\n    });\n    notifyNewPeer(conn.peerIndex);\n    updateNetworkStatus({\n      type: \"NEW_CONNECTION\",\n      peerIndex: conn.peerIndex,\n    });\n    return conn;\n  };\n\n  const getUserIdFromPayload = (payload: unknown) => {\n    if (!isObject(payload)) return null;\n    const payloadUserId = (payload as { userId: unknown }).userId;\n    if (typeof payloadUserId !== \"string\") return null;\n    return payloadUserId;\n  };\n\n  const pubsubHandler: PubsubHandler = async (msg) => {\n    if (disposed) return;\n    if (msg.from === myPeerId) return;\n    const payload = await parsePayload(msg.data);\n    if (payload === undefined) return;\n    const payloadUserId = getUserIdFromPayload(payload);\n    let conn = connMap.getConn(msg.from);\n    if (!conn) {\n      if (payloadUserId) {\n        conn = initConnection(msg.from, payloadUserId);\n      } else {\n        console.warn(\"cannot initialize conn without user id\");\n      }\n    }\n    if (conn) {\n      await handlePayload(conn, payload);\n    }\n    const peerIndexList = connMap.getPeerIndexList();\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n  };\n\n  const checkPeers = async () => {\n    if (disposed) return;\n    const peers = myIpfs.pubsub.peers(roomTopic);\n    connMap.forEachConns((conn) => {\n      if (!peers.includes(conn.peer)) {\n        connMap.delConn(conn);\n        updateNetworkStatus({\n          type: \"CONNECTION_CLOSED\",\n          peerIndex: conn.peerIndex,\n        });\n      }\n    });\n    if (!peers.length) {\n      updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n      await sleep(1000);\n      checkPeers();\n      return;\n    }\n    if (!connMap.size()) {\n      await broadcastData(null);\n    }\n    await sleep(5000);\n    checkPeers();\n  };\n  checkPeers();\n\n  const trackDisposeMap = new WeakMap<MediaStreamTrack, () => void>();\n  const runDispose = (dispose?: () => void) => {\n    if (dispose) {\n      dispose();\n    }\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = async (mediaType: string, track: MediaStreamTrack) => {\n    if (disposed) return;\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    if (mediaType === \"faceAudio\") {\n      // XXX experimental\n      runDispose(trackDisposeMap.get(track));\n      const audioCtx = new AudioContext();\n      const trackSource = audioCtx.createMediaStreamSource(stream);\n      await audioCtx.audioWorklet.addModule(\"audio-encoder.js\");\n      const audioEncoder = new AudioWorkletNode(audioCtx, \"audio-encoder\");\n      const topic = await getTopicForMediaType(roomId, \"faceAudio\");\n      const bufList: ArrayBuffer[] = [];\n      audioEncoder.port.onmessage = async (event) => {\n        bufList.push(event.data);\n        if (bufList.length < 40) return;\n        const encrypted = await encryptBufferFromChunks(\n          bufList.splice(0, bufList.length),\n          cryptoKey\n        );\n        myIpfs.pubsub.publish(topic, encrypted);\n      };\n      trackSource.connect(audioEncoder);\n      trackDisposeMap.set(track, () => {\n        audioCtx.close();\n      });\n      return;\n    }\n    if (mediaType === \"faceVideo\") {\n      // XXX experimental\n      runDispose(trackDisposeMap.get(track));\n      const topic = await getTopicForMediaType(roomId, \"faceVideo\");\n      const { getImage } = await videoTrackToImageConverter(track);\n      let faceVideoDisposed = false;\n      const loop = async () => {\n        if (faceVideoDisposed) return;\n        const dataURL = await getImage();\n        if (dataURL) {\n          for await (const encrypted of encryptStringToChunks(\n            dataURL,\n            cryptoKey\n          )) {\n            if (faceVideoDisposed) return;\n            await myIpfs.pubsub.publish(topic, encrypted);\n            await sleep(1000);\n          }\n        }\n        loop();\n      };\n      loop();\n      trackDisposeMap.set(track, () => {\n        faceVideoDisposed = true;\n      });\n      return;\n    }\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    if (disposed) return;\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    if (mediaType === \"faceAudio\" || mediaType === \"faceVideo\") {\n      // XXX experimental\n      runDispose(trackDisposeMap.get(track));\n      return;\n    }\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.sendPc.getSenders();\n      const sender = senders.find((s) => s.track === track);\n      if (sender) {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Connection) => {\n    const senders = conn.sendPc.getSenders();\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective) {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const dispose = async () => {\n    disposed = true;\n    await myIpfs.pubsub.unsubscribe(`${roomTopic} ${myPeerId}`, pubsubHandler);\n    await myIpfs.pubsub.unsubscribe(roomTopic, pubsubHandler);\n    await myIpfs.stop();\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<F extends (...args: any) => any> = ReturnType<\n  F\n> extends Promise<infer T>\n  ? T\n  : never;\n"],"sourceRoot":""}