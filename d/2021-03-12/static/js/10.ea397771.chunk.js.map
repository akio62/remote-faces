{"version":3,"sources":["../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../node_modules/lib0/set.js","../../node_modules/lib0/array.js","../../node_modules/lib0/observable.js","../../node_modules/isomorphic.js/browser.mjs","../../node_modules/lib0/random.js","../../node_modules/lib0/error.js","../../node_modules/lib0/object.js","../../node_modules/lib0/function.js","../../node_modules/lib0/symbol.js","../../node_modules/lib0/pair.js","../../node_modules/lib0/dom.js","../../node_modules/lib0/eventloop.js","../../node_modules/lib0/json.js","../../node_modules/lib0/time.js","../../node_modules/lib0/logging.js","../../node_modules/lib0/iterator.js","../../src/utils/updates.js","../../src/utils/DeleteSet.js","../../src/utils/Doc.js","../../src/utils/UpdateDecoder.js","../../src/utils/UpdateEncoder.js","../../src/utils/encoding.js","../../src/utils/EventHandler.js","../../src/utils/ID.js","../../src/utils/Snapshot.js","../../src/utils/StructStore.js","../../src/utils/Transaction.js","../../src/utils/YEvent.js","../../src/types/AbstractType.js","../../src/types/YArray.js","../../src/types/YMap.js","../../src/types/YText.js","../../src/types/YXmlFragment.js","../../src/types/YXmlElement.js","../../src/types/YXmlEvent.js","../../src/types/YXmlHook.js","../../src/types/YXmlText.js","../../src/structs/AbstractStruct.js","../../src/structs/GC.js","../../src/structs/ContentBinary.js","../../src/structs/ContentDeleted.js","../../src/structs/ContentDoc.js","../../src/structs/ContentEmbed.js","../../src/structs/ContentFormat.js","../../src/structs/ContentJSON.js","../../src/structs/ContentAny.js","../../src/structs/ContentString.js","../../src/structs/ContentType.js","../../src/structs/Item.js","../../src/structs/Skip.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../../node_modules/lib0/math.js","../../node_modules/lib0/map.js","../../node_modules/lib0/binary.js","../../node_modules/lib0/buffer.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","../../node_modules/lib0/string.js","../../node_modules/lib0/environment.js","../../node_modules/lib0/decoding.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../node_modules/lib0/number.js","../../node_modules/lib0/encoding.js","../../node_modules/lib0/conditions.js","../../node_modules/lib0/storage.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","create","Set","last","arr","appendTo","dest","src","from","Array","Observable","this","_observers","map","name","f","set","add","on","_f","off","observers","get","undefined","delete","size","args","array","values","isoCrypto","window","performance","crypto","cryptoRandomBuffer","len","buf","ArrayBuffer","Uint8Array","getRandomValues","Math","ceil","random","uint32","Uint32Array","uuidv4Template","uuidv4","replace","c","toString","s","Error","methodUnimplemented","unexpectedCase","assign","obj","hasProperty","prototype","hasOwnProperty","call","equalFlat","a","b","every","val","callAll","fs","Symbol","Pair","left","right","doc","document","mapToStyleString","DOMParser","m","value","join","createTimeoutClass","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","JSON","stringify","parse","clearFunction","timeoutId","_","getUnixTime","clearTimeout","clearInterval","arg","requestAnimationFrame","cancelAnimationFrame","cancelIdleCallback","Date","now","BOLD","symbol","UNBOLD","BLUE","GREY","GREEN","RED","PURPLE","ORANGE","UNCOLOR","_browserStyleMap","pair","_nodeStyleMap","computeLoggingArgs","env","strBuilder","logArgs","style","constructor","String","Number","styles","currentStyle","dom","unshift","print","console","log","vconsoles","vc","createIterator","time","next","iterator","iteratorMap","fmap","done","lazyStructReaderGenerator","clock","clients","Map","iterateDeletedStructs","transaction","ds","deletes","clientid","structs","store","del","iterateStructs","isDeleted","id","dis","client","midindex","math.floor","mid","midclock","dels","j","sort","math.max","dss","merged","dssI","delsLeft","has","slice","array.appendTo","map.setIfUndefined","createDeleteSet","createDeleteSetFromStructStore","ss","dsitems","struct","deleted","encoder","encoding.writeVarUint","restEncoder","resetDsCurVal","item","writeDsClock","writeDsLen","decoder","numClients","decoding.readVarUint","restDecoder","numberOfDeletes","dsField","readDsClock","readDsLen","unappliedDS","state","getState","clockEnd","index","splice","splitItem","toUint8Array","generateNewClientId","random.uint32","guid","random.uuidv4","gc","gcFilter","meta","autoLoad","clientID","share","_transaction","_transactionCleanups","subdocs","_item","shouldLoad","parent","subdocsLoaded","origin","TypeConstructor","type","t","_integrate","Constr","_map","n","_start","_length","toJSON","array.from","subdoc","destroy","content","Doc","opts","subdocsAdded","subdocsRemoved","emit","eventName","createID","decoding.readUint8","decoding.readVarString","decoding.readAny","buffer.copyUint8Array","decoding.readVarUint8Array","dsCurrVal","diff","keyClockDecoder","decoding.IntDiffOptRleDecoder","clientDecoder","decoding.UintOptRleDecoder","leftClockDecoder","rightClockDecoder","infoDecoder","decoding.RleDecoder","stringDecoder","decoding.StringDecoder","parentInfoDecoder","typeRefDecoder","lenDecoder","read","keyClock","encoding.createEncoder","encoding.toUint8Array","info","encoding.writeUint8","encoding.writeVarString","isYKey","any","encoding.writeAny","encoding.writeVarUint8Array","embed","error.unexpectedCase","keyMap","keyClockEncoder","encoding.IntDiffOptRleEncoder","clientEncoder","encoding.UintOptRleEncoder","leftClockEncoder","rightClockEncoder","infoEncoder","encoding.RleEncoder","stringEncoder","encoding.StringEncoder","parentInfoEncoder","typeRefEncoder","lenEncoder","encoding.writeUint8Array","write","_sm","sm","getStateVector","entries","startNewStructs","writeClient","firstStruct","clientRefs","map.create","numOfStateUpdates","numberOfStructs","refs","readClient","readInfo","binary.BITS5","readLen","cantCopyParentInfo","binary.BIT7","binary.BIT8","readLeftID","readRightID","readParentInfo","readString","binary.BIT6","clientsStructRefs","stack","clientsStructRefsIds","getNextStructTarget","nextStructsTarget","pop","curStructsTarget","restStructs","missingSV","updateMissingSv","mclock","stackHead","addStackToRestSS","unapplicableItems","offset","missing","getMissing","structRefs","integrate","update","ydoc","transactionOrigin","structDecoder","retry","pending","pendingStructs","dsRest","pendingDs","pendingDSUpdate","decoding.createDecoder","dsRest2","YDecoder","applyUpdate","writeStateAsUpdate","targetStateVector","encodeStateAsUpdate","encodedTargetStateVector","updates","encodeStateAsUpdateV2","ssLength","decodedState","l","createEventHandler","addEventHandlerListener","eventHandler","removeEventHandlerListener","g","error","arg0","arg1","f.callAll","compareIDs","sv","createSnapshot","isVisible","snapshot","splitSnapshotAffectedStructs","set.create","getItemCleanStart","lastStruct","getItem","findIndexCleanStart","getItemCleanEnd","clockStart","local","deleteSet","beforeState","afterState","changed","changedParentTypes","_mergeStructs","map.any","writeStructsFromTransaction","parentSub","tryToMergeWithLeft","pos","mergeWith","deleteItems","di","deleteItem","endDeleteItemClock","si","keep","math.min","cleanupTransactions","transactionCleanups","mergeStructs","subs","itemtype","_callObserver","events","event","currentTarget","event1","event2","path","_dEH","beforeClock","firstChangePos","replacedStructPos","logging.print","logging.ORANGE","logging.BOLD","logging.UNBOLD","logging.RED","loaded","added","removed","initialCall","filterSkips","gen","curr","currClient","startClock","written","clientStructs","sliceStruct","leftItem","rightOrigin","YEncoder","updateDecoders","lazyStructDecoders","currWrite","updateEncoder","lazyStructEncoder","dec","dec1","dec2","clockDiff","currDecoder","firstClient","lazyStructWriter","reader","svClock","lazyWriter","partStructs","_changes","getPathTo","changes","delta","lastOp","packOp","adds","insert","concat","getContent","retain","action","oldValue","prev","array.last","child","globalSearchMarkerTimestamp","p","marker","timestamp","overwriteMarker","yarray","_searchMarker","reduce","math.abs","pindex","refreshMarkerTimestamp","countable","searchMarker","pm","markPosition","changedType","_eH","y","error.methodUnimplemented","parentSubs","typeListSlice","start","end","cs","typeListToArray","typeListForEach","typeListMap","result","typeListGet","typeListInsertGenericsAfter","referenceItem","ownClientId","jsonContent","packJsonContent","lastId","Boolean","typeListInsertGenerics","startIndex","startLength","error.create","typeMapDelete","typeMapSet","typeMapGet","typeMapGetAll","res","entry","_prelimContent","YArray","toArray","el","clone","currentContent","currentContentIndex","writeTypeRef","YArrayRefID","items","ymap","keysChanged","YMap","v","iterator.iteratorMap","typeMapHas","YMapRefID","object.equalFlat","currentAttributes","updateCurrentAttributes","findNextPosition","count","findPosition","insertNegatedAttributes","currPos","negatedAttributes","forward","nextFormat","format","minimizeAttributeChanges","attributes","insertAttributes","currentVal","insertText","text","getLength","formatText","attr","newlines","cleanupFormattingGap","startAttributes","endAttributes","cleanups","startAttrs","map.copy","ytext","_delta","childListChanged","sub","oldAttributes","deleteLen","addOp","op","str","curVal","string","_pending","e","YText","applyDelta","toDelta","foundFormattingItem","afterClock","attrs","cleanupContextlessFormattingGap","sanitize","ins","prevSnapshot","computeYChange","ops","packStr","addAttributes","cur","user","k","insertEmbed","attributeName","removeAttribute","attributeValue","setAttribute","YTextRefID","root","_filter","_root","_currentNode","_firstCall","YXmlFragment","query","toUpperCase","element","nodeName","xml","_document","hooks","binding","fragment","createDocumentFragment","_createAssociation","xmlType","insertBefore","toDOM","ref","refItem","pc","findIndex","YXmlFragmentRefID","first","_first","_prelimAttrs","YXmlElement","getAttributes","stringBuilder","keysLen","toLocaleLowerCase","attrsString","createElement","yxml","appendChild","YXmlElementRefID","writeKey","attributesChanged","hookName","YXmlHook","hook","createDom","YXmlHookRefID","YXmlText","createTextNode","nestedNodes","node","YXmlTextRefID","encodingRef","writeInfo","writeLen","ContentBinary","writeBuf","ContentDeleted","markDeleted","ContentDoc","writeString","writeAny","ContentEmbed","writeJSON","ContentFormat","ContentJSON","ContentAny","split","ContentString","firstCharCode","charCodeAt","typeRefs","readKey","ContentType","_copy","_write","rightItem","redone","isCountable","binary.BIT2","binary.BIT3","parentItem","Item","o","conflictingItems","itemsBeforeOrigin","clear","r","parentGCd","newStruct","replaceStruct","getRef","writeLeftID","writeRightID","ykey","writeParentInfo","isMarked","binary.BIT4","binary.BIT1","doKeep","doDelete","contentRefs","readBuf","readJSON","readTypeRef","readAny","_toPropertyKey","input","hint","prim","toPrimitive","TypeError","floor","abs","round","imul","log10","min","log2","sqrt","max","exp10","isNaN","pow","exp","isNegativeZero","sign","copy","setIfUndefined","createT","BIT1","BIT2","BIT3","BIT4","BIT6","BIT7","BIT8","BITS5","BITS6","BITS7","BITS8","BITS31","createUint8ArrayFromLen","createUint8ArrayViewFromArrayBuffer","buffer","byteOffset","copyUint8Array","uint8Array","newBuf","byteLength","property","receiver","Reflect","base","getPrototypeOf","desc","fromCharCode","trimLeftRegex","fromCodePoint","fromCamelCaseRegex","fromCamelCase","separator","trimLeft","match","toLowerCase","utf8TextDecoder","TextEncoder","TextDecoder","fatal","ignoreBOM","decode","params","isNode","process","release","test","isBrowser","navigator","platform","computeParams","pargs","argv","currParamName","parg","location","search","kv","getVariable","conditions","storage","hasParam","Decoder","createDecoder","hasContent","readUint8Array","view","readVarUint8Array","readVarUint","readUint8","num","binary","readVarInt","readVarString","remainingLen","encodedString","nextLen","bytes","subarray","decodeURIComponent","escape","readFromDataView","dv","DataView","readAnyLookupTable","getFloat32","getFloat64","getBigInt64","RleDecoder","UintOptRleDecoder","isNegative","math","IntDiffOptRleDecoder","hasCount","StringDecoder","spos","_objectWithoutProperties","excluded","sourceKeys","indexOf","sourceSymbolKeys","propertyIsEnumerable","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","isFinite","Encoder","cpos","cbuf","bufs","createEncoder","uint8arr","curPos","d","bufferLen","writeUint8","writeVarUint","writeVarInt","writeVarString","unescape","encodeURIComponent","codePointAt","writeBinaryEncoder","append","writeUint8Array","leftCopyLen","rightCopyLen","writeVarUint8Array","writeOnDataView","verifyLen","dview","floatTestBed","data","number","setFloat32","writeFloat32","setFloat64","writeFloat64","setBigInt64","writeBigInt64","RleEncoder","writer","w","flushUintOptRleEncoder","UintOptRleEncoder","flushIntDiffOptRleEncoder","encodedDiff","IntDiffOptRleEncoder","StringEncoder","sarr","lensE","undefinedToNull","_localStorage","localStorage","varStorage"],"mappings":"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","file":"static/js/10.ea397771.chunk.js","sourcesContent":["import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nexport const create = () => new Set()\n\n/**\n * @template T\n * @param {Set<T>} set\n * @return {Array<T>}\n */\nexport const toArray = set => Array.from(set)\n","/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => arr.every(f)\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => arr.some(f)\n\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => arr.reduce((acc, val) => acc.concat(val), [])\n","/**\n * Observable class prototype.\n *\n * @module observable\n */\n\nimport * as map from './map.js'\nimport * as set from './set.js'\nimport * as array from './array.js'\n\n/**\n * Handles named events.\n *\n * @template N\n */\nexport class Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = map.create()\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    map.setIfUndefined(this._observers, name, set.create).add(f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f)\n      f(...args)\n    }\n    this.on(name, _f)\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name)\n    if (observers !== undefined) {\n      observers.delete(f)\n      if (observers.size === 0) {\n        this._observers.delete(name)\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return array.from((this._observers.get(name) || map.create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = map.create()\n  }\n}\n","/* eslint-env browser */\nexport const performance = typeof window === 'undefined' ? null : (typeof window.performance !== 'undefined' && window.performance) || null\n\nconst isoCrypto = typeof crypto === 'undefined' ? null : crypto\n\n/**\n * @type {function(number):ArrayBuffer}\n */\nexport const cryptoRandomBuffer = isoCrypto !== null\n  ? len => {\n    // browser\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    isoCrypto.getRandomValues(arr)\n    return buf\n  }\n  : len => {\n    // polyfill\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    for (let i = 0; i < len; i++) {\n      arr[i] = Math.ceil((Math.random() * 0xFFFFFFFF) >>> 0)\n    }\n    return buf\n  }\n","\n/**\n * Isomorphic module for true random numbers / buffers / uuids.\n *\n * Attention: falls back to Math.random if the browser does not support crypto.\n *\n * @module random\n */\n\nimport * as math from './math.js'\nimport { cryptoRandomBuffer } from './isomorphic.js'\n\nexport const rand = Math.random\n\n/* istanbul ignore next */\nexport const uint32 = () => new Uint32Array(cryptoRandomBuffer(4))[0]\n\n/**\n * @template T\n * @param {Array<T>} arr\n * @return {T}\n */\nexport const oneOf = arr => arr[math.floor(rand() * arr.length)]\n\n// @ts-ignore\nconst uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11\nexport const uuidv4 = () => uuidv4Template.replace(/[018]/g, /** @param {number} c */ c =>\n  (c ^ uint32() & 15 >> c / 4).toString(16)\n)\n","/**\n * Error helpers.\n *\n * @module error\n */\n\n/**\n * @param {string} s\n * @return {Error}\n */\n/* istanbul ignore next */\nexport const create = s => new Error(s)\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* istanbul ignore next */\nexport const methodUnimplemented = () => {\n  throw create('Method unimplemented')\n}\n\n/**\n * @throws {Error}\n * @return {never}\n */\n/* istanbul ignore next */\nexport const unexpectedCase = () => {\n  throw create('Unexpected case')\n}\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (length(a) === length(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((a instanceof Array && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n","/**\n * Utility module to work with EcmaScript Symbols.\n *\n * @module symbol\n */\n\n/**\n * Return fresh symbol.\n *\n * @return {Symbol}\n */\nexport const create = Symbol\n\n/**\n * @param {any} s\n * @return {boolean}\n */\nexport const isSymbol = s => typeof s === 'symbol'\n","/**\n * Working with value pairs.\n *\n * @module pair\n */\n\n/**\n * @template L,R\n */\nexport class Pair {\n  /**\n   * @param {L} left\n   * @param {R} right\n   */\n  constructor (left, right) {\n    this.left = left\n    this.right = right\n  }\n}\n\n/**\n * @template L,R\n * @param {L} left\n * @param {R} right\n * @return {Pair<L,R>}\n */\nexport const create = (left, right) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {R} right\n * @param {L} left\n * @return {Pair<L,R>}\n */\nexport const createReversed = (right, left) => new Pair(left, right)\n\n/**\n * @template L,R\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):any} f\n */\nexport const forEach = (arr, f) => arr.forEach(p => f(p.left, p.right))\n\n/**\n * @template L,R,X\n * @param {Array<Pair<L,R>>} arr\n * @param {function(L, R):X} f\n * @return {Array<X>}\n */\nexport const map = (arr, f) => arr.map(p => f(p.left, p.right))\n","/* eslint-env browser */\n\n/**\n * Utility module to work with the DOM.\n *\n * @module dom\n */\n\nimport * as pair from './pair.js'\nimport * as map from './map.js'\n\n/* istanbul ignore next */\n/**\n * @type {Document}\n */\nexport const doc = /** @type {Document} */ (typeof document !== 'undefined' ? document : {})\n\n/**\n * @param {string} name\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const createElement = name => doc.createElement(name)\n\n/**\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const createDocumentFragment = () => doc.createDocumentFragment()\n\n/**\n * @param {string} text\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const createTextNode = text => doc.createTextNode(text)\n\n/* istanbul ignore next */\nexport const domParser = /** @type {DOMParser} */ (typeof DOMParser !== 'undefined' ? new DOMParser() : null)\n\n/**\n * @param {HTMLElement} el\n * @param {string} name\n * @param {Object} opts\n */\n/* istanbul ignore next */\nexport const emitCustomEvent = (el, name, opts) => el.dispatchEvent(new CustomEvent(name, opts))\n\n/**\n * @param {Element} el\n * @param {Array<pair.Pair<string,string|boolean>>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributes = (el, attrs) => {\n  pair.forEach(attrs, (key, value) => {\n    if (value === false) {\n      el.removeAttribute(key)\n    } else if (value === true) {\n      el.setAttribute(key, '')\n    } else {\n      // @ts-ignore\n      el.setAttribute(key, value)\n    }\n  })\n  return el\n}\n\n/**\n * @param {Element} el\n * @param {Map<string, string>} attrs Array of key-value pairs\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const setAttributesMap = (el, attrs) => {\n  attrs.forEach((value, key) => { el.setAttribute(key, value) })\n  return el\n}\n\n/**\n * @param {Array<Node>|HTMLCollection} children\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const fragment = children => {\n  const fragment = createDocumentFragment()\n  for (let i = 0; i < children.length; i++) {\n    appendChild(fragment, children[i])\n  }\n  return fragment\n}\n\n/**\n * @param {Element} parent\n * @param {Array<Node>} nodes\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const append = (parent, nodes) => {\n  appendChild(parent, fragment(nodes))\n  return parent\n}\n\n/**\n * @param {HTMLElement} el\n */\n/* istanbul ignore next */\nexport const remove = el => el.remove()\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const addEventListener = (el, name, f) => el.addEventListener(name, f)\n\n/**\n * @param {EventTarget} el\n * @param {string} name\n * @param {EventListener} f\n */\n/* istanbul ignore next */\nexport const removeEventListener = (el, name, f) => el.removeEventListener(name, f)\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const addEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => addEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {Node} node\n * @param {Array<pair.Pair<string,EventListener>>} listeners\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const removeEventListeners = (node, listeners) => {\n  pair.forEach(listeners, (name, f) => removeEventListener(node, name, f))\n  return node\n}\n\n/**\n * @param {string} name\n * @param {Array<pair.Pair<string,string>|pair.Pair<string,boolean>>} attrs Array of key-value pairs\n * @param {Array<Node>} children\n * @return {Element}\n */\n/* istanbul ignore next */\nexport const element = (name, attrs = [], children = []) =>\n  append(setAttributes(createElement(name), attrs), children)\n\n/**\n * @param {number} width\n * @param {number} height\n */\n/* istanbul ignore next */\nexport const canvas = (width, height) => {\n  const c = /** @type {HTMLCanvasElement} */ (createElement('canvas'))\n  c.height = height\n  c.width = width\n  return c\n}\n\n/**\n * @param {string} t\n * @return {Text}\n */\n/* istanbul ignore next */\nexport const text = createTextNode\n\n/**\n * @param {pair.Pair<string,string>} pair\n */\n/* istanbul ignore next */\nexport const pairToStyleString = pair => `${pair.left}:${pair.right};`\n\n/**\n * @param {Array<pair.Pair<string,string>>} pairs\n * @return {string}\n */\n/* istanbul ignore next */\nexport const pairsToStyleString = pairs => pairs.map(pairToStyleString).join('')\n\n/**\n * @param {Map<string,string>} m\n * @return {string}\n */\n/* istanbul ignore next */\nexport const mapToStyleString = m => map.map(m, (value, key) => `${key}:${value};`).join('')\n\n/**\n * @todo should always query on a dom element\n *\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {HTMLElement | null}\n */\n/* istanbul ignore next */\nexport const querySelector = (el, query) => el.querySelector(query)\n\n/**\n * @param {HTMLElement|ShadowRoot} el\n * @param {string} query\n * @return {NodeListOf<HTMLElement>}\n */\n/* istanbul ignore next */\nexport const querySelectorAll = (el, query) => el.querySelectorAll(query)\n\n/**\n * @param {string} id\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const getElementById = id => /** @type {HTMLElement} */ (doc.getElementById(id))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nconst _parse = html => domParser.parseFromString(`<html><body>${html}</body></html>`, 'text/html').body\n\n/**\n * @param {string} html\n * @return {DocumentFragment}\n */\n/* istanbul ignore next */\nexport const parseFragment = html => fragment(/** @type {any} */ (_parse(html).childNodes))\n\n/**\n * @param {string} html\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const parseElement = html => /** @type HTMLElement */ (_parse(html).firstElementChild)\n\n/**\n * @param {HTMLElement} oldEl\n * @param {HTMLElement|DocumentFragment} newEl\n */\n/* istanbul ignore next */\nexport const replaceWith = (oldEl, newEl) => oldEl.replaceWith(newEl)\n\n/**\n * @param {HTMLElement} parent\n * @param {HTMLElement} el\n * @param {Node|null} ref\n * @return {HTMLElement}\n */\n/* istanbul ignore next */\nexport const insertBefore = (parent, el, ref) => parent.insertBefore(el, ref)\n\n/**\n * @param {Node} parent\n * @param {Node} child\n * @return {Node}\n */\n/* istanbul ignore next */\nexport const appendChild = (parent, child) => parent.appendChild(child)\n\nexport const ELEMENT_NODE = doc.ELEMENT_NODE\nexport const TEXT_NODE = doc.TEXT_NODE\nexport const CDATA_SECTION_NODE = doc.CDATA_SECTION_NODE\nexport const COMMENT_NODE = doc.COMMENT_NODE\nexport const DOCUMENT_NODE = doc.DOCUMENT_NODE\nexport const DOCUMENT_TYPE_NODE = doc.DOCUMENT_TYPE_NODE\nexport const DOCUMENT_FRAGMENT_NODE = doc.DOCUMENT_FRAGMENT_NODE\n\n/**\n * @param {any} node\n * @param {number} type\n */\nexport const checkNodeType = (node, type) => node.nodeType === type\n\n/**\n * @param {Node} parent\n * @param {HTMLElement} child\n */\nexport const isParentOf = (parent, child) => {\n  let p = child.parentNode\n  while (p && p !== parent) {\n    p = p.parentNode\n  }\n  return p === parent\n}\n","/* global requestIdleCallback, requestAnimationFrame, cancelIdleCallback, cancelAnimationFrame */\n\n/**\n * Utility module to work with EcmaScript's event loop.\n *\n * @module eventloop\n */\n\n/**\n * @type {Array<function>}\n */\nlet queue = []\n\nconst _runQueue = () => {\n  for (let i = 0; i < queue.length; i++) {\n    queue[i]()\n  }\n  queue = []\n}\n\n/**\n * @param {function():void} f\n */\nexport const enqueue = f => {\n  queue.push(f)\n  if (queue.length === 1) {\n    setTimeout(_runQueue, 0)\n  }\n}\n\n/**\n * @typedef {Object} TimeoutObject\n * @property {function} TimeoutObject.destroy\n */\n\n/**\n * @param {function(number):void} clearFunction\n */\nconst createTimeoutClass = clearFunction => class TT {\n  /**\n   * @param {number} timeoutId\n   */\n  constructor (timeoutId) {\n    this._ = timeoutId\n  }\n\n  destroy () {\n    clearFunction(this._)\n  }\n}\n\nconst Timeout = createTimeoutClass(clearTimeout)\n\n/**\n * @param {number} timeout\n * @param {function} callback\n * @return {TimeoutObject}\n */\nexport const timeout = (timeout, callback) => new Timeout(setTimeout(callback, timeout))\n\nconst Interval = createTimeoutClass(clearInterval)\n\n/**\n * @param {number} timeout\n * @param {function} callback\n * @return {TimeoutObject}\n */\nexport const interval = (timeout, callback) => new Interval(setInterval(callback, timeout))\n\n/* istanbul ignore next */\nexport const Animation = createTimeoutClass(arg => typeof requestAnimationFrame !== 'undefined' && cancelAnimationFrame(arg))\n\n/* istanbul ignore next */\n/**\n * @param {function(number):void} cb\n * @return {TimeoutObject}\n */\nexport const animationFrame = cb => typeof requestAnimationFrame === 'undefined' ? timeout(0, cb) : new Animation(requestAnimationFrame(cb))\n\n/* istanbul ignore next */\n// @ts-ignore\nconst Idle = createTimeoutClass(arg => typeof cancelIdleCallback !== 'undefined' && cancelIdleCallback(arg))\n\n/* istanbul ignore next */\n/**\n * Note: this is experimental and is probably only useful in browsers.\n *\n * @param {function} cb\n * @return {TimeoutObject}\n */\n// @ts-ignore\nexport const idleCallback = cb => typeof requestIdleCallback !== 'undefined' ? new Idle(requestIdleCallback(cb)) : timeout(1000, cb)\n\n/**\n * @param {number} timeout Timeout of the debounce action\n * @return {function(function():void):void}\n */\nexport const createDebouncer = timeout => {\n  let timer = -1\n  return f => {\n    clearTimeout(timer)\n    if (f) {\n      timer = /** @type {any} */ (setTimeout(f, timeout))\n    }\n  }\n}\n","/**\n * JSON utility functions.\n *\n * @module json\n */\n\n/**\n * Transform JavaScript object to JSON.\n *\n * @param {any} object\n * @return {string}\n */\nexport const stringify = JSON.stringify\n\n/**\n * Parse JSON object.\n *\n * @param {string} json\n * @return {any}\n */\nexport const parse = JSON.parse\n","/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* istanbul ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n","/**\n * Isomorphic logging module with support for colors!\n *\n * @module logging\n */\n\nimport * as env from './environment.js'\nimport * as symbol from './symbol.js'\nimport * as pair from './pair.js'\nimport * as dom from './dom.js'\nimport * as json from './json.js'\nimport * as map from './map.js'\nimport * as eventloop from './eventloop.js'\nimport * as math from './math.js'\nimport * as time from './time.js'\nimport * as func from './function.js'\n\nexport const BOLD = symbol.create()\nexport const UNBOLD = symbol.create()\nexport const BLUE = symbol.create()\nexport const GREY = symbol.create()\nexport const GREEN = symbol.create()\nexport const RED = symbol.create()\nexport const PURPLE = symbol.create()\nexport const ORANGE = symbol.create()\nexport const UNCOLOR = symbol.create()\n\n/**\n * @type {Object<Symbol,pair.Pair<string,string>>}\n */\nconst _browserStyleMap = {\n  [BOLD]: pair.create('font-weight', 'bold'),\n  [UNBOLD]: pair.create('font-weight', 'normal'),\n  [BLUE]: pair.create('color', 'blue'),\n  [GREEN]: pair.create('color', 'green'),\n  [GREY]: pair.create('color', 'grey'),\n  [RED]: pair.create('color', 'red'),\n  [PURPLE]: pair.create('color', 'purple'),\n  [ORANGE]: pair.create('color', 'orange'), // not well supported in chrome when debugging node with inspector - TODO: deprecate\n  [UNCOLOR]: pair.create('color', 'black')\n}\n\nconst _nodeStyleMap = {\n  [BOLD]: '\\u001b[1m',\n  [UNBOLD]: '\\u001b[2m',\n  [BLUE]: '\\x1b[34m',\n  [GREEN]: '\\x1b[32m',\n  [GREY]: '\\u001b[37m',\n  [RED]: '\\x1b[31m',\n  [PURPLE]: '\\x1b[35m',\n  [ORANGE]: '\\x1b[38;5;208m',\n  [UNCOLOR]: '\\x1b[0m'\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<string|object|number>}\n */\nconst computeBrowserLoggingArgs = args => {\n  const strBuilder = []\n  const styles = []\n  const currentStyle = map.create()\n  /**\n   * @type {Array<string|Object|number>}\n   */\n  let logArgs = []\n  // try with formatting until we find something unsupported\n  let i = 0\n\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        const style = dom.mapToStyleString(currentStyle)\n        if (i > 0 || style.length > 0) {\n          strBuilder.push('%c' + arg)\n          styles.push(style)\n        } else {\n          strBuilder.push(arg)\n        }\n      } else {\n        break\n      }\n    }\n  }\n\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs = styles\n    logArgs.unshift(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<string|object|number>}\n */\nconst computeNodeLoggingArgs = args => {\n  const strBuilder = []\n  const logArgs = []\n\n  // try with formatting until we find something unsupported\n  let i = 0\n\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _nodeStyleMap[arg]\n    if (style !== undefined) {\n      strBuilder.push(style)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        strBuilder.push(arg)\n      } else {\n        break\n      }\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    strBuilder.push('\\x1b[0m')\n    logArgs.push(strBuilder.join(''))\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    /* istanbul ignore else */\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg)\n    }\n  }\n  return logArgs\n}\n\n/* istanbul ignore next */\nconst computeLoggingArgs = env.isNode ? computeNodeLoggingArgs : computeBrowserLoggingArgs\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const print = (...args) => {\n  console.log(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.print(args))\n}\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const warn = (...args) => {\n  console.warn(...computeLoggingArgs(args))\n  args.unshift(ORANGE)\n  vconsoles.forEach(vc => vc.print(args))\n}\n\n/* istanbul ignore next */\n/**\n * @param {Error} err\n */\nexport const printError = err => {\n  console.error(err)\n  vconsoles.forEach(vc => vc.printError(err))\n}\n\n/* istanbul ignore next */\n/**\n * @param {string} url image location\n * @param {number} height height of the image in pixel\n */\nexport const printImg = (url, height) => {\n  if (env.isBrowser) {\n    console.log('%c                      ', `font-size: ${height}px; background-size: contain; background-repeat: no-repeat; background-image: url(${url})`)\n    // console.log('%c                ', `font-size: ${height}x; background: url(${url}) no-repeat;`)\n  }\n  vconsoles.forEach(vc => vc.printImg(url, height))\n}\n\n/* istanbul ignore next */\n/**\n * @param {string} base64\n * @param {number} height\n */\nexport const printImgBase64 = (base64, height) => printImg(`data:image/gif;base64,${base64}`, height)\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const group = (...args) => {\n  console.group(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.group(args))\n}\n\n/**\n * @param {Array<string|Symbol|Object|number>} args\n */\nexport const groupCollapsed = (...args) => {\n  console.groupCollapsed(...computeLoggingArgs(args))\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.groupCollapsed(args))\n}\n\nexport const groupEnd = () => {\n  console.groupEnd()\n  /* istanbul ignore next */\n  vconsoles.forEach(vc => vc.groupEnd())\n}\n\n/* istanbul ignore next */\n/**\n * @param {function():Node} createNode\n */\nexport const printDom = createNode =>\n  vconsoles.forEach(vc => vc.printDom(createNode()))\n\n/* istanbul ignore next */\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} height\n */\nexport const printCanvas = (canvas, height) => printImg(canvas.toDataURL(), height)\n\nexport const vconsoles = new Set()\n\n/* istanbul ignore next */\n/**\n * @param {Array<string|Symbol|Object|number>} args\n * @return {Array<Element>}\n */\nconst _computeLineSpans = args => {\n  const spans = []\n  const currentStyle = new Map()\n  // try with formatting until we find something unsupported\n  let i = 0\n  for (; i < args.length; i++) {\n    const arg = args[i]\n    // @ts-ignore\n    const style = _browserStyleMap[arg]\n    if (style !== undefined) {\n      currentStyle.set(style.left, style.right)\n    } else {\n      if (arg.constructor === String || arg.constructor === Number) {\n        // @ts-ignore\n        const span = dom.element('span', [pair.create('style', dom.mapToStyleString(currentStyle))], [dom.text(arg)])\n        if (span.innerHTML === '') {\n          span.innerHTML = '&nbsp;'\n        }\n        spans.push(span)\n      } else {\n        break\n      }\n    }\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    let content = args[i]\n    if (!(content instanceof Symbol)) {\n      if (content.constructor !== String && content.constructor !== Number) {\n        content = ' ' + json.stringify(content) + ' '\n      }\n      spans.push(dom.element('span', [], [dom.text(/** @type {string} */ (content))]))\n    }\n  }\n  return spans\n}\n\nconst lineStyle = 'font-family:monospace;border-bottom:1px solid #e2e2e2;padding:2px;'\n\n/* istanbul ignore next */\nexport class VConsole {\n  /**\n   * @param {Element} dom\n   */\n  constructor (dom) {\n    this.dom = dom\n    /**\n     * @type {Element}\n     */\n    this.ccontainer = this.dom\n    this.depth = 0\n    vconsoles.add(this)\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   * @param {boolean} collapsed\n   */\n  group (args, collapsed = false) {\n    eventloop.enqueue(() => {\n      const triangleDown = dom.element('span', [pair.create('hidden', collapsed), pair.create('style', 'color:grey;font-size:120%;')], [dom.text('▼')])\n      const triangleRight = dom.element('span', [pair.create('hidden', !collapsed), pair.create('style', 'color:grey;font-size:125%;')], [dom.text('▶')])\n      const content = dom.element('div', [pair.create('style', `${lineStyle};padding-left:${this.depth * 10}px`)], [triangleDown, triangleRight, dom.text(' ')].concat(_computeLineSpans(args)))\n      const nextContainer = dom.element('div', [pair.create('hidden', collapsed)])\n      const nextLine = dom.element('div', [], [content, nextContainer])\n      dom.append(this.ccontainer, [nextLine])\n      this.ccontainer = nextContainer\n      this.depth++\n      // when header is clicked, collapse/uncollapse container\n      dom.addEventListener(content, 'click', event => {\n        nextContainer.toggleAttribute('hidden')\n        triangleDown.toggleAttribute('hidden')\n        triangleRight.toggleAttribute('hidden')\n      })\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  groupCollapsed (args) {\n    this.group(args, true)\n  }\n\n  groupEnd () {\n    eventloop.enqueue(() => {\n      if (this.depth > 0) {\n        this.depth--\n        // @ts-ignore\n        this.ccontainer = this.ccontainer.parentElement.parentElement\n      }\n    })\n  }\n\n  /**\n   * @param {Array<string|Symbol|Object|number>} args\n   */\n  print (args) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [dom.element('div', [pair.create('style', `${lineStyle};padding-left:${this.depth * 10}px`)], _computeLineSpans(args))])\n    })\n  }\n\n  /**\n   * @param {Error} err\n   */\n  printError (err) {\n    this.print([RED, BOLD, err.toString()])\n  }\n\n  /**\n   * @param {string} url\n   * @param {number} height\n   */\n  printImg (url, height) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [dom.element('img', [pair.create('src', url), pair.create('height', `${math.round(height * 1.5)}px`)])])\n    })\n  }\n\n  /**\n   * @param {Node} node\n   */\n  printDom (node) {\n    eventloop.enqueue(() => {\n      dom.append(this.ccontainer, [node])\n    })\n  }\n\n  destroy () {\n    eventloop.enqueue(() => {\n      vconsoles.delete(this)\n    })\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @param {Element} dom\n */\nexport const createVConsole = dom => new VConsole(dom)\n\nconst loggingColors = [GREEN, PURPLE, ORANGE, BLUE]\nlet nextColor = 0\nlet lastLoggingTime = time.getUnixTime()\n\n/**\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = moduleName => {\n  const color = loggingColors[nextColor]\n  const debugRegexVar = env.getVariable('log')\n  const doLogging = debugRegexVar !== null && (debugRegexVar === '*' || debugRegexVar === 'true' || new RegExp(debugRegexVar, 'gi').test(moduleName))\n  nextColor = (nextColor + 1) % loggingColors.length\n  moduleName += ': '\n\n  return !doLogging ? func.nop : (...args) => {\n    const timeNow = time.getUnixTime()\n    const timeDiff = timeNow - lastLoggingTime\n    lastLoggingTime = timeNow\n    print(color, moduleName, UNCOLOR, ...args.map(arg => (typeof arg === 'string' || typeof arg === 'symbol') ? arg : JSON.stringify(arg)), color, ' +' + timeDiff + 'ms')\n  }\n}\n","/**\n * Utility module to create and manipulate Iterators.\n *\n * @module iterator\n */\n\n/**\n * @template T,R\n * @param {Iterator<T>} iterator\n * @param {function(T):R} f\n * @return {IterableIterator<R>}\n */\nexport const mapIterator = (iterator, f) => ({\n  /**\n   * @param {function(T):R} f\n   */\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next () {\n    const r = iterator.next()\n    return { value: r.done ? undefined : f(r.value), done: r.done }\n  }\n})\n\n/**\n * @template T\n * @param {function():IteratorResult<T>} next\n * @return {IterableIterator<T>}\n */\nexport const createIterator = next => ({\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this\n  },\n  // @ts-ignore\n  next\n})\n\n/**\n * @template T\n * @param {Iterator<T>} iterator\n * @param {function(T):boolean} filter\n */\nexport const iteratorFilter = (iterator, filter) => createIterator(() => {\n  let res\n  do {\n    res = iterator.next()\n  } while (!res.done && !filter(res.value))\n  return res\n})\n\n/**\n * @template T,M\n * @param {Iterator<T>} iterator\n * @param {function(T):M} fmap\n */\nexport const iteratorMap = (iterator, fmap) => createIterator(() => {\n  const { done, value } = iterator.next()\n  return { done, value: done ? undefined : fmap(value) }\n})\n","\nimport * as binary from 'lib0/binary.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as logging from 'lib0/logging.js'\nimport * as math from 'lib0/math.js'\nimport {\n  createID,\n  readItemContent,\n  readDeleteSet,\n  writeDeleteSet,\n  Skip,\n  mergeDeleteSets,\n  DSEncoderV1,\n  DSEncoderV2,\n  decodeStateVector,\n  Item, GC, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2 // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n */\nfunction * lazyStructReaderGenerator (decoder) {\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder)\n    const client = decoder.readClient()\n    let clock = decoding.readVarUint(decoder.restDecoder)\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo()\n      // @todo use switch instead of ifs\n      if (info === 10) {\n        const len = decoding.readVarUint(decoder.restDecoder)\n        yield new Skip(createID(client, clock), len)\n        clock += len\n      } else if ((binary.BITS5 & info) !== 0) {\n        const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n        // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n        // and we read the next string as parentYKey.\n        // It indicates how we store/retrieve parent from `y.share`\n        // @type {string|null}\n        const struct = new Item(\n          createID(client, clock),\n          null, // left\n          (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n          null, // right\n          (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n          // @ts-ignore Force writing a string here.\n          cantCopyParentInfo ? (decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID()) : null, // parent\n          cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n          readItemContent(decoder, info) // item content\n        )\n        yield struct\n        clock += struct.length\n      } else {\n        const len = decoder.readLen()\n        yield new GC(createID(client, clock), len)\n        clock += len\n      }\n    }\n  }\n}\n\nexport class LazyStructReader {\n  /**\n   * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n   * @param {boolean} filterSkips\n   */\n  constructor (decoder, filterSkips) {\n    this.gen = lazyStructReaderGenerator(decoder)\n    /**\n     * @type {null | Item | Skip | GC}\n     */\n    this.curr = null\n    this.done = false\n    this.filterSkips = filterSkips\n    this.next()\n  }\n\n  /**\n   * @return {Item | GC | Skip |null}\n   */\n  next () {\n    // ignore \"Skip\" structs\n    do {\n      this.curr = this.gen.next().value || null\n    } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip)\n    return this.curr\n  }\n}\n\n/**\n * @param {Uint8Array} update\n *\n */\nexport const logUpdate = update => logUpdateV2(update, UpdateDecoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV2 | typeof UpdateDecoderV1} [YDecoder]\n *\n */\nexport const logUpdateV2 = (update, YDecoder = UpdateDecoderV2) => {\n  const structs = []\n  const updateDecoder = new YDecoder(decoding.createDecoder(update))\n  const lazyDecoder = new LazyStructReader(updateDecoder, false)\n  for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {\n    structs.push(curr)\n  }\n  logging.print('Structs: ', structs)\n  const ds = readDeleteSet(updateDecoder)\n  logging.print('DeleteSet: ', ds)\n}\n\nexport class LazyStructWriter {\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  constructor (encoder) {\n    this.currClient = 0\n    this.startClock = 0\n    this.written = 0\n    this.encoder = encoder\n    /**\n     * We want to write operations lazily, but also we need to know beforehand how many operations we want to write for each client.\n     *\n     * This kind of meta-information (#clients, #structs-per-client-written) is written to the restEncoder.\n     *\n     * We fragment the restEncoder and store a slice of it per-client until we know how many clients there are.\n     * When we flush (toUint8Array) we write the restEncoder using the fragments and the meta-information.\n     *\n     * @type {Array<{ written: number, restEncoder: Uint8Array }>}\n     */\n    this.clientStructs = []\n  }\n}\n\n/**\n * @param {Array<Uint8Array>} updates\n * @return {Uint8Array}\n */\nexport const mergeUpdates = updates => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof DSEncoderV1 | typeof DSEncoderV2} YEncoder\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {Uint8Array}\n */\nexport const encodeStateVectorFromUpdateV2 = (update, YEncoder = DSEncoderV2, YDecoder = UpdateDecoderV2) => {\n  const encoder = new YEncoder()\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), true)\n  let curr = updateDecoder.curr\n  if (curr !== null) {\n    let size = 1\n    let currClient = curr.id.client\n    let currClock = curr.id.clock\n    let stopCounting = false\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        size++\n        // We found a new client\n        // write what we have to the encoder\n        encoding.writeVarUint(encoder.restEncoder, currClient)\n        encoding.writeVarUint(encoder.restEncoder, currClock)\n        currClient = curr.id.client\n        stopCounting = false\n      }\n      if (curr.constructor === Skip) {\n        stopCounting = true\n      }\n      if (!stopCounting) {\n        currClock = curr.id.clock + curr.length\n      }\n    }\n    // write what we have\n    encoding.writeVarUint(encoder.restEncoder, currClient)\n    encoding.writeVarUint(encoder.restEncoder, currClock)\n    // prepend the size of the state vector\n    const enc = encoding.createEncoder()\n    encoding.writeVarUint(enc, size)\n    encoding.writeBinaryEncoder(enc, encoder.restEncoder)\n    encoder.restEncoder = enc\n    return encoder.toUint8Array()\n  } else {\n    encoding.writeVarUint(encoder.restEncoder, 0)\n    return encoder.toUint8Array()\n  }\n}\n\n/**\n * @param {Uint8Array} update\n * @return {Uint8Array}\n */\nexport const encodeStateVectorFromUpdate = update => encodeStateVectorFromUpdateV2(update, DSEncoderV1, UpdateDecoderV1)\n\n/**\n * @param {Uint8Array} update\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} YDecoder\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nexport const parseUpdateMetaV2 = (update, YDecoder = UpdateDecoderV2) => {\n  /**\n   * @type {Map<number, number>}\n   */\n  const from = new Map()\n  /**\n   * @type {Map<number, number>}\n   */\n  const to = new Map()\n  const updateDecoder = new LazyStructReader(new YDecoder(decoding.createDecoder(update)), false)\n  let curr = updateDecoder.curr\n  if (curr !== null) {\n    let currClient = curr.id.client\n    let currClock = curr.id.clock\n    // write the beginning to `from`\n    from.set(currClient, currClock)\n    for (; curr !== null; curr = updateDecoder.next()) {\n      if (currClient !== curr.id.client) {\n        // We found a new client\n        // write the end to `to`\n        to.set(currClient, currClock)\n        // write the beginning to `from`\n        from.set(curr.id.client, curr.id.clock)\n        // update currClient\n        currClient = curr.id.client\n      }\n      currClock = curr.id.clock + curr.length\n    }\n    // write the end to `to`\n    to.set(currClient, currClock)\n  }\n  return { from, to }\n}\n\n/**\n * @param {Uint8Array} update\n * @return {{ from: Map<number,number>, to: Map<number,number> }}\n */\nexport const parseUpdateMeta = update => parseUpdateMetaV2(update, UpdateDecoderV1)\n\n/**\n * This method is intended to slice any kind of struct and retrieve the right part.\n * It does not handle side-effects, so it should only be used by the lazy-encoder.\n *\n * @param {Item | GC | Skip} left\n * @param {number} diff\n * @return {Item | GC}\n */\nconst sliceStruct = (left, diff) => {\n  if (left.constructor === GC) {\n    const { client, clock } = left.id\n    return new GC(createID(client, clock + diff), left.length - diff)\n  } else if (left.constructor === Skip) {\n    const { client, clock } = left.id\n    return new Skip(createID(client, clock + diff), left.length - diff)\n  } else {\n    const leftItem = /** @type {Item} */ (left)\n    const { client, clock } = leftItem.id\n    return new Item(\n      createID(client, clock + diff),\n      null,\n      createID(client, clock + diff - 1),\n      null,\n      leftItem.rightOrigin,\n      leftItem.parent,\n      leftItem.parentSub,\n      leftItem.content.splice(diff)\n    )\n  }\n}\n\n/**\n *\n * This function works similarly to `readUpdateV2`.\n *\n * @param {Array<Uint8Array>} updates\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n * @return {Uint8Array}\n */\nexport const mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const updateDecoders = updates.map(update => new YDecoder(decoding.createDecoder(update)))\n  let lazyStructDecoders = updateDecoders.map(decoder => new LazyStructReader(decoder, true))\n\n  /**\n   * @todo we don't need offset because we always slice before\n   * @type {null | { struct: Item | GC | Skip, offset: number }}\n   */\n  let currWrite = null\n\n  const updateEncoder = new YEncoder()\n  // write structs lazily\n  const lazyStructEncoder = new LazyStructWriter(updateEncoder)\n\n  // Note: We need to ensure that all lazyStructDecoders are fully consumed\n  // Note: Should merge document updates whenever possible - even from different updates\n  // Note: Should handle that some operations cannot be applied yet ()\n\n  while (true) {\n    // Write higher clients first ⇒ sort by clientID & clock and remove decoders without content\n    lazyStructDecoders = lazyStructDecoders.filter(dec => dec.curr !== null)\n    lazyStructDecoders.sort(\n      /** @type {function(any,any):number} */ (dec1, dec2) => {\n        if (dec1.curr.id.client === dec2.curr.id.client) {\n          const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock\n          if (clockDiff === 0) {\n            return dec1.curr.constructor === dec2.curr.constructor ? 0 : (\n              dec1.curr.constructor === Skip ? 1 : -1\n            )\n          } else {\n            return clockDiff\n          }\n        } else {\n          return dec2.curr.id.client - dec1.curr.id.client\n        }\n      }\n    )\n    if (lazyStructDecoders.length === 0) {\n      break\n    }\n    const currDecoder = lazyStructDecoders[0]\n    // write from currDecoder until the next operation is from another client or if filler-struct\n    // then we need to reorder the decoders and find the next operation to write\n    const firstClient = /** @type {Item | GC} */ (currDecoder.curr).id.client\n\n    if (currWrite !== null) {\n      let curr = /** @type {Item | GC | null} */ (currDecoder.curr)\n\n      // iterate until we find something that we haven't written already\n      // remember: first the high client-ids are written\n      while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {\n        curr = currDecoder.next()\n      }\n      if (curr === null || curr.id.client !== firstClient) {\n        continue\n      }\n\n      if (firstClient !== currWrite.struct.id.client) {\n        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n        currWrite = { struct: curr, offset: 0 }\n        currDecoder.next()\n      } else {\n        if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {\n          // @todo write currStruct & set currStruct = Skip(clock = currStruct.id.clock + currStruct.length, length = curr.id.clock - self.clock)\n          if (currWrite.struct.constructor === Skip) {\n            // extend existing skip\n            currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock\n          } else {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n            const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length\n            /**\n             * @type {Skip}\n             */\n            const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff)\n            currWrite = { struct, offset: 0 }\n          }\n        } else { // if (currWrite.struct.id.clock + currWrite.struct.length >= curr.id.clock) {\n          const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock\n          if (diff > 0) {\n            if (currWrite.struct.constructor === Skip) {\n              // prefer to slice Skip because the other struct might contain more information\n              currWrite.struct.length -= diff\n            } else {\n              curr = sliceStruct(curr, diff)\n            }\n          }\n          if (!currWrite.struct.mergeWith(/** @type {any} */ (curr))) {\n            writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n            currWrite = { struct: curr, offset: 0 }\n            currDecoder.next()\n          }\n        }\n      }\n    } else {\n      currWrite = { struct: /** @type {Item | GC} */ (currDecoder.curr), offset: 0 }\n      currDecoder.next()\n    }\n    for (\n      let next = currDecoder.curr;\n      next !== null && next.id.client === firstClient && next.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next.constructor !== Skip;\n      next = currDecoder.next()\n    ) {\n      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n      currWrite = { struct: next, offset: 0 }\n    }\n  }\n  if (currWrite !== null) {\n    writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset)\n    currWrite = null\n  }\n  finishLazyStructWriting(lazyStructEncoder)\n\n  const dss = updateDecoders.map(decoder => readDeleteSet(decoder))\n  const ds = mergeDeleteSets(dss)\n  writeDeleteSet(updateEncoder, ds)\n  return updateEncoder.toUint8Array()\n}\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n * @param {typeof UpdateEncoderV1 | typeof UpdateEncoderV2} [YEncoder]\n */\nexport const diffUpdateV2 = (update, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {\n  const state = decodeStateVector(sv)\n  const encoder = new YEncoder()\n  const lazyStructWriter = new LazyStructWriter(encoder)\n  const decoder = new YDecoder(decoding.createDecoder(update))\n  const reader = new LazyStructReader(decoder, false)\n  while (reader.curr) {\n    const curr = reader.curr\n    const currClient = curr.id.client\n    const svClock = state.get(currClient) || 0\n    if (reader.curr.constructor === Skip) {\n      // the first written struct shouldn't be a skip\n      reader.next()\n      continue\n    }\n    if (curr.id.clock + curr.length > svClock) {\n      writeStructToLazyStructWriter(lazyStructWriter, curr, math.max(svClock - curr.id.clock, 0))\n      reader.next()\n      while (reader.curr && reader.curr.id.client === currClient) {\n        writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0)\n        reader.next()\n      }\n    } else {\n      // read until something new comes up\n      while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {\n        reader.next()\n      }\n    }\n  }\n  finishLazyStructWriting(lazyStructWriter)\n  // write ds\n  const ds = readDeleteSet(decoder)\n  writeDeleteSet(encoder, ds)\n  return encoder.toUint8Array()\n}\n\n/**\n * @param {Uint8Array} update\n * @param {Uint8Array} sv\n */\nexport const diffUpdate = (update, sv) => diffUpdateV2(update, sv, UpdateDecoderV1, UpdateEncoderV1)\n\n/**\n * @param {LazyStructWriter} lazyWriter\n */\nconst flushLazyStructWriter = lazyWriter => {\n  if (lazyWriter.written > 0) {\n    lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: encoding.toUint8Array(lazyWriter.encoder.restEncoder) })\n    lazyWriter.encoder.restEncoder = encoding.createEncoder()\n    lazyWriter.written = 0\n  }\n}\n\n/**\n * @param {LazyStructWriter} lazyWriter\n * @param {Item | GC} struct\n * @param {number} offset\n */\nconst writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {\n  // flush curr if we start another client\n  if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {\n    flushLazyStructWriter(lazyWriter)\n  }\n  if (lazyWriter.written === 0) {\n    lazyWriter.currClient = struct.id.client\n    // write next client\n    lazyWriter.encoder.writeClient(struct.id.client)\n    // write startClock\n    encoding.writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset)\n  }\n  struct.write(lazyWriter.encoder, offset)\n  lazyWriter.written++\n}\n/**\n * Call this function when we collected all parts and want to\n * put all the parts together. After calling this method,\n * you can continue using the UpdateEncoder.\n *\n * @param {LazyStructWriter} lazyWriter\n */\nconst finishLazyStructWriting = (lazyWriter) => {\n  flushLazyStructWriter(lazyWriter)\n\n  // this is a fresh encoder because we called flushCurr\n  const restEncoder = lazyWriter.encoder.restEncoder\n\n  /**\n   * Now we put all the fragments together.\n   * This works similarly to `writeClientsStructs`\n   */\n\n  // write # states that were updated - i.e. the clients\n  encoding.writeVarUint(restEncoder, lazyWriter.clientStructs.length)\n\n  for (let i = 0; i < lazyWriter.clientStructs.length; i++) {\n    const partStructs = lazyWriter.clientStructs[i]\n    /**\n     * Works similarly to `writeStructs`\n     */\n    // write # encoded structs\n    encoding.writeVarUint(restEncoder, partStructs.written)\n    // write the rest of the fragment\n    encoding.writeUint8Array(restEncoder, partStructs.restEncoder)\n  }\n}\n","\nimport {\n  findIndexSS,\n  getState,\n  splitItem,\n  iterateStructs,\n  UpdateEncoderV2,\n  DSDecoderV1, DSEncoderV1, DSDecoderV2, DSEncoderV2, Item, GC, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nimport * as array from 'lib0/array.js'\nimport * as math from 'lib0/math.js'\nimport * as map from 'lib0/map.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\nexport class DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock\n    /**\n     * @type {number}\n     */\n    this.len = len\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nexport class DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map()\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid))\n    for (let i = 0; i < deletes.length; i++) {\n      const del = deletes[i]\n      iterateStructs(transaction, structs, del.clock, del.len, f)\n    }\n  })\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nexport const findIndexDS = (dis, clock) => {\n  let left = 0\n  let right = dis.length - 1\n  while (left <= right) {\n    const midindex = math.floor((left + right) / 2)\n    const mid = dis[midindex]\n    const midclock = mid.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n  }\n  return null\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client)\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n}\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock)\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1]\n      const right = dels[i]\n      if (left.clock + left.len >= right.clock) {\n        left.len = math.max(left.len, right.clock + right.len - left.clock)\n      } else {\n        if (j < i) {\n          dels[j] = right\n        }\n        j++\n      }\n    }\n    dels.length = j\n  })\n}\n\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\nexport const mergeDeleteSets = dss => {\n  const merged = new DeleteSet()\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice()\n        for (let i = dssI + 1; i < dss.length; i++) {\n          array.appendTo(dels, dss[i].clients.get(client) || [])\n        }\n        merged.clients.set(client, dels)\n      }\n    })\n  }\n  sortAndMergeDeleteSet(merged)\n  return merged\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {number} client\n * @param {number} clock\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const addToDeleteSet = (ds, client, clock, length) => {\n  map.setIfUndefined(ds.clients, client, () => []).push(new DeleteItem(clock, length))\n}\n\nexport const createDeleteSet = () => new DeleteSet()\n\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\nexport const createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet()\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = []\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i]\n      if (struct.deleted) {\n        const clock = struct.id.clock\n        let len = struct.length\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.id.clock === clock + len && next.deleted; next = structs[++i + 1]) {\n            len += next.length\n          }\n        }\n        dsitems.push(new DeleteItem(clock, len))\n      }\n    }\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems)\n    }\n  })\n  return ds\n}\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const writeDeleteSet = (encoder, ds) => {\n  encoding.writeVarUint(encoder.restEncoder, ds.clients.size)\n  ds.clients.forEach((dsitems, client) => {\n    encoder.resetDsCurVal()\n    encoding.writeVarUint(encoder.restEncoder, client)\n    const len = dsitems.length\n    encoding.writeVarUint(encoder.restEncoder, len)\n    for (let i = 0; i < len; i++) {\n      const item = dsitems[i]\n      encoder.writeDsClock(item.clock)\n      encoder.writeDsLen(item.len)\n    }\n  })\n}\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\nexport const readDeleteSet = decoder => {\n  const ds = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal()\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder)\n    if (numberOfDeletes > 0) {\n      const dsField = map.setIfUndefined(ds.clients, client, () => [])\n      for (let i = 0; i < numberOfDeletes; i++) {\n        dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()))\n      }\n    }\n  }\n  return ds\n}\n\n/**\n * @todo YDecoder also contains references to String and other Decoders. Would make sense to exchange YDecoder.toUint8Array for YDecoder.DsToUint8Array()..\n */\n\n/**\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @return {Uint8Array|null} Returns a v2 update containing all deletes that couldn't be applied yet; or null if all deletes were applied successfully.\n *\n * @private\n * @function\n */\nexport const readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numClients; i++) {\n    decoder.resetDsCurVal()\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const numberOfDeletes = decoding.readVarUint(decoder.restDecoder)\n    const structs = store.clients.get(client) || []\n    const state = getState(store, client)\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = decoder.readDsClock()\n      const clockEnd = clock + decoder.readDsLen()\n      if (clock < state) {\n        if (state < clockEnd) {\n          addToDeleteSet(unappliedDS, client, state, clockEnd - state)\n        }\n        let index = findIndexSS(structs, clock)\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n        let struct = structs[index]\n        // split the first item if necessary\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n          index++ // increase we now want to use the next struct\n        }\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++]\n          if (struct.id.clock < clockEnd) {\n            if (!struct.deleted) {\n              if (clockEnd < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock))\n              }\n              struct.delete(transaction)\n            }\n          } else {\n            break\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, client, clock, clockEnd - clock)\n      }\n    }\n  }\n  if (unappliedDS.clients.size > 0) {\n    const ds = new UpdateEncoderV2()\n    encoding.writeVarUint(ds.restEncoder, 0) // encode 0 structs\n    writeDeleteSet(ds, unappliedDS)\n    return ds.toUint8Array()\n  }\n  return null\n}\n","/**\n * @module Y\n */\n\nimport {\n  StructStore,\n  AbstractType,\n  YArray,\n  YText,\n  YMap,\n  YXmlFragment,\n  transact,\n  ContentDoc, Item, Transaction, YEvent // eslint-disable-line\n} from '../internals.js'\n\nimport { Observable } from 'lib0/observable.js'\nimport * as random from 'lib0/random.js'\nimport * as map from 'lib0/map.js'\nimport * as array from 'lib0/array.js'\n\nexport const generateNewClientId = random.uint32\n\n/**\n * @typedef {Object} DocOpts\n * @property {boolean} [DocOpts.gc=true] Disable garbage collection (default: gc=true)\n * @property {function(Item):boolean} [DocOpts.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n * @property {string} [DocOpts.guid] Define a globally unique identifier for this document\n * @property {any} [DocOpts.meta] Any kind of meta information you want to associate with this document. If this is a subdocument, remote peers will store the meta information as well.\n * @property {boolean} [DocOpts.autoLoad] If a subdocument, automatically load document. If this is a subdocument, remote peers will load the document as well automatically.\n */\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\nexport class Doc extends Observable {\n  /**\n   * @param {DocOpts} [opts] configuration\n   */\n  constructor ({ guid = random.uuidv4(), gc = true, gcFilter = () => true, meta = null, autoLoad = false } = {}) {\n    super()\n    this.gc = gc\n    this.gcFilter = gcFilter\n    this.clientID = generateNewClientId()\n    this.guid = guid\n    /**\n     * @type {Map<string, AbstractType<YEvent>>}\n     */\n    this.share = new Map()\n    this.store = new StructStore()\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = []\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocs = new Set()\n    /**\n     * If this document is a subdocument - a document integrated into another document - then _item is defined.\n     * @type {Item?}\n     */\n    this._item = null\n    this.shouldLoad = autoLoad\n    this.autoLoad = autoLoad\n    this.meta = meta\n  }\n\n  /**\n   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).\n   *\n   * `load()` might be used in the future to request any provider to load the most current data.\n   *\n   * It is safe to call `load()` multiple times.\n   */\n  load () {\n    const item = this._item\n    if (item !== null && !this.shouldLoad) {\n      transact(/** @type {any} */ (item.parent).doc, transaction => {\n        transaction.subdocsLoaded.add(this)\n      }, null, true)\n    }\n    this.shouldLoad = true\n  }\n\n  getSubdocs () {\n    return this.subdocs\n  }\n\n  getSubdocGuids () {\n    return new Set(Array.from(this.subdocs).map(doc => doc.guid))\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @param {function(Transaction):void} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    transact(this, f, origin)\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `y.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Yjs instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @example\n   *   const y = new Y(..)\n   *   const appState = {\n   *     document: y.getText('document')\n   *     comments: y.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = AbstractType) {\n    const type = map.setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor()\n      t._integrate(this, null)\n      return t\n    })\n    const Constr = type.constructor\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor()\n        t._map = type._map\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t\n          }\n        })\n        t._start = type._start\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t\n        }\n        t._length = type._length\n        this.share.set(name, t)\n        t._integrate(this, null)\n        return t\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return type\n  }\n\n  /**\n   * @template T\n   * @param {string} [name]\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name = '') {\n    // @ts-ignore\n    return this.get(name, YArray)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name = '') {\n    // @ts-ignore\n    return this.get(name, YText)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YMap<any>}\n   *\n   * @public\n   */\n  getMap (name = '') {\n    // @ts-ignore\n    return this.get(name, YMap)\n  }\n\n  /**\n   * @param {string} [name]\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name = '') {\n    // @ts-ignore\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Converts the entire document into a js object, recursively traversing each yjs type\n   * Doesn't log types that have not been defined (using ydoc.getType(..)).\n   *\n   * @deprecated Do not use this method and rather call toJSON directly on the shared types.\n   *\n   * @return {Object<string, any>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string, any>}\n     */\n    const doc = {}\n\n    this.share.forEach((value, key) => {\n      doc[key] = value.toJSON()\n    })\n\n    return doc\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    array.from(this.subdocs).forEach(subdoc => subdoc.destroy())\n    const item = this._item\n    if (item !== null) {\n      this._item = null\n      const content = /** @type {ContentDoc} */ (item.content)\n      if (item.deleted) {\n        // @ts-ignore\n        content.doc = null\n      } else {\n        content.doc = new Doc({ guid: this.guid, ...content.opts })\n        content.doc._item = item\n      }\n      transact(/** @type {any} */ (item).parent.doc, transaction => {\n        if (!item.deleted) {\n          transaction.subdocsAdded.add(content.doc)\n        }\n        transaction.subdocsRemoved.add(this)\n      }, null, true)\n    }\n    this.emit('destroyed', [true])\n    this.emit('destroy', [this])\n    super.destroy()\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function(...any):any} f\n   */\n  on (eventName, f) {\n    super.on(eventName, f)\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n  off (eventName, f) {\n    super.off(eventName, f)\n  }\n}\n","import * as buffer from 'lib0/buffer.js'\nimport * as decoding from 'lib0/decoding.js'\nimport {\n  ID, createID\n} from '../internals.js'\n\nexport class DSDecoderV1 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    this.restDecoder = decoder\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n}\n\nexport class UpdateDecoderV1 extends DSDecoderV1 {\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return createID(decoding.readVarUint(this.restDecoder), decoding.readVarUint(this.restDecoder))\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return decoding.readUint8(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return decoding.readVarString(this.restDecoder)\n  }\n\n  /**\n   * @return {boolean} isKey\n   */\n  readParentInfo () {\n    return decoding.readVarUint(this.restDecoder) === 1\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number} len\n   */\n  readLen () {\n    return decoding.readVarUint(this.restDecoder)\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return buffer.copyUint8Array(decoding.readVarUint8Array(this.restDecoder))\n  }\n\n  /**\n   * Legacy implementation uses JSON parse. We use any-decoding in v2.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return JSON.parse(decoding.readVarString(this.restDecoder))\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    return decoding.readVarString(this.restDecoder)\n  }\n}\n\nexport class DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    /**\n     * @private\n     */\n    this.dsCurrVal = 0\n    this.restDecoder = decoder\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsClock () {\n    this.dsCurrVal += decoding.readVarUint(this.restDecoder)\n    return this.dsCurrVal\n  }\n\n  /**\n   * @return {number}\n   */\n  readDsLen () {\n    const diff = decoding.readVarUint(this.restDecoder) + 1\n    this.dsCurrVal += diff\n    return diff\n  }\n}\n\nexport class UpdateDecoderV2 extends DSDecoderV2 {\n  /**\n   * @param {decoding.Decoder} decoder\n   */\n  constructor (decoder) {\n    super(decoder)\n    /**\n     * List of cached keys. If the keys[id] does not exist, we read a new key\n     * from stringEncoder and push it to keys.\n     *\n     * @type {Array<string>}\n     */\n    this.keys = []\n    decoding.readVarUint(decoder) // read feature flag - currently unused\n    this.keyClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.clientDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.leftClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.rightClockDecoder = new decoding.IntDiffOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.infoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)\n    this.stringDecoder = new decoding.StringDecoder(decoding.readVarUint8Array(decoder))\n    this.parentInfoDecoder = new decoding.RleDecoder(decoding.readVarUint8Array(decoder), decoding.readUint8)\n    this.typeRefDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n    this.lenDecoder = new decoding.UintOptRleDecoder(decoding.readVarUint8Array(decoder))\n  }\n\n  /**\n   * @return {ID}\n   */\n  readLeftID () {\n    return new ID(this.clientDecoder.read(), this.leftClockDecoder.read())\n  }\n\n  /**\n   * @return {ID}\n   */\n  readRightID () {\n    return new ID(this.clientDecoder.read(), this.rightClockDecoder.read())\n  }\n\n  /**\n   * Read the next client id.\n   * Use this in favor of readID whenever possible to reduce the number of objects created.\n   */\n  readClient () {\n    return this.clientDecoder.read()\n  }\n\n  /**\n   * @return {number} info An unsigned 8-bit integer\n   */\n  readInfo () {\n    return /** @type {number} */ (this.infoDecoder.read())\n  }\n\n  /**\n   * @return {string}\n   */\n  readString () {\n    return this.stringDecoder.read()\n  }\n\n  /**\n   * @return {boolean}\n   */\n  readParentInfo () {\n    return this.parentInfoDecoder.read() === 1\n  }\n\n  /**\n   * @return {number} An unsigned 8-bit integer\n   */\n  readTypeRef () {\n    return this.typeRefDecoder.read()\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @return {number}\n   */\n  readLen () {\n    return this.lenDecoder.read()\n  }\n\n  /**\n   * @return {any}\n   */\n  readAny () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  readBuf () {\n    return decoding.readVarUint8Array(this.restDecoder)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @return {any}\n   */\n  readJSON () {\n    return decoding.readAny(this.restDecoder)\n  }\n\n  /**\n   * @return {string}\n   */\n  readKey () {\n    const keyClock = this.keyClockDecoder.read()\n    if (keyClock < this.keys.length) {\n      return this.keys[keyClock]\n    } else {\n      const key = this.stringDecoder.read()\n      this.keys.push(key)\n      return key\n    }\n  }\n}\n","\nimport * as error from 'lib0/error.js'\nimport * as encoding from 'lib0/encoding.js'\n\nimport {\n  ID // eslint-disable-line\n} from '../internals.js'\n\nexport class DSEncoderV1 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder()\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    // nop\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    encoding.writeVarUint(this.restEncoder, clock)\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    encoding.writeVarUint(this.restEncoder, len)\n  }\n}\n\nexport class UpdateEncoderV1 extends DSEncoderV1 {\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client)\n    encoding.writeVarUint(this.restEncoder, id.clock)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    encoding.writeVarUint(this.restEncoder, id.client)\n    encoding.writeVarUint(this.restEncoder, id.clock)\n  }\n\n  /**\n   * Use writeClient and writeClock instead of writeID if possible.\n   * @param {number} client\n   */\n  writeClient (client) {\n    encoding.writeVarUint(this.restEncoder, client)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    encoding.writeUint8(this.restEncoder, info)\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    encoding.writeVarString(this.restEncoder, s)\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    encoding.writeVarUint(this.restEncoder, isYKey ? 1 : 0)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    encoding.writeVarUint(this.restEncoder, info)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    encoding.writeVarUint(this.restEncoder, len)\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf)\n  }\n\n  /**\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeVarString(this.restEncoder, JSON.stringify(embed))\n  }\n\n  /**\n   * @param {string} key\n   */\n  writeKey (key) {\n    encoding.writeVarString(this.restEncoder, key)\n  }\n}\n\nexport class DSEncoderV2 {\n  constructor () {\n    this.restEncoder = encoding.createEncoder() // encodes all the rest / non-optimized\n    this.dsCurrVal = 0\n  }\n\n  toUint8Array () {\n    return encoding.toUint8Array(this.restEncoder)\n  }\n\n  resetDsCurVal () {\n    this.dsCurrVal = 0\n  }\n\n  /**\n   * @param {number} clock\n   */\n  writeDsClock (clock) {\n    const diff = clock - this.dsCurrVal\n    this.dsCurrVal = clock\n    encoding.writeVarUint(this.restEncoder, diff)\n  }\n\n  /**\n   * @param {number} len\n   */\n  writeDsLen (len) {\n    if (len === 0) {\n      error.unexpectedCase()\n    }\n    encoding.writeVarUint(this.restEncoder, len - 1)\n    this.dsCurrVal += len\n  }\n}\n\nexport class UpdateEncoderV2 extends DSEncoderV2 {\n  constructor () {\n    super()\n    /**\n     * @type {Map<string,number>}\n     */\n    this.keyMap = new Map()\n    /**\n     * Refers to the next uniqe key-identifier to me used.\n     * See writeKey method for more information.\n     *\n     * @type {number}\n     */\n    this.keyClock = 0\n    this.keyClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.clientEncoder = new encoding.UintOptRleEncoder()\n    this.leftClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.rightClockEncoder = new encoding.IntDiffOptRleEncoder()\n    this.infoEncoder = new encoding.RleEncoder(encoding.writeUint8)\n    this.stringEncoder = new encoding.StringEncoder()\n    this.parentInfoEncoder = new encoding.RleEncoder(encoding.writeUint8)\n    this.typeRefEncoder = new encoding.UintOptRleEncoder()\n    this.lenEncoder = new encoding.UintOptRleEncoder()\n  }\n\n  toUint8Array () {\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, 0) // this is a feature flag that we might use in the future\n    encoding.writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.clientEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.infoEncoder))\n    encoding.writeVarUint8Array(encoder, this.stringEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, encoding.toUint8Array(this.parentInfoEncoder))\n    encoding.writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array())\n    encoding.writeVarUint8Array(encoder, this.lenEncoder.toUint8Array())\n    // @note The rest encoder is appended! (note the missing var)\n    encoding.writeUint8Array(encoder, encoding.toUint8Array(this.restEncoder))\n    return encoding.toUint8Array(encoder)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeLeftID (id) {\n    this.clientEncoder.write(id.client)\n    this.leftClockEncoder.write(id.clock)\n  }\n\n  /**\n   * @param {ID} id\n   */\n  writeRightID (id) {\n    this.clientEncoder.write(id.client)\n    this.rightClockEncoder.write(id.clock)\n  }\n\n  /**\n   * @param {number} client\n   */\n  writeClient (client) {\n    this.clientEncoder.write(client)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeInfo (info) {\n    this.infoEncoder.write(info)\n  }\n\n  /**\n   * @param {string} s\n   */\n  writeString (s) {\n    this.stringEncoder.write(s)\n  }\n\n  /**\n   * @param {boolean} isYKey\n   */\n  writeParentInfo (isYKey) {\n    this.parentInfoEncoder.write(isYKey ? 1 : 0)\n  }\n\n  /**\n   * @param {number} info An unsigned 8-bit integer\n   */\n  writeTypeRef (info) {\n    this.typeRefEncoder.write(info)\n  }\n\n  /**\n   * Write len of a struct - well suited for Opt RLE encoder.\n   *\n   * @param {number} len\n   */\n  writeLen (len) {\n    this.lenEncoder.write(len)\n  }\n\n  /**\n   * @param {any} any\n   */\n  writeAny (any) {\n    encoding.writeAny(this.restEncoder, any)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  writeBuf (buf) {\n    encoding.writeVarUint8Array(this.restEncoder, buf)\n  }\n\n  /**\n   * This is mainly here for legacy purposes.\n   *\n   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.\n   *\n   * @param {any} embed\n   */\n  writeJSON (embed) {\n    encoding.writeAny(this.restEncoder, embed)\n  }\n\n  /**\n   * Property keys are often reused. For example, in y-prosemirror the key `bold` might\n   * occur very often. For a 3d application, the key `position` might occur very often.\n   *\n   * We cache these keys in a Map and refer to them via a unique number.\n   *\n   * @param {string} key\n   */\n  writeKey (key) {\n    const clock = this.keyMap.get(key)\n    if (clock === undefined) {\n      this.keyClockEncoder.write(this.keyClock++)\n      this.stringEncoder.write(key)\n    } else {\n      this.keyClockEncoder.write(this.keyClock++)\n    }\n  }\n}\n","\n/**\n * @module encoding\n */\n/*\n * We use the first five bits in the info flag for determining the type of the struct.\n *\n * 0: GC\n * 1: Item with Deleted content\n * 2: Item with JSON content\n * 3: Item with Binary content\n * 4: Item with String content\n * 5: Item with Embed content (for richtext content)\n * 6: Item with Format content (a formatting marker for richtext content)\n * 7: Item with Type\n */\n\nimport {\n  findIndexSS,\n  getState,\n  createID,\n  getStateVector,\n  readAndApplyDeleteSet,\n  writeDeleteSet,\n  createDeleteSetFromStructStore,\n  transact,\n  readItemContent,\n  UpdateDecoderV1,\n  UpdateDecoderV2,\n  UpdateEncoderV1,\n  UpdateEncoderV2,\n  DSEncoderV2,\n  DSDecoderV1,\n  DSEncoderV1,\n  mergeUpdatesV2,\n  Skip,\n  diffUpdateV2,\n  DSDecoderV2, Doc, Transaction, GC, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as binary from 'lib0/binary.js'\nimport * as map from 'lib0/map.js'\nimport * as math from 'lib0/math.js'\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  clock = math.max(clock, structs[0].id.clock) // make sure the first id exists\n  const startNewStructs = findIndexSS(structs, clock)\n  // write # encoded structs\n  encoding.writeVarUint(encoder.restEncoder, structs.length - startNewStructs)\n  encoder.writeClient(client)\n  encoding.writeVarUint(encoder.restEncoder, clock)\n  const firstStruct = structs[startNewStructs]\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock)\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0)\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nexport const writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map()\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock)\n    }\n  })\n  getStateVector(store).forEach((clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0)\n    }\n  })\n  // write # states that were updated\n  encoding.writeVarUint(encoder.restEncoder, sm.size)\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  Array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    // @ts-ignore\n    writeStructs(encoder, store.clients.get(client), client, clock)\n  })\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder The decoder object to read data from.\n * @param {Doc} doc\n * @return {Map<number, { i: number, refs: Array<Item | GC> }>}\n *\n * @private\n * @function\n */\nexport const readClientsStructRefs = (decoder, doc) => {\n  /**\n   * @type {Map<number, { i: number, refs: Array<Item | GC> }>}\n   */\n  const clientRefs = map.create()\n  const numOfStateUpdates = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder.restDecoder)\n    /**\n     * @type {Array<GC|Item>}\n     */\n    const refs = new Array(numberOfStructs)\n    const client = decoder.readClient()\n    let clock = decoding.readVarUint(decoder.restDecoder)\n    // const start = performance.now()\n    clientRefs.set(client, { i: 0, refs })\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoder.readInfo()\n      switch (binary.BITS5 & info) {\n        case 0: { // GC\n          const len = decoder.readLen()\n          refs[i] = new GC(createID(client, clock), len)\n          clock += len\n          break\n        }\n        case 10: { // Skip Struct (nothing to apply)\n          // @todo we could reduce the amount of checks by adding Skip struct to clientRefs so we know that something is missing.\n          const len = decoding.readVarUint(decoder.restDecoder)\n          refs[i] = new Skip(createID(client, clock), len)\n          clock += len\n          break\n        }\n        default: { // Item with content\n          /**\n           * The optimized implementation doesn't use any variables because inlining variables is faster.\n           * Below a non-optimized version is shown that implements the basic algorithm with\n           * a few comments\n           */\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null, // origin\n            null, // right\n            (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null, // right origin\n            cantCopyParentInfo ? (decoder.readParentInfo() ? doc.get(decoder.readString()) : decoder.readLeftID()) : null, // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          /* A non-optimized implementation of the above algorithm:\n\n          // The item that was originally to the left of this item.\n          const origin = (info & binary.BIT8) === binary.BIT8 ? decoder.readLeftID() : null\n          // The item that was originally to the right of this item.\n          const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? decoder.readRightID() : null\n          const cantCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n          const hasParentYKey = cantCopyParentInfo ? decoder.readParentInfo() : false\n          // If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n          // and we read the next string as parentYKey.\n          // It indicates how we store/retrieve parent from `y.share`\n          // @type {string|null}\n          const parentYKey = cantCopyParentInfo && hasParentYKey ? decoder.readString() : null\n\n          const struct = new Item(\n            createID(client, clock),\n            null, // leftd\n            origin, // origin\n            null, // right\n            rightOrigin, // right origin\n            cantCopyParentInfo && !hasParentYKey ? decoder.readLeftID() : (parentYKey !== null ? doc.get(parentYKey) : null), // parent\n            cantCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoder.readString() : null, // parentSub\n            readItemContent(decoder, info) // item content\n          )\n          */\n          refs[i] = struct\n          clock += struct.length\n        }\n      }\n    }\n    // console.log('time to read: ', performance.now() - start) // @todo remove\n  }\n  return clientRefs\n}\n\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {Map<number, { i: number, refs: (GC | Item)[] }>} clientsStructRefs\n * @return { null | { update: Uint8Array, missing: Map<number,number> } }\n *\n * @private\n * @function\n */\nconst integrateStructs = (transaction, store, clientsStructRefs) => {\n  /**\n   * @type {Array<Item | GC>}\n   */\n  const stack = []\n  // sort them so that we take the higher id first, in case of conflicts the lower id will probably not conflict with the id from the higher user.\n  let clientsStructRefsIds = Array.from(clientsStructRefs.keys()).sort((a, b) => a - b)\n  if (clientsStructRefsIds.length === 0) {\n    return null\n  }\n  const getNextStructTarget = () => {\n    if (clientsStructRefsIds.length === 0) {\n      return null\n    }\n    let nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]))\n    while (nextStructsTarget.refs.length === nextStructsTarget.i) {\n      clientsStructRefsIds.pop()\n      if (clientsStructRefsIds.length > 0) {\n        nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */ (clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]))\n      } else {\n        return null\n      }\n    }\n    return nextStructsTarget\n  }\n  let curStructsTarget = getNextStructTarget()\n  if (curStructsTarget === null && stack.length === 0) {\n    return null\n  }\n\n  /**\n   * @type {StructStore}\n   */\n  const restStructs = new StructStore()\n  const missingSV = new Map()\n  /**\n   * @param {number} client\n   * @param {number} clock\n   */\n  const updateMissingSv = (client, clock) => {\n    const mclock = missingSV.get(client)\n    if (mclock == null || mclock > clock) {\n      missingSV.set(client, clock)\n    }\n  }\n  /**\n   * @type {GC|Item}\n   */\n  let stackHead = /** @type {any} */ (curStructsTarget).refs[/** @type {any} */ (curStructsTarget).i++]\n  // caching the state because it is used very often\n  const state = new Map()\n\n  const addStackToRestSS = () => {\n    for (const item of stack) {\n      const client = item.id.client\n      const unapplicableItems = clientsStructRefs.get(client)\n      if (unapplicableItems) {\n        // decrement because we weren't able to apply previous operation\n        unapplicableItems.i--\n        restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i))\n        clientsStructRefs.delete(client)\n        unapplicableItems.i = 0\n        unapplicableItems.refs = []\n      } else {\n        // item was the last item on clientsStructRefs and the field was already cleared. Add item to restStructs and continue\n        restStructs.clients.set(client, [item])\n      }\n      // remove client from clientsStructRefsIds to prevent users from applying the same update again\n      clientsStructRefsIds = clientsStructRefsIds.filter(c => c !== client)\n    }\n    stack.length = 0\n  }\n\n  // iterate over all struct readers until we are done\n  while (true) {\n    if (stackHead.constructor !== Skip) {\n      const localClock = map.setIfUndefined(state, stackHead.id.client, () => getState(store, stackHead.id.client))\n      const offset = localClock - stackHead.id.clock\n      if (offset < 0) {\n        // update from the same client is missing\n        stack.push(stackHead)\n        updateMissingSv(stackHead.id.client, stackHead.id.clock - 1)\n        // hid a dead wall, add all items from stack to restSS\n        addStackToRestSS()\n      } else {\n        const missing = stackHead.getMissing(transaction, store)\n        if (missing !== null) {\n          stack.push(stackHead)\n          // get the struct reader that has the missing struct\n          /**\n           * @type {{ refs: Array<GC|Item>, i: number }}\n           */\n          const structRefs = clientsStructRefs.get(/** @type {number} */ (missing)) || { refs: [], i: 0 }\n          if (structRefs.refs.length === structRefs.i) {\n            // This update message causally depends on another update message that doesn't exist yet\n            updateMissingSv(/** @type {number} */ (missing), getState(store, missing))\n            addStackToRestSS()\n          } else {\n            stackHead = structRefs.refs[structRefs.i++]\n            continue\n          }\n        } else if (offset === 0 || offset < stackHead.length) {\n          // all fine, apply the stackhead\n          stackHead.integrate(transaction, offset)\n          state.set(stackHead.id.client, stackHead.id.clock + stackHead.length)\n        }\n      }\n    }\n    // iterate to next stackHead\n    if (stack.length > 0) {\n      stackHead = /** @type {GC|Item} */ (stack.pop())\n    } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {\n      stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++])\n    } else {\n      curStructsTarget = getNextStructTarget()\n      if (curStructsTarget === null) {\n        // we are done!\n        break\n      } else {\n        stackHead = /** @type {GC|Item} */ (curStructsTarget.refs[curStructsTarget.i++])\n      }\n    }\n  }\n  if (restStructs.clients.size > 0) {\n    const encoder = new UpdateEncoderV2()\n    writeClientsStructs(encoder, restStructs, new Map())\n    // write empty deleteset\n    // writeDeleteSet(encoder, new DeleteSet())\n    encoding.writeVarUint(encoder.restEncoder, 0) // => no need for an extra function call, just write 0 deletes\n    return { missing: missingSV, update: encoder.toUint8Array() }\n  }\n  return null\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState)\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {UpdateDecoderV1 | UpdateDecoderV2} [structDecoder]\n *\n * @function\n */\nexport const readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) =>\n  transact(ydoc, transaction => {\n    let retry = false\n    const doc = transaction.doc\n    const store = doc.store\n    // let start = performance.now()\n    const ss = readClientsStructRefs(structDecoder, doc)\n    // console.log('time to read structs: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    // console.log('time to merge: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const restStructs = integrateStructs(transaction, store, ss)\n    const pending = store.pendingStructs\n    if (pending) {\n      // check if we can apply something\n      for (const [client, clock] of pending.missing) {\n        if (clock < getState(store, client)) {\n          retry = true\n          break\n        }\n      }\n      if (restStructs) {\n        // merge restStructs into store.pending\n        for (const [client, clock] of restStructs.missing) {\n          const mclock = pending.missing.get(client)\n          if (mclock == null || mclock > clock) {\n            pending.missing.set(client, clock)\n          }\n        }\n        pending.update = mergeUpdatesV2([pending.update, restStructs.update])\n      }\n    } else {\n      store.pendingStructs = restStructs\n    }\n    // console.log('time to integrate: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store)\n    if (store.pendingDs) {\n      // @todo we could make a lower-bound state-vector check as we do above\n      const pendingDSUpdate = new UpdateDecoderV2(decoding.createDecoder(store.pendingDs))\n      decoding.readVarUint(pendingDSUpdate.restDecoder) // read 0 structs, because we only encode deletes in pendingdsupdate\n      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store)\n      if (dsRest && dsRest2) {\n        // case 1: ds1 != null && ds2 != null\n        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2])\n      } else {\n        // case 2: ds1 != null\n        // case 3: ds2 != null\n        // case 4: ds1 == null && ds2 == null\n        store.pendingDs = dsRest || dsRest2\n      }\n    } else {\n      // Either dsRest == null && pendingDs == null OR dsRest != null\n      store.pendingDs = dsRest\n    }\n    // console.log('time to cleanup: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n\n    // console.log('time to resume delete readers: ', performance.now() - start) // @todo remove\n    // start = performance.now()\n    if (retry) {\n      const update = /** @type {{update: Uint8Array}} */ (store.pendingStructs).update\n      store.pendingStructs = null\n      applyUpdateV2(transaction.doc, update)\n    }\n  }, transactionOrigin, false)\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const readUpdate = (decoder, ydoc, transactionOrigin) => readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder))\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n * @param {typeof UpdateDecoderV1 | typeof UpdateDecoderV2} [YDecoder]\n *\n * @function\n */\nexport const applyUpdateV2 = (ydoc, update, transactionOrigin, YDecoder = UpdateDecoderV2) => {\n  const decoder = decoding.createDecoder(update)\n  readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder))\n}\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const applyUpdate = (ydoc, update, transactionOrigin) => applyUpdateV2(ydoc, update, transactionOrigin, UpdateDecoderV1)\n\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\nexport const writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector)\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store))\n}\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @param {UpdateEncoderV1 | UpdateEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateAsUpdateV2 = (doc, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {\n  const targetStateVector = decodeStateVector(encodedTargetStateVector)\n  writeStateAsUpdate(encoder, doc, targetStateVector)\n  const updates = [encoder.toUint8Array()]\n  // also add the pending updates (if there are any)\n  // @todo support diffirent encoders\n  if (encoder.constructor === UpdateEncoderV2) {\n    if (doc.store.pendingDs) {\n      updates.push(doc.store.pendingDs)\n    }\n    if (doc.store.pendingStructs) {\n      updates.push(diffUpdateV2(doc.store.pendingStructs.update, encodedTargetStateVector))\n    }\n    if (updates.length > 1) {\n      return mergeUpdatesV2(updates)\n    }\n  }\n  return updates[0]\n}\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateAsUpdate = (doc, encodedTargetStateVector) => encodeStateAsUpdateV2(doc, encodedTargetStateVector, new UpdateEncoderV1())\n\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {DSDecoderV1 | DSDecoderV2} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const readStateVector = decoder => {\n  const ss = new Map()\n  const ssLength = decoding.readVarUint(decoder.restDecoder)\n  for (let i = 0; i < ssLength; i++) {\n    const client = decoding.readVarUint(decoder.restDecoder)\n    const clock = decoding.readVarUint(decoder.restDecoder)\n    ss.set(client, clock)\n  }\n  return ss\n}\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n// export const decodeStateVectorV2 = decodedState => readStateVector(new DSDecoderV2(decoding.createDecoder(decodedState)))\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const decodeStateVector = decodedState => readStateVector(new DSDecoderV1(decoding.createDecoder(decodedState)))\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Map<number,number>} sv\n * @function\n */\nexport const writeStateVector = (encoder, sv) => {\n  encoding.writeVarUint(encoder.restEncoder, sv.size)\n  sv.forEach((clock, client) => {\n    encoding.writeVarUint(encoder.restEncoder, client) // @todo use a special client decoder that is based on mapping\n    encoding.writeVarUint(encoder.restEncoder, clock)\n  })\n  return encoder\n}\n\n/**\n * @param {DSEncoderV1 | DSEncoderV2} encoder\n * @param {Doc} doc\n *\n * @function\n */\nexport const writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store))\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateVectorV2 = (doc, encoder = new DSEncoderV2()) => {\n  if (doc instanceof Map) {\n    writeStateVector(encoder, doc)\n  } else {\n    writeDocumentStateVector(encoder, doc)\n  }\n  return encoder.toUint8Array()\n}\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc|Map<number,number>} doc\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateVector = doc => encodeStateVectorV2(doc, new DSEncoderV1())\n","import * as f from 'lib0/function.js'\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nexport class EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = []\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nexport const createEventHandler = () => new EventHandler()\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nexport const addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f)\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nexport const removeEventHandlerListener = (eventHandler, f) => {\n  const l = eventHandler.l\n  const len = l.length\n  eventHandler.l = l.filter(g => f !== g)\n  if (len === eventHandler.l.length) {\n    console.error('[yjs] Tried to remove event handler that doesn\\'t exist.')\n  }\n}\n\n/**\n * Removes all event listeners.\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n *\n * @private\n * @function\n */\nexport const removeAllEventHandlerListeners = eventHandler => {\n  eventHandler.l.length = 0\n}\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nexport const callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  f.callAll(eventHandler.l, [arg0, arg1])\n","\nimport { AbstractType } from '../internals.js' // eslint-disable-line\n\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as error from 'lib0/error.js'\n\nexport class ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nexport const compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock)\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nexport const createID = (client, clock) => new ID(client, clock)\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\nexport const writeID = (encoder, id) => {\n  encoding.writeVarUint(encoder, id.client)\n  encoding.writeVarUint(encoder, id.clock)\n}\n\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\nexport const readID = decoder =>\n  createID(decoding.readVarUint(decoder), decoding.readVarUint(decoder))\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nexport const findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share.entries()) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw error.unexpectedCase()\n}\n","\nimport {\n  isDeleted,\n  createDeleteSetFromStructStore,\n  getStateVector,\n  getItemCleanStart,\n  iterateDeletedStructs,\n  writeDeleteSet,\n  writeStateVector,\n  readDeleteSet,\n  readStateVector,\n  createDeleteSet,\n  createID,\n  getState,\n  findIndexSS,\n  UpdateEncoderV2,\n  applyUpdateV2,\n  DSEncoderV1, DSEncoderV2, DSDecoderV1, DSDecoderV2, Transaction, Doc, DeleteSet, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as set from 'lib0/set.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\n\nexport class Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor (ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    this.sv = sv\n  }\n}\n\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\nexport const equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients\n  const ds2 = snap2.ds.clients\n  const sv1 = snap1.sv\n  const sv2 = snap2.sv\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false\n  }\n  for (const [key, value] of sv1.entries()) {\n    if (sv2.get(key) !== value) {\n      return false\n    }\n  }\n  for (const [client, dsitems1] of ds1.entries()) {\n    const dsitems2 = ds2.get(client) || []\n    if (dsitems1.length !== dsitems2.length) {\n      return false\n    }\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i]\n      const dsitem2 = dsitems2[i]\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/**\n * @param {Snapshot} snapshot\n * @param {DSEncoderV1 | DSEncoderV2} [encoder]\n * @return {Uint8Array}\n */\nexport const encodeSnapshotV2 = (snapshot, encoder = new DSEncoderV2()) => {\n  writeDeleteSet(encoder, snapshot.ds)\n  writeStateVector(encoder, snapshot.sv)\n  return encoder.toUint8Array()\n}\n\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\nexport const encodeSnapshot = snapshot => encodeSnapshotV2(snapshot, new DSEncoderV1())\n\n/**\n * @param {Uint8Array} buf\n * @param {DSDecoderV1 | DSDecoderV2} [decoder]\n * @return {Snapshot}\n */\nexport const decodeSnapshotV2 = (buf, decoder = new DSDecoderV2(decoding.createDecoder(buf))) => {\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder))\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\nexport const decodeSnapshot = buf => decodeSnapshotV2(buf, new DSDecoderV1(decoding.createDecoder(buf)))\n\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\nexport const createSnapshot = (ds, sm) => new Snapshot(ds, sm)\n\nexport const emptySnapshot = createSnapshot(createDeleteSet(), new Map())\n\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\nexport const snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store))\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nexport const isVisible = (item, snapshot) => snapshot === undefined ? !item.deleted : (\n  snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id)\n)\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nexport const splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, set.create)\n  const store = transaction.doc.store\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock))\n      }\n    })\n    iterateDeletedStructs(transaction, snapshot.ds, item => {})\n    meta.add(snapshot)\n  }\n}\n\n/**\n * @param {Doc} originDoc\n * @param {Snapshot} snapshot\n * @param {Doc} [newDoc] Optionally, you may define the Yjs document that receives the data from originDoc\n * @return {Doc}\n */\nexport const createDocFromSnapshot = (originDoc, snapshot, newDoc = new Doc()) => {\n  if (originDoc.gc) {\n    // we should not try to restore a GC-ed document, because some of the restored items might have their content deleted\n    throw new Error('originDoc must not be garbage collected')\n  }\n  const { sv, ds } = snapshot\n\n  const encoder = new UpdateEncoderV2()\n  originDoc.transact(transaction => {\n    let size = 0\n    sv.forEach(clock => {\n      if (clock > 0) {\n        size++\n      }\n    })\n    encoding.writeVarUint(encoder.restEncoder, size)\n    // splitting the structs before writing them to the encoder\n    for (const [client, clock] of sv) {\n      if (clock === 0) {\n        continue\n      }\n      if (clock < getState(originDoc.store, client)) {\n        getItemCleanStart(transaction, createID(client, clock))\n      }\n      const structs = originDoc.store.clients.get(client) || []\n      const lastStructIndex = findIndexSS(structs, clock - 1)\n      // write # encoded structs\n      encoding.writeVarUint(encoder.restEncoder, lastStructIndex + 1)\n      encoder.writeClient(client)\n      // first clock written is 0\n      encoding.writeVarUint(encoder.restEncoder, 0)\n      for (let i = 0; i <= lastStructIndex; i++) {\n        structs[i].write(encoder, 0)\n      }\n    }\n    writeDeleteSet(encoder, ds)\n  })\n\n  applyUpdateV2(newDoc, encoder.toUint8Array(), 'snapshot')\n  return newDoc\n}\n","\nimport {\n  GC,\n  splitItem,\n  Transaction, ID, Item, DSDecoderV2 // eslint-disable-line\n} from '../internals.js'\n\nimport * as math from 'lib0/math.js'\nimport * as error from 'lib0/error.js'\n\nexport class StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map()\n    /**\n     * @type {null | { missing: Map<number, number>, update: Uint8Array }}\n     */\n    this.pendingStructs = null\n    /**\n     * @type {null | Uint8Array}\n     */\n    this.pendingDs = null\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nexport const getStateVector = store => {\n  const sm = new Map()\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1]\n    sm.set(client, struct.id.clock + struct.length)\n  })\n  return sm\n}\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nexport const getState = (store, client) => {\n  const structs = store.clients.get(client)\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1]\n  return lastStruct.id.clock + lastStruct.length\n}\n\n/**\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nexport const integretyCheck = store => {\n  store.clients.forEach(structs => {\n    for (let i = 1; i < structs.length; i++) {\n      const l = structs[i - 1]\n      const r = structs[i]\n      if (l.id.clock + l.length !== r.id.clock) {\n        throw new Error('StructStore failed integrety check')\n      }\n    }\n  })\n}\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nexport const addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client)\n  if (structs === undefined) {\n    structs = []\n    store.clients.set(struct.id.client, structs)\n  } else {\n    const lastStruct = structs[structs.length - 1]\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw error.unexpectedCase()\n    }\n  }\n  structs.push(struct)\n}\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nexport const findIndexSS = (structs, clock) => {\n  let left = 0\n  let right = structs.length - 1\n  let mid = structs[right]\n  let midclock = mid.id.clock\n  if (midclock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = math.floor((clock / (midclock + mid.length - 1)) * right) // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex]\n    midclock = mid.id.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n    midindex = math.floor((left + right) / 2)\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw error.unexpectedCase()\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nexport const find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  return structs[findIndexSS(structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nexport const getItem = /** @type {function(StructStore,ID):Item} */ (find)\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nexport const findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock)\n  const struct = structs[index]\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n    return index + 1\n  }\n  return index\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client))\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  const index = findIndexSS(structs, id.clock)\n  const struct = structs[index]\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1))\n  }\n  return struct\n}\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nexport const replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client))\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct\n}\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len\n  let index = findIndexCleanStart(transaction, structs, clockStart)\n  let struct\n  do {\n    struct = structs[index++]\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd)\n    }\n    f(struct)\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n}\n","\nimport {\n  getState,\n  writeStructsFromTransaction,\n  writeDeleteSet,\n  DeleteSet,\n  sortAndMergeDeleteSet,\n  getStateVector,\n  findIndexSS,\n  callEventHandlerListeners,\n  Item,\n  generateNewClientId,\n  createID,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, GC, StructStore, AbstractType, AbstractStruct, YEvent, Doc // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as math from 'lib0/math.js'\nimport * as set from 'lib0/set.js'\nimport * as logging from 'lib0/logging.js'\nimport { callAll } from 'lib0/function.js'\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nexport class Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet()\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store)\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map()\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent>,Set<String|null>>}\n     */\n    this.changed = new Map()\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent>,Array<YEvent>>}\n     */\n    this.changedParentTypes = new Map()\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = []\n    /**\n     * @type {any}\n     */\n    this.origin = origin\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map()\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsAdded = new Set()\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsRemoved = new Set()\n    /**\n     * @type {Set<Doc>}\n     */\n    this.subdocsLoaded = new Set()\n  }\n}\n\n/**\n * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n * @param {Transaction} transaction\n * @return {boolean} Whether data was written.\n */\nexport const writeUpdateMessageFromTransaction = (encoder, transaction) => {\n  if (transaction.deleteSet.clients.size === 0 && !map.any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return false\n  }\n  sortAndMergeDeleteSet(transaction.deleteSet)\n  writeStructsFromTransaction(encoder, transaction)\n  writeDeleteSet(encoder, transaction.deleteSet)\n  return true\n}\n\n/**\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const nextID = transaction => {\n  const y = transaction.doc\n  return createID(y.clientID, getState(y.store, y.clientID))\n}\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent>} type\n * @param {string|null} parentSub\n */\nexport const addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    map.setIfUndefined(transaction.changed, type, set.create).add(parentSub)\n  }\n}\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n */\nconst tryToMergeWithLeft = (structs, pos) => {\n  const left = structs[pos - 1]\n  const right = structs[pos]\n  if (left.deleted === right.deleted && left.constructor === right.constructor) {\n    if (left.mergeWith(right)) {\n      structs.splice(pos, 1)\n      if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n        /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left))\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients.entries()) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si]\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiecy and so we don't miss any merge targets\n  ds.clients.forEach((deleteItems, client) => {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1))\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[--si]\n      ) {\n        tryToMergeWithLeft(structs, si)\n      }\n    }\n  })\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nexport const tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter)\n  tryMergeDeleteSet(ds, store)\n}\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i]\n    const doc = transaction.doc\n    const store = doc.store\n    const ds = transaction.deleteSet\n    const mergeStructs = transaction._mergeStructs\n    try {\n      sortAndMergeDeleteSet(ds)\n      transaction.afterState = getStateVector(transaction.doc.store)\n      doc._transaction = null\n      doc.emit('beforeObserverCalls', [transaction, doc])\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = []\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs)\n          }\n        })\n      )\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) =>\n          fs.push(() => {\n            // We need to think about the possibility that the user transforms the\n            // Y.Doc in the event.\n            if (type._item === null || !type._item.deleted) {\n              events = events\n                .filter(event =>\n                  event.target._item === null || !event.target._item.deleted\n                )\n              events\n                .forEach(event => {\n                  event.currentTarget = type\n                })\n              // sort events by path length so that top-level events are fired first.\n              events\n                .sort((event1, event2) => event1.path.length - event2.path.length)\n              // We don't need to check for events.length\n              // because we know it has at least one element\n              callEventHandlerListeners(type._dEH, events, transaction)\n            }\n          })\n        )\n        fs.push(() => doc.emit('afterTransaction', [transaction, doc]))\n      })\n      callAll(fs, [])\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter)\n      }\n      tryMergeDeleteSet(ds, store)\n\n      // on all affected store.clients props, try to merge\n      transaction.afterState.forEach((clock, client) => {\n        const beforeClock = transaction.beforeState.get(client) || 0\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = math.max(findIndexSS(structs, beforeClock), 1)\n          for (let i = structs.length - 1; i >= firstChangePos; i--) {\n            tryToMergeWithLeft(structs, i)\n          }\n        }\n      })\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = 0; i < mergeStructs.length; i++) {\n        const { client, clock } = mergeStructs[i].id\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n        const replacedStructPos = findIndexSS(structs, clock)\n        if (replacedStructPos + 1 < structs.length) {\n          tryToMergeWithLeft(structs, replacedStructPos + 1)\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLeft(structs, replacedStructPos)\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        doc.clientID = generateNewClientId()\n        logging.print(logging.ORANGE, logging.BOLD, '[yjs] ', logging.UNBOLD, logging.RED, 'Changed the client-id because another client seems to be using it.')\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc])\n      if (doc._observers.has('update')) {\n        const encoder = new UpdateEncoderV1()\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction)\n        if (hasContent) {\n          doc.emit('update', [encoder.toUint8Array(), transaction.origin, doc, transaction])\n        }\n      }\n      if (doc._observers.has('updateV2')) {\n        const encoder = new UpdateEncoderV2()\n        const hasContent = writeUpdateMessageFromTransaction(encoder, transaction)\n        if (hasContent) {\n          doc.emit('updateV2', [encoder.toUint8Array(), transaction.origin, doc, transaction])\n        }\n      }\n      transaction.subdocsAdded.forEach(subdoc => doc.subdocs.add(subdoc))\n      transaction.subdocsRemoved.forEach(subdoc => doc.subdocs.delete(subdoc))\n\n      doc.emit('subdocs', [{ loaded: transaction.subdocsLoaded, added: transaction.subdocsAdded, removed: transaction.subdocsRemoved }])\n      transaction.subdocsRemoved.forEach(subdoc => subdoc.destroy())\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = []\n        doc.emit('afterAllTransactions', [doc, transactionCleanups])\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1)\n      }\n    }\n  }\n}\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @param {Doc} doc\n * @param {function(Transaction):void} f\n * @param {any} [origin=true]\n *\n * @function\n */\nexport const transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups\n  let initialCall = false\n  if (doc._transaction === null) {\n    initialCall = true\n    doc._transaction = new Transaction(doc, origin, local)\n    transactionCleanups.push(doc._transaction)\n    if (transactionCleanups.length === 1) {\n      doc.emit('beforeAllTransactions', [doc])\n    }\n    doc.emit('beforeTransaction', [doc._transaction, doc])\n  }\n  try {\n    f(doc._transaction)\n  } finally {\n    if (initialCall && transactionCleanups[0] === doc._transaction) {\n      // The first transaction ended, now process observer calls.\n      // Observer call may create new transactions for which we need to call the observers and do cleanup.\n      // We don't want to nest these calls, so we execute these calls one after\n      // another.\n      // Also we need to ensure that all cleanups are called, even if the\n      // observes throw errors.\n      // This file is full of hacky try {} finally {} blocks to ensure that an\n      // event can throw errors and also that the cleanup is called.\n      cleanupTransactions(transactionCleanups, 0)\n    }\n  }\n}\n","\nimport {\n  isDeleted,\n  Item, AbstractType, Transaction, AbstractStruct // eslint-disable-line\n} from '../internals.js'\n\nimport * as set from 'lib0/set.js'\nimport * as array from 'lib0/array.js'\n\n/**\n * YEvent describes the changes on a YType.\n */\nexport class YEvent {\n  /**\n   * @param {AbstractType<any>} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {AbstractType<any>}\n     */\n    this.target = target\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    // @ts-ignore _item is defined because target is integrated\n    return getPathTo(this.currentTarget, this.target)\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * @return {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert:Array<any>}|{delete:number}|{retain:number}>}}\n   */\n  get changes () {\n    let changes = this._changes\n    if (changes === null) {\n      const target = this.target\n      const added = set.create()\n      const deleted = set.create()\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = []\n      /**\n       * @type {Map<string,{ action: 'add' | 'update' | 'delete', oldValue: any}>}\n       */\n      const keys = new Map()\n      changes = {\n        added, deleted, delta, keys\n      }\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target))\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp)\n          }\n        }\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp()\n                lastOp = { delete: 0 }\n              }\n              lastOp.delete += item.length\n              deleted.add(item)\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp()\n                lastOp = { insert: [] }\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent())\n              added.add(item)\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp()\n                lastOp = { retain: 0 }\n              }\n              lastOp.retain += item.length\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp()\n        }\n      }\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key))\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action\n          let oldValue\n          if (this.adds(item)) {\n            let prev = item.left\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                action = 'add'\n                oldValue = undefined\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete'\n              oldValue = array.last(/** @type {Item} */ item.content.getContent())\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue })\n        }\n      })\n      this._changes = changes\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = []\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub)\n    } else {\n      // parent is array-ish\n      let i = 0\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start\n      while (c !== child._item && c !== null) {\n        if (!c.deleted) {\n          i++\n        }\n        c = c.right\n      }\n      path.unshift(i)\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent)\n  }\n  return path\n}\n","\nimport {\n  removeEventHandlerListener,\n  callEventHandlerListeners,\n  addEventHandlerListener,\n  createEventHandler,\n  getState,\n  isVisible,\n  ContentType,\n  createID,\n  ContentAny,\n  ContentBinary,\n  getItemCleanStart,\n  ContentDoc, YText, YArray, UpdateEncoderV1, UpdateEncoderV2, Doc, Snapshot, Transaction, EventHandler, YEvent, Item, // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as iterator from 'lib0/iterator.js'\nimport * as error from 'lib0/error.js'\nimport * as math from 'lib0/math.js'\n\nconst maxSearchMarker = 80\n\n/**\n * A unique timestamp that identifies each marker.\n *\n * Time is relative,.. this is more like an ever-increasing clock.\n *\n * @type {number}\n */\nlet globalSearchMarkerTimestamp = 0\n\nexport class ArraySearchMarker {\n  /**\n   * @param {Item} p\n   * @param {number} index\n   */\n  constructor (p, index) {\n    p.marker = true\n    this.p = p\n    this.index = index\n    this.timestamp = globalSearchMarkerTimestamp++\n  }\n}\n\n/**\n * @param {ArraySearchMarker} marker\n */\nconst refreshMarkerTimestamp = marker => { marker.timestamp = globalSearchMarkerTimestamp++ }\n\n/**\n * This is rather complex so this function is the only thing that should overwrite a marker\n *\n * @param {ArraySearchMarker} marker\n * @param {Item} p\n * @param {number} index\n */\nconst overwriteMarker = (marker, p, index) => {\n  marker.p.marker = false\n  marker.p = p\n  p.marker = true\n  marker.index = index\n  marker.timestamp = globalSearchMarkerTimestamp++\n}\n\n/**\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {Item} p\n * @param {number} index\n */\nconst markPosition = (searchMarker, p, index) => {\n  if (searchMarker.length >= maxSearchMarker) {\n    // override oldest marker (we don't want to create more objects)\n    const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b)\n    overwriteMarker(marker, p, index)\n    return marker\n  } else {\n    // create new marker\n    const pm = new ArraySearchMarker(p, index)\n    searchMarker.push(pm)\n    return pm\n  }\n}\n\n/**\n * Search marker help us to find positions in the associative array faster.\n *\n * They speed up the process of finding a position without much bookkeeping.\n *\n * A maximum of `maxSearchMarker` objects are created.\n *\n * This function always returns a refreshed marker (updated timestamp)\n *\n * @param {AbstractType<any>} yarray\n * @param {number} index\n */\nexport const findMarker = (yarray, index) => {\n  if (yarray._start === null || index === 0 || yarray._searchMarker === null) {\n    return null\n  }\n  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => math.abs(index - a.index) < math.abs(index - b.index) ? a : b)\n  let p = yarray._start\n  let pindex = 0\n  if (marker !== null) {\n    p = marker.p\n    pindex = marker.index\n    refreshMarkerTimestamp(marker) // we used it, we might need to use it again\n  }\n  // iterate to right if possible\n  while (p.right !== null && pindex < index) {\n    if (!p.deleted && p.countable) {\n      if (index < pindex + p.length) {\n        break\n      }\n      pindex += p.length\n    }\n    p = p.right\n  }\n  // iterate to left if necessary (might be that pindex > index)\n  while (p.left !== null && pindex > index) {\n    p = p.left\n    if (!p.deleted && p.countable) {\n      pindex -= p.length\n    }\n  }\n  // we want to make sure that p can't be merged with left, because that would screw up everything\n  // in that cas just return what we have (it is most likely the best marker anyway)\n  // iterate to left until p can't be merged with left\n  while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {\n    p = p.left\n    if (!p.deleted && p.countable) {\n      pindex -= p.length\n    }\n  }\n\n  // @todo remove!\n  // assure position\n  // {\n  //   let start = yarray._start\n  //   let pos = 0\n  //   while (start !== p) {\n  //     if (!start.deleted && start.countable) {\n  //       pos += start.length\n  //     }\n  //     start = /** @type {Item} */ (start.right)\n  //   }\n  //   if (pos !== pindex) {\n  //     debugger\n  //     throw new Error('Gotcha position fail!')\n  //   }\n  // }\n  // if (marker) {\n  //   if (window.lengthes == null) {\n  //     window.lengthes = []\n  //     window.getLengthes = () => window.lengthes.sort((a, b) => a - b)\n  //   }\n  //   window.lengthes.push(marker.index - pindex)\n  //   console.log('distance', marker.index - pindex, 'len', p && p.parent.length)\n  // }\n  if (marker !== null && math.abs(marker.index - pindex) < /** @type {YText|YArray<any>} */ (p.parent).length / maxSearchMarker) {\n    // adjust existing marker\n    overwriteMarker(marker, p, pindex)\n    return marker\n  } else {\n    // create new marker\n    return markPosition(yarray._searchMarker, p, pindex)\n  }\n}\n\n/**\n * Update markers when a change happened.\n *\n * This should be called before doing a deletion!\n *\n * @param {Array<ArraySearchMarker>} searchMarker\n * @param {number} index\n * @param {number} len If insertion, len is positive. If deletion, len is negative.\n */\nexport const updateMarkerChanges = (searchMarker, index, len) => {\n  for (let i = searchMarker.length - 1; i >= 0; i--) {\n    const m = searchMarker[i]\n    if (len > 0) {\n      /**\n       * @type {Item|null}\n       */\n      let p = m.p\n      p.marker = false\n      // Ideally we just want to do a simple position comparison, but this will only work if\n      // search markers don't point to deleted items for formats.\n      // Iterate marker to prev undeleted countable position so we know what to do when updating a position\n      while (p && (p.deleted || !p.countable)) {\n        p = p.left\n        if (p && !p.deleted && p.countable) {\n          // adjust position. the loop should break now\n          m.index -= p.length\n        }\n      }\n      if (p === null || p.marker === true) {\n        // remove search marker if updated position is null or if position is already marked\n        searchMarker.splice(i, 1)\n        continue\n      }\n      m.p = p\n      p.marker = true\n    }\n    if (index < m.index || (len > 0 && index === m.index)) { // a simple index <= m.index check would actually suffice\n      m.index = math.max(index, m.index + len)\n    }\n  }\n}\n\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\nexport const getTypeChildren = t => {\n  let s = t._start\n  const arr = []\n  while (s) {\n    arr.push(s)\n    s = s.right\n  }\n  return arr\n}\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nexport const callTypeObservers = (type, transaction, event) => {\n  const changedType = type\n  const changedParentTypes = transaction.changedParentTypes\n  while (true) {\n    // @ts-ignore\n    map.setIfUndefined(changedParentTypes, type, () => []).push(event)\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent)\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction)\n}\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nexport class AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map()\n    /**\n     * @type {Item|null}\n     */\n    this._start = null\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null\n    this._length = 0\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler()\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent>,Transaction>}\n     */\n    this._dEH = createEventHandler()\n    /**\n     * @type {null | Array<ArraySearchMarker>}\n     */\n    this._searchMarker = null\n  }\n\n  /**\n   * @return {AbstractType<any>|null}\n   */\n  get parent () {\n    return this._item ? /** @type {AbstractType<any>} */ (this._item.parent) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y\n    this._item = item\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  clone () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    if (!transaction.local && this._searchMarker) {\n      this._searchMarker.length = 0\n    }\n  }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} start\n * @param {number} end\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListSlice = (type, start, end) => {\n  if (start < 0) {\n    start = type._length + start\n  }\n  if (end < 0) {\n    end = type._length + end\n  }\n  let len = end - start\n  const cs = []\n  let n = type._start\n  while (n !== null && len > 0) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      if (c.length <= start) {\n        start -= c.length\n      } else {\n        for (let i = start; i < c.length && len > 0; i++) {\n          cs.push(c[i])\n          len--\n        }\n        start = 0\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArray = type => {\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArraySnapshot = (type, snapshot) => {\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nexport const typeListForEach = (type, f) => {\n  let index = 0\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nexport const typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = []\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type))\n  })\n  return result\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nexport const typeListCreateIterator = type => {\n  let n = type._start\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null\n  let currentContentIndex = 0\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent()\n        currentContentIndex = 0\n        n = n.right // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++]\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n}\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n * Operates on a snapshotted state of the document.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,AbstractType<any>):void} f A function to execute on every element of this YArray.\n * @param {Snapshot} snapshot\n *\n * @private\n * @function\n */\nexport const typeListForEachSnapshot = (type, f, snapshot) => {\n  let index = 0\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nexport const typeListGet = (type, index) => {\n  const marker = findMarker(type, index)\n  let n = type._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length\n    }\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const store = doc.store\n  const right = referenceItem === null ? parent._start : referenceItem.right\n  /**\n   * @type {Array<Object|Array<any>|number>}\n   */\n  let jsonContent = []\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent))\n      left.integrate(transaction, 0)\n      jsonContent = []\n    }\n  }\n  content.forEach(c => {\n    switch (c.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        jsonContent.push(c)\n        break\n      default:\n        packJsonContent()\n        switch (c.constructor) {\n          case Uint8Array:\n          case ArrayBuffer:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))))\n            left.integrate(transaction, 0)\n            break\n          case Doc:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(/** @type {Doc} */ (c)))\n            left.integrate(transaction, 0)\n            break\n          default:\n            if (c instanceof AbstractType) {\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c))\n              left.integrate(transaction, 0)\n            } else {\n              throw new Error('Unexpected content type in insert operation')\n            }\n        }\n    }\n  })\n  packJsonContent()\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index === 0) {\n    if (parent._searchMarker) {\n      updateMarkerChanges(parent._searchMarker, index, content.length)\n    }\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  const startIndex = index\n  const marker = findMarker(parent, index)\n  let n = parent._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n    // we need to iterate one to the left so that the algorithm works\n    if (index === 0) {\n      // @todo refactor this as it actually doesn't consider formats\n      n = n.prev // important! get the left undeleted item so that we can actually decrease index\n      index += (n && n.countable && !n.deleted) ? n.length : 0\n    }\n  }\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n        }\n        break\n      }\n      index -= n.length\n    }\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, content.length)\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  const startIndex = index\n  const startLength = length\n  const marker = findMarker(parent, index)\n  let n = parent._start\n  if (marker !== null) {\n    n = marker.p\n    index -= marker.index\n  }\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n      }\n      index -= n.length\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length))\n      }\n      n.delete(transaction)\n      length -= n.length\n    }\n    n = n.right\n  }\n  if (length > 0) {\n    throw error.create('array length exceeded')\n  }\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, startIndex, -startLength + length /* in case we remove the above exception */)\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nexport const typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key)\n  if (c !== undefined) {\n    c.delete(transaction)\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nexport const typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  let content\n  if (value == null) {\n    content = new ContentAny([value])\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value])\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value))\n        break\n      case Doc:\n        content = new ContentDoc(/** @type {Doc} */ (value))\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value)\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0)\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGet = (parent, key) => {\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nexport const typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {}\n  parent._map.forEach((value, key) => {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1]\n    }\n  })\n  return res\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const typeMapHas = (parent, key) => {\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left\n  }\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined\n}\n\n/**\n * @param {Map<string,Item>} map\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nexport const createMapIterator = map => iterator.iteratorFilter(map.entries(), /** @param {any} entry */ entry => !entry[1].deleted)\n","/**\n * @module YArray\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeListGet,\n  typeListToArray,\n  typeListForEach,\n  typeListCreateIterator,\n  typeListInsertGenerics,\n  typeListDelete,\n  typeListMap,\n  YArrayRefID,\n  callTypeObservers,\n  transact,\n  ArraySearchMarker, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\nimport { typeListSlice } from './AbstractType.js'\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n */\nexport class YArrayEvent extends YEvent {\n  /**\n   * @param {YArray<T>} yarray The changed type\n   * @param {Transaction} transaction The transaction object\n   */\n  constructor (yarray, transaction) {\n    super(yarray, transaction)\n    this._transaction = transaction\n  }\n}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YArray extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = []\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = []\n  }\n\n  /**\n   * Construct a new YArray containing the specified items.\n   * @template T\n   * @param {Array<T>} items\n   * @return {YArray<T>}\n   */\n  static from (items) {\n    const a = new YArray()\n    a.push(items)\n    return a\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YArray()\n  }\n\n  /**\n   * @return {YArray<T>}\n   */\n  clone () {\n    const arr = new YArray()\n    arr.insert(0, this.toArray().map(el =>\n      el instanceof AbstractType ? el.clone() : el\n    ))\n    return arr\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs)\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction))\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content)\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content)\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content)\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length)\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<T>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template T,M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function on once on overy element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f)\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YArrayRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\nexport const readYArray = decoder => new YArray()\n","\n/**\n * @module YMap\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapHas,\n  createMapIterator,\n  YMapRefID,\n  callTypeObservers,\n  transact,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as iterator from 'lib0/iterator.js'\n\n/**\n * @template T\n * Event that describes the changes on a YMap.\n */\nexport class YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction)\n    this.keysChanged = subs\n  }\n}\n\n/**\n * @template T number|string|Object|Array|Uint8Array\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super()\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null\n\n    if (entries === undefined) {\n      this._prelimContent = new Map()\n    } else {\n      this._prelimContent = new Map(entries)\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;/** @type {Map<string, any>} */ (this._prelimContent).forEach((value, key) => {\n      this.set(key, value)\n    })\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * @return {YMap<T>}\n   */\n  clone () {\n    const map = new YMap()\n    this.forEach((value, key) => {\n      map.set(key, value instanceof AbstractType ? value.clone() : value)\n    })\n    return map\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs))\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,T>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {}\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1]\n        map[key] = v instanceof AbstractType ? v.toJSON() : v\n      }\n    })\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this._map)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the values for each element in the YMap Type.\n   *\n   * @return {IterableIterator<any>}\n   */\n  values () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<any>}\n   */\n  entries () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => [v[0], v[1].content.getContent()[v[1].length - 1]])\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(T,string,YMap<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {}\n    this._map.forEach((item, key) => {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this)\n      }\n    })\n    return map\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key)\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {T} value The value of the element to add\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, value)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value)\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {T|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YMapRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n *\n * @private\n * @function\n */\nexport const readYMap = decoder => new YMap()\n","\n/**\n * @module YText\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  getItemCleanStart,\n  getState,\n  isVisible,\n  createID,\n  YTextRefID,\n  callTypeObservers,\n  transact,\n  ContentEmbed,\n  GC,\n  ContentFormat,\n  ContentString,\n  splitSnapshotAffectedStructs,\n  iterateDeletedStructs,\n  iterateStructs,\n  findMarker,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapGetAll,\n  updateMarkerChanges,\n  ArraySearchMarker, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, ID, Doc, Item, Snapshot, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as object from 'lib0/object.js'\nimport * as map from 'lib0/map.js'\nimport * as error from 'lib0/error.js'\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && object.equalFlat(a, b))\n\nexport class ItemTextListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {number} index\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, index, currentAttributes) {\n    this.left = left\n    this.right = right\n    this.index = index\n    this.currentAttributes = currentAttributes\n  }\n\n  /**\n   * Only call this if you know that this.right is defined\n   */\n  forward () {\n    if (this.right === null) {\n      error.unexpectedCase()\n    }\n    switch (this.right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!this.right.deleted) {\n          this.index += this.right.length\n        }\n        break\n      case ContentFormat:\n        if (!this.right.deleted) {\n          updateCurrentAttributes(this.currentAttributes, /** @type {ContentFormat} */ (this.right.content))\n        }\n        break\n    }\n    this.left = this.right\n    this.right = this.right.right\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} pos\n * @param {number} count steps to move forward\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, pos, count) => {\n  while (pos.right !== null && count > 0) {\n    switch (pos.right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!pos.right.deleted) {\n          if (count < pos.right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count))\n          }\n          pos.index += pos.right.length\n          count -= pos.right.length\n        }\n        break\n      case ContentFormat:\n        if (!pos.right.deleted) {\n          updateCurrentAttributes(pos.currentAttributes, /** @type {ContentFormat} */ (pos.right.content))\n        }\n        break\n    }\n    pos.left = pos.right\n    pos.right = pos.right.right\n    // pos.forward() - we don't forward because that would halve the performance because we already do the checks above\n  }\n  return pos\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index) => {\n  const currentAttributes = new Map()\n  const marker = findMarker(parent, index)\n  if (marker) {\n    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes)\n    return findNextPosition(transaction, pos, index - marker.index)\n  } else {\n    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes)\n    return findNextPosition(transaction, pos, index)\n  }\n}\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  // check if we really need to remove attributes\n  while (\n    currPos.right !== null && (\n      currPos.right.deleted === true || (\n        currPos.right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (currPos.right.content).key), /** @type {ContentFormat} */ (currPos.right.content).value)\n      )\n    )\n  ) {\n    if (!currPos.right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (currPos.right.content).key)\n    }\n    currPos.forward()\n  }\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  let nextFormat = currPos.left\n  const right = currPos.right\n  negatedAttributes.forEach((val, key) => {\n    nextFormat = new Item(createID(ownClientId, getState(doc.store, ownClientId)), nextFormat, nextFormat && nextFormat.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n    nextFormat.integrate(transaction, 0)\n    currPos.right = nextFormat\n  })\n}\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format\n  if (value === null) {\n    currentAttributes.delete(key)\n  } else {\n    currentAttributes.set(key, value)\n  }\n}\n\n/**\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  while (true) {\n    if (currPos.right === null) {\n      break\n    } else if (currPos.right.deleted || (currPos.right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (currPos.right.content)).key] || null, /** @type {ContentFormat} */ (currPos.right.content).value))) {\n      //\n    } else {\n      break\n    }\n    currPos.forward()\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const negatedAttributes = new Map()\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key]\n    const currentVal = currPos.currentAttributes.get(key) || null\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal)\n      const { left, right } = currPos\n      currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n      currPos.right.integrate(transaction, 0)\n      currPos.forward()\n    }\n  }\n  return negatedAttributes\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {string|object} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, text, attributes) => {\n  currPos.currentAttributes.forEach((val, key) => {\n    if (attributes[key] === undefined) {\n      attributes[key] = null\n    }\n  })\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes)\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : new ContentEmbed(text)\n  let { left, right, index } = currPos\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength())\n  }\n  right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content)\n  right.integrate(transaction, 0)\n  currPos.right = right\n  currPos.index = index\n  currPos.forward()\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, length, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes)\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  while (length > 0 && currPos.right !== null) {\n    if (!currPos.right.deleted) {\n      switch (currPos.right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (currPos.right.content)\n          const attr = attributes[key]\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key)\n            } else {\n              negatedAttributes.set(key, value)\n            }\n            currPos.right.delete(transaction)\n          }\n          break\n        }\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length))\n          }\n          length -= currPos.right.length\n          break\n      }\n    }\n    currPos.forward()\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = ''\n    for (; length > 0; length--) {\n      newlines += '\\n'\n    }\n    currPos.right = new Item(createID(ownClientId, getState(doc.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines))\n    currPos.right.integrate(transaction, 0)\n    currPos.forward()\n  }\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} end exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} endAttributes This attribute is modified!\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, end, startAttributes, endAttributes) => {\n  while (end && end.content.constructor !== ContentString && end.content.constructor !== ContentEmbed) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      updateCurrentAttributes(endAttributes, /** @type {ContentFormat} */ (end.content))\n    }\n    end = end.right\n  }\n  let cleanups = 0\n  while (start !== end) {\n    if (!start.deleted) {\n      const content = start.content\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content)\n          if ((endAttributes.get(key) || null) !== value || (startAttributes.get(key) || null) === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction)\n            cleanups++\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right)\n  }\n  return cleanups\n}\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || (item.right.content.constructor !== ContentString && item.right.content.constructor !== ContentEmbed))) {\n    item = item.right\n  }\n  const attrs = new Set()\n  // iterate back until a content item is found\n  while (item && (item.deleted || (item.content.constructor !== ContentString && item.content.constructor !== ContentEmbed))) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key\n      if (attrs.has(key)) {\n        item.delete(transaction)\n      } else {\n        attrs.add(key)\n      }\n    }\n    item = item.left\n  }\n}\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nexport const cleanupYTextFormatting = type => {\n  let res = 0\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start)\n    let end = type._start\n    let startAttributes = map.create()\n    const currentAttributes = map.copy(startAttributes)\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content))\n            break\n          case ContentEmbed:\n          case ContentString:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes)\n            startAttributes = map.copy(currentAttributes)\n            start = end\n            break\n        }\n      }\n      end = end.right\n    }\n  })\n  return res\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemTextListPosition} currPos\n * @param {number} length\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, length) => {\n  const startLength = length\n  const startAttrs = map.copy(currPos.currentAttributes)\n  const start = currPos.right\n  while (length > 0 && currPos.right !== null) {\n    if (currPos.right.deleted === false) {\n      switch (currPos.right.content.constructor) {\n        case ContentEmbed:\n        case ContentString:\n          if (length < currPos.right.length) {\n            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length))\n          }\n          length -= currPos.right.length\n          currPos.right.delete(transaction)\n          break\n      }\n    }\n    currPos.forward()\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, currPos.right, startAttrs, map.copy(currPos.currentAttributes))\n  }\n  const parent = /** @type {AbstractType<any>} */ (/** @type {Item} */ (currPos.left || currPos.right).parent)\n  if (parent._searchMarker) {\n    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length)\n  }\n  return currPos\n}\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @typedef {Object} DeltaItem\n * @property {number|undefined} DeltaItem.delete\n * @property {number|undefined} DeltaItem.retain\n * @property {string|undefined} DeltaItem.insert\n * @property {Object<string,any>} DeltaItem.attributes\n */\n\n/**\n * Event that describes the changes on a YText type.\n */\nexport class YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed\n   */\n  constructor (ytext, transaction, subs) {\n    super(ytext, transaction)\n    /**\n     * @type {Array<DeltaItem>|null}\n     */\n    this._delta = null\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.keysChanged = new Set()\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true\n      } else {\n        this.keysChanged.add(sub)\n      }\n    })\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<DeltaItem>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc)\n      this._delta = []\n      transact(y, transaction => {\n        const delta = /** @type {Array<DeltaItem>} */ (this._delta)\n        const currentAttributes = new Map() // saves all current attributes for insert\n        const oldAttributes = new Map()\n        let item = this.target._start\n        /**\n         * @type {string?}\n         */\n        let action = null\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {} // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = ''\n        let retain = 0\n        let deleteLen = 0\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op\n            switch (action) {\n              case 'delete':\n                op = { delete: deleteLen }\n                deleteLen = 0\n                break\n              case 'insert':\n                op = { insert }\n                if (currentAttributes.size > 0) {\n                  op.attributes = {}\n                  currentAttributes.forEach((value, key) => {\n                    if (value !== null) {\n                      op.attributes[key] = value\n                    }\n                  })\n                }\n                insert = ''\n                break\n              case 'retain':\n                op = { retain }\n                if (Object.keys(attributes).length > 0) {\n                  op.attributes = {}\n                  for (const key in attributes) {\n                    op.attributes[key] = attributes[key]\n                  }\n                }\n                retain = 0\n                break\n            }\n            delta.push(op)\n            action = null\n          }\n        }\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp()\n                  action = 'insert'\n                  insert = /** @type {ContentEmbed} */ (item.content).embed\n                  addOp()\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += 1\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += 1\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp()\n                    action = 'insert'\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += item.length\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += item.length\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content)\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) || null\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) || null))) {\n                      delete attributes[key]\n                    } else {\n                      attributes[key] = value\n                    }\n                  } else {\n                    item.delete(transaction)\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value)\n                const curVal = currentAttributes.get(key) || null\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp()\n                  }\n                  attributes[key] = curVal\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value)\n                const attr = attributes[key]\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (value === null) {\n                      attributes[key] = value\n                    } else {\n                      delete attributes[key]\n                    }\n                  } else {\n                    item.delete(transaction)\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp()\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content))\n              }\n              break\n            }\n          }\n          item = item.right\n        }\n        addOp()\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1]\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop()\n          } else {\n            break\n          }\n        }\n      })\n    }\n    return this._delta\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nexport class YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super()\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : []\n    /**\n     * @type {Array<ArraySearchMarker>}\n     */\n    this._searchMarker = []\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f())\n    } catch (e) {\n      console.error(e)\n    }\n    this._pending = null\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * @return {YText}\n   */\n  clone () {\n    const text = new YText()\n    text.applyDelta(this.toDelta())\n    return text\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    super._callObserver(transaction, parentSubs)\n    const event = new YTextEvent(this, transaction, parentSubs)\n    const doc = transaction.doc\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local) {\n      // check if another formatting item was inserted\n      let foundFormattingItem = false\n      for (const [client, afterClock] of transaction.afterState.entries()) {\n        const clock = transaction.beforeState.get(client) || 0\n        if (afterClock === clock) {\n          continue\n        }\n        iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n          if (!item.deleted && /** @type {Item} */ (item).content.constructor === ContentFormat) {\n            foundFormattingItem = true\n          }\n        })\n        if (foundFormattingItem) {\n          break\n        }\n      }\n      if (!foundFormattingItem) {\n        iterateDeletedStructs(transaction, transaction.deleteSet, item => {\n          if (item instanceof GC || foundFormattingItem) {\n            return\n          }\n          if (item.parent === this && item.content.constructor === ContentFormat) {\n            foundFormattingItem = true\n          }\n        })\n      }\n      transact(doc, (t) => {\n        if (foundFormattingItem) {\n          // If a formatting item was inserted, we simply clean the whole type.\n          // We need to compute currentAttributes for the current position anyway.\n          cleanupYTextFormatting(this)\n        } else {\n          // If no formatting attribute was inserted, we can make due with contextless\n          // formatting cleanups.\n          // Contextless: it is not necessary to compute currentAttributes for the affected position.\n          iterateDeletedStructs(t, t.deleteSet, item => {\n            if (item instanceof GC) {\n              return\n            }\n            if (item.parent === this) {\n              cleanupContextlessFormattingGap(t, item)\n            }\n          })\n        }\n      })\n    }\n    callTypeObservers(this, transaction, event)\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    let str = ''\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str\n      }\n      n = n.right\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  [opts]\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const currPos = new ItemTextListPosition(null, this._start, 0, new Map())\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i]\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, ins, op.attributes || {})\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, op.retain, op.attributes || {})\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, op.delete)\n          }\n        }\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta))\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    /**\n     * @type{Array<any>}\n     */\n    const ops = []\n    const currentAttributes = new Map()\n    const doc = /** @type {Doc} */ (this.doc)\n    let str = ''\n    let n = this._start\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}\n        let addAttributes = false\n        currentAttributes.forEach((value, key) => {\n          addAttributes = true\n          attributes[key] = value\n        })\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str }\n        if (addAttributes) {\n          op.attributes = attributes\n        }\n        ops.push(op)\n        str = ''\n      }\n    }\n    // snapshots are merged again after the transaction, so we need to keep the\n    // transalive until we are done\n    transact(doc, transaction => {\n      if (snapshot) {\n        splitSnapshotAffectedStructs(transaction, snapshot)\n      }\n      if (prevSnapshot) {\n        splitSnapshotAffectedStructs(transaction, prevSnapshot)\n      }\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange')\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'removed') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' })\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'added') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' })\n                }\n              } else if (cur !== undefined) {\n                packStr()\n                currentAttributes.delete('ychange')\n              }\n              str += /** @type {ContentString} */ (n.content).str\n              break\n            }\n            case ContentEmbed: {\n              packStr()\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: /** @type {ContentEmbed} */ (n.content).embed\n              }\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({})\n                op.attributes = attrs\n                currentAttributes.forEach((value, key) => {\n                  attrs[key] = value\n                })\n              }\n              ops.push(op)\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr()\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content))\n              }\n              break\n          }\n        }\n        n = n.right\n      }\n      packStr()\n    }, splitSnapshotAffectedStructs)\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index)\n        if (!attributes) {\n          attributes = {}\n          // @ts-ignore\n          pos.currentAttributes.forEach((v, k) => { attributes[k] = v })\n        }\n        insertText(transaction, this, pos, text, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes))\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object} embed The Object that represents the embed.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes = {}) {\n    if (embed.constructor !== Object) {\n      throw new Error('Embed must be an Object')\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index)\n        insertText(transaction, this, pos, embed, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes))\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        deleteText(transaction, findPosition(transaction, this, index), length)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length))\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const pos = findPosition(transaction, this, index)\n        if (pos.right === null) {\n          return\n        }\n        formatText(transaction, this, pos, length, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes))\n    }\n  }\n\n  /**\n   * Removes an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.removeAttribute(attributeName))\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {any} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.setAttribute(attributeName, attributeValue))\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {any} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YTextRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YText}\n *\n * @private\n * @function\n */\nexport const readYText = decoder => new YText()\n","/**\n * @module YXml\n */\n\nimport {\n  YXmlEvent,\n  YXmlElement,\n  AbstractType,\n  typeListMap,\n  typeListForEach,\n  typeListInsertGenerics,\n  typeListInsertGenericsAfter,\n  typeListDelete,\n  typeListToArray,\n  YXmlFragmentRefID,\n  callTypeObservers,\n  transact,\n  typeListGet,\n  typeListSlice,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Doc, ContentType, Transaction, Item, YXmlText, YXmlHook, Snapshot // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nexport class YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f\n    this._root = root\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start)\n    this._firstCall = true\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode\n    let type = /** @type {any} */ (n.content).type\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right\n              break\n            } else if (n.parent === this._root) {\n              n = null\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nexport class YXmlFragment extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = []\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get firstChild () {\n    const first = this._first\n    return first ? first.content.getContent()[0] : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  /**\n   * @return {YXmlFragment}\n   */\n  clone () {\n    const el = new YXmlFragment()\n    // @ts-ignore\n    el.insert(0, el.toArray().map(item => item instanceof AbstractType ? item.clone() : item))\n    return el\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query)\n    const next = iterator.next()\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    return Array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction))\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment()\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this)\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null)\n    })\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insertAfter (ref, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        const refItem = (ref && ref instanceof AbstractType) ? ref._item : ref\n        typeListInsertGenericsAfter(transaction, this, refItem, content)\n      })\n    } else {\n      const pc = /** @type {Array<any>} */ (this._prelimContent)\n      const index = ref === null ? 0 : pc.findIndex(el => el === ref) + 1\n      if (index === 0 && ref !== null) {\n        throw error.create('Reference item not found')\n      }\n      pc.splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length)\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content)\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<YXmlElement|YXmlText>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content)\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {YXmlElement|YXmlText}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @return {Array<YXmlElement|YXmlText>}\n   */\n  slice (start = 0, end = this.length) {\n    return typeListSlice(this, start, end)\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlFragmentRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\nexport const readYXmlFragment = decoder => new YXmlFragment()\n","\nimport {\n  YXmlFragment,\n  transact,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapGetAll,\n  typeListForEach,\n  YXmlElementRefID,\n  YXmlText, ContentType, AbstractType, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Snapshot, Doc, Item // eslint-disable-line\n} from '../internals.js'\n\n/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\nexport class YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super()\n    this.nodeName = nodeName\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map()\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value)\n    })\n    this._prelimAttrs = null\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * @return {YXmlElement}\n   */\n  clone () {\n    const el = new YXmlElement(this.nodeName)\n    const attrs = this.getAttributes()\n    for (const key in attrs) {\n      el.setAttribute(key, attrs[key])\n    }\n    // @ts-ignore\n    el.insert(0, el.toArray().map(item => item instanceof AbstractType ? item.clone() : item))\n    return el\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes()\n    const stringBuilder = []\n    const keys = []\n    for (const key in attrs) {\n      keys.push(key)\n    }\n    keys.sort()\n    const keysLen = keys.length\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i]\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"')\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase()\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : ''\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName)\n      })\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName)\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {String} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue)\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {String} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName)\n    const attrs = this.getAttributes()\n    for (const key in attrs) {\n      dom.setAttribute(key, attrs[key])\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding))\n    })\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlElementRefID)\n    encoder.writeKey(this.nodeName)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlElement}\n *\n * @function\n */\nexport const readYXmlElement = decoder => new YXmlElement(decoder.readKey())\n","\nimport {\n  YEvent,\n  YXmlText, YXmlElement, YXmlFragment, Transaction // eslint-disable-line\n} from '../internals.js'\n\n/**\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nexport class YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction)\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string>}\n     */\n    this.attributesChanged = new Set()\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true\n      } else {\n        this.attributesChanged.add(sub)\n      }\n    })\n  }\n}\n","\nimport {\n  YMap,\n  YXmlHookRefID,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2 // eslint-disable-line\n} from '../internals.js'\n\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nexport class YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor (hookName) {\n    super()\n    /**\n     * @type {string}\n     */\n    this.hookName = hookName\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n  _copy () {\n    return new YXmlHook(this.hookName)\n  }\n\n  /**\n   * @return {YXmlHook}\n   */\n  clone () {\n    const el = new YXmlHook(this.hookName)\n    this.forEach((value, key) => {\n      el.set(key, value)\n    })\n    return el\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName]\n    let dom\n    if (hook !== undefined) {\n      dom = hook.createDom(this)\n    } else {\n      dom = document.createElement(this.hookName)\n    }\n    dom.setAttribute('data-yjs-hook', this.hookName)\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlHookRefID)\n    encoder.writeKey(this.hookName)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\nexport const readYXmlHook = decoder =>\n  new YXmlHook(decoder.readKey())\n","\nimport {\n  YText,\n  YXmlTextRefID,\n  ContentType, YXmlElement, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, // eslint-disable-line\n} from '../internals.js'\n\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nexport class YXmlText extends YText {\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get nextSibling () {\n    const n = this._item ? this._item.next : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  /**\n   * @type {YXmlElement|YXmlText|null}\n   */\n  get prevSibling () {\n    const n = this._item ? this._item.prev : null\n    return n ? /** @type {YXmlElement|YXmlText} */ (/** @type {ContentType} */ (n.content).type) : null\n  }\n\n  _copy () {\n    return new YXmlText()\n  }\n\n  /**\n   * @return {YXmlText}\n   */\n  clone () {\n    const text = new YXmlText()\n    text.applyDelta(this.toDelta())\n    return text\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString())\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  toString () {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = []\n      for (const nodeName in delta.attributes) {\n        const attrs = []\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({ key, value: delta.attributes[nodeName][key] })\n        }\n        // sort attributes to get a unique order\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1)\n        nestedNodes.push({ nodeName, attrs })\n      }\n      // sort node order to get a unique order\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1)\n      // now convert to dom string\n      let str = ''\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i]\n        str += `<${node.nodeName}`\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j]\n          str += ` ${attr.key}=\"${attr.value}\"`\n        }\n        str += '>'\n      }\n      str += delta.insert\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`\n      }\n      return str\n    }).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   */\n  _write (encoder) {\n    encoder.writeTypeRef(YXmlTextRefID)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\nexport const readYXmlText = decoder => new YXmlText()\n","\nimport {\n  UpdateEncoderV1, UpdateEncoderV2, ID, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\nexport class AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id\n    this.length = length\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get deleted () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw error.methodUnimplemented()\n  }\n}\n","\nimport {\n  AbstractStruct,\n  addStruct,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nexport const structGCRefNumber = 0\n\n/**\n * @private\n */\nexport class GC extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset\n      this.length -= offset\n    }\n    addStruct(transaction.doc.store, this)\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structGCRefNumber)\n    encoder.writeLen(this.length - offset)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\nexport class ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeBuf(this.content)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentBinary}\n */\nexport const readContentBinary = decoder => new ContentBinary(decoder.readBuf())\n","\nimport {\n  addToDeleteSet,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nexport class ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset)\n    this.len = offset\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len)\n    item.markDeleted()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeLen(this.len - offset)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2 } decoder\n * @return {ContentDeleted}\n */\nexport const readContentDeleted = decoder => new ContentDeleted(decoder.readLen())\n","\nimport {\n  Doc, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentDoc {\n  /**\n   * @param {Doc} doc\n   */\n  constructor (doc) {\n    if (doc._item) {\n      console.error('This document was already integrated as a sub-document. You should create a second instance instead with the same guid.')\n    }\n    /**\n     * @type {Doc}\n     */\n    this.doc = doc\n    /**\n     * @type {any}\n     */\n    const opts = {}\n    this.opts = opts\n    if (!doc.gc) {\n      opts.gc = false\n    }\n    if (doc.autoLoad) {\n      opts.autoLoad = true\n    }\n    if (doc.meta !== null) {\n      opts.meta = doc.meta\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.doc]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentDoc}\n   */\n  copy () {\n    return new ContentDoc(this.doc)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDoc}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentDoc} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // this needs to be reflected in doc.destroy as well\n    this.doc._item = item\n    transaction.subdocsAdded.add(this.doc)\n    if (this.doc.shouldLoad) {\n      transaction.subdocsLoaded.add(this.doc)\n    }\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (transaction.subdocsAdded.has(this.doc)) {\n      transaction.subdocsAdded.delete(this.doc)\n    } else {\n      transaction.subdocsRemoved.add(this.doc)\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) { }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(this.doc.guid)\n    encoder.writeAny(this.opts)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 9\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentDoc}\n */\nexport const readContentDoc = decoder => new ContentDoc(new Doc({ guid: decoder.readString(), ...decoder.readAny() }))\n","\nimport {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeJSON(this.embed)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentEmbed}\n */\nexport const readContentEmbed = decoder => new ContentEmbed(decoder.readJSON())\n","\nimport {\n  AbstractType, UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Item, StructStore, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key\n    this.value = value\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentFormat}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    // @todo searchmarker are currently unsupported for rich text documents\n    /** @type {AbstractType<any>} */ (item.parent)._searchMarker = null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeKey(this.key)\n    encoder.writeJSON(this.value)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentFormat}\n */\nexport const readContentFormat = decoder => new ContentFormat(decoder.readString(), decoder.readJSON())\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @private\n */\nexport class ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentJSON}\n   */\n  copy () {\n    return new ContentJSON(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n  splice (offset) {\n    const right = new ContentJSON(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoder.writeLen(len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoder.writeString(c === undefined ? 'undefined' : JSON.stringify(c))\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 2\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentJSON}\n */\nexport const readContentJSON = decoder => {\n  const len = decoder.readLen()\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    const c = decoder.readString()\n    if (c === 'undefined') {\n      cs.push(undefined)\n    } else {\n      cs.push(JSON.parse(c))\n    }\n  }\n  return new ContentJSON(cs)\n}\n","import {\n  UpdateEncoderV1, UpdateEncoderV2, UpdateDecoderV1, UpdateDecoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nexport class ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoder.writeLen(len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoder.writeAny(c)\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentAny}\n */\nexport const readContentAny = decoder => {\n  const len = decoder.readLen()\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    cs.push(decoder.readAny())\n  }\n  return new ContentAny(cs)\n}\n","import {\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\n/**\n * @private\n */\nexport class ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset))\n    this.str = this.str.slice(0, offset)\n\n    // Prevent encoding invalid documents because of splitting of surrogate pairs: https://github.com/yjs/yjs/issues/248\n    const firstCharCode = this.str.charCodeAt(offset - 1)\n    if (firstCharCode >= 0xD800 && firstCharCode <= 0xDBFF) {\n      // Last character of the left split is the start of a surrogate utf16/ucs2 pair.\n      // We don't support splitting of surrogate pairs because this may lead to invalid documents.\n      // Replace the invalid character with a unicode replacement character (� / U+FFFD)\n      this.str = this.str.slice(0, offset - 1) + '�'\n      // replace right as well\n      right.str = '�' + right.str.slice(1)\n    }\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeString(offset === 0 ? this.str : this.str.slice(offset))\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentString}\n */\nexport const readContentString = decoder => new ContentString(decoder.readString())\n","\nimport {\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, Item, YEvent, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\n\n/**\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractType<any>>}\n * @private\n */\nexport const typeRefs = [\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText\n]\n\nexport const YArrayRefID = 0\nexport const YMapRefID = 1\nexport const YTextRefID = 2\nexport const YXmlElementRefID = 3\nexport const YXmlFragmentRefID = 4\nexport const YXmlHookRefID = 5\nexport const YXmlTextRefID = 6\n\n/**\n * @private\n */\nexport class ContentType {\n  /**\n   * @param {AbstractType<YEvent>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else {\n        // Whis will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item)\n      }\n      item = item.right\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else {\n        // same as above\n        transaction._mergeStructs.push(item)\n      }\n    })\n    transaction.changed.delete(this.type)\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start\n    while (item !== null) {\n      item.gc(store, true)\n      item = item.right\n    }\n    this.type._start = null\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true)\n        item = item.left\n      }\n    })\n    this.type._map = new Map()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * @private\n *\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @return {ContentType}\n */\nexport const readContentType = decoder => new ContentType(typeRefs[decoder.readTypeRef()](decoder))\n","\nimport {\n  GC,\n  getState,\n  AbstractStruct,\n  replaceStruct,\n  addStruct,\n  addToDeleteSet,\n  findRootTypeKey,\n  compareIDs,\n  getItem,\n  getItemCleanEnd,\n  getItemCleanStart,\n  readContentDeleted,\n  readContentBinary,\n  readContentJSON,\n  readContentAny,\n  readContentString,\n  readContentEmbed,\n  readContentDoc,\n  createID,\n  readContentFormat,\n  readContentType,\n  addChangedTypeToTransaction,\n  UpdateDecoderV1, UpdateDecoderV2, UpdateEncoderV1, UpdateEncoderV2, ContentType, ContentDeleted, StructStore, ID, AbstractType, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\nimport * as binary from 'lib0/binary.js'\n\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\nexport const followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id\n  let diff = 0\n  let item\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff)\n    }\n    item = getItem(store, nextID)\n    diff = nextID.clock - item.id.clock\n    nextID = item.redone\n  } while (nextID !== null && item instanceof Item)\n  return {\n    item, diff\n  }\n}\n\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\nexport const keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep\n    item = /** @type {AbstractType<any>} */ (item.parent)._item\n  }\n}\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nexport const splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  )\n  if (leftItem.deleted) {\n    rightItem.markDeleted()\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff)\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem)\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem)\n  }\n  leftItem.length = diff\n  return rightItem\n}\n\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n *\n * @return {Item|null}\n *\n * @private\n */\nexport const redoItem = (transaction, item, redoitems) => {\n  const doc = transaction.doc\n  const store = doc.store\n  const ownClientID = doc.clientID\n  const redone = item.redone\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone)\n  }\n  let parentItem = /** @type {AbstractType<any>} */ (item.parent)._item\n  /**\n   * @type {Item|null}\n   */\n  let left\n  /**\n   * @type {Item|null}\n   */\n  let right\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left\n    right = item\n  } else {\n    // Is a map item. Insert as current value\n    left = item\n    while (left.right !== null) {\n      left = left.right\n      if (left.id.client !== ownClientID) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null\n      }\n    }\n    if (left.right !== null) {\n      left = /** @type {Item} */ (/** @type {AbstractType<any>} */ (item.parent)._map.get(item.parentSub))\n    }\n    right = null\n  }\n  // make sure that parent is redone\n  if (parentItem !== null && parentItem.deleted === true && parentItem.redone === null) {\n    // try to undo parent if it will be undone anyway\n    if (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems) === null) {\n      return null\n    }\n  }\n  if (parentItem !== null && parentItem.redone !== null) {\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone)\n    }\n    // find next cloned_redo items\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left\n      // trace redone until parent matches\n      while (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone)\n      }\n      if (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item === parentItem) {\n        left = leftTrace\n        break\n      }\n      left = left.left\n    }\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right\n      // trace redone until parent matches\n      while (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone)\n      }\n      if (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item === parentItem) {\n        right = rightTrace\n        break\n      }\n      right = right.right\n    }\n  }\n  const nextClock = getState(store, ownClientID)\n  const nextId = createID(ownClientID, nextClock)\n  const redoneItem = new Item(\n    nextId,\n    left, left && left.lastId,\n    right, right && right.id,\n    parentItem === null ? item.parent : /** @type {ContentType} */ (parentItem.content).type,\n    item.parentSub,\n    item.content.copy()\n  )\n  item.redone = nextId\n  keepItem(redoneItem, true)\n  redoneItem.integrate(transaction, 0)\n  return redoneItem\n}\n\n/**\n * Abstract class that represents any content.\n */\nexport class Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength())\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub\n    /**\n     * If this type's effect is reundone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content\n    /**\n     * bit1: keep\n     * bit2: countable\n     * bit3: deleted\n     * bit4: mark - mark node as fast-search-marker\n     * @type {number} byte\n     */\n    this.info = this.content.isCountable() ? binary.BIT2 : 0\n  }\n\n  /**\n   * This is used to mark the item as an indexed fast-search marker\n   *\n   * @type {boolean}\n   */\n  set marker (isMarked) {\n    if (((this.info & binary.BIT4) > 0) !== isMarked) {\n      this.info ^= binary.BIT4\n    }\n  }\n\n  get marker () {\n    return (this.info & binary.BIT4) > 0\n  }\n\n  /**\n   * If true, do not garbage collect this Item.\n   */\n  get keep () {\n    return (this.info & binary.BIT1) > 0\n  }\n\n  set keep (doKeep) {\n    if (this.keep !== doKeep) {\n      this.info ^= binary.BIT1\n    }\n  }\n\n  get countable () {\n    return (this.info & binary.BIT2) > 0\n  }\n\n  /**\n   * Whether this item was deleted or not.\n   * @type {Boolean}\n   */\n  get deleted () {\n    return (this.info & binary.BIT3) > 0\n  }\n\n  set deleted (doDelete) {\n    if (this.deleted !== doDelete) {\n      this.info ^= binary.BIT3\n    }\n  }\n\n  markDeleted () {\n    this.info |= binary.BIT3\n  }\n\n  /**\n   * Return the creator clientID of the missing op or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {\n      return this.origin.client\n    }\n    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {\n      return this.rightOrigin.client\n    }\n    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {\n      return this.parent.client\n    }\n\n    // We have all missing ids, now find the items\n\n    if (this.origin) {\n      this.left = getItemCleanEnd(transaction, store, this.origin)\n      this.origin = this.left.lastId\n    }\n    if (this.rightOrigin) {\n      this.right = getItemCleanStart(transaction, this.rightOrigin)\n      this.rightOrigin = this.right.id\n    }\n    if ((this.left && this.left.constructor === GC) || (this.right && this.right.constructor === GC)) {\n      this.parent = null\n    }\n    // only set parent if this shouldn't be garbage collected\n    if (!this.parent) {\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent\n        this.parentSub = this.left.parentSub\n      }\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent\n        this.parentSub = this.right.parentSub\n      }\n    } else if (this.parent.constructor === ID) {\n      const parentItem = getItem(store, this.parent)\n      if (parentItem.constructor === GC) {\n        this.parent = null\n      } else {\n        this.parent = /** @type {ContentType} */ (parentItem.content).type\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset\n      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1))\n      this.origin = this.left.lastId\n      this.content = this.content.splice(offset)\n      this.length -= offset\n    }\n\n    if (this.parent) {\n      if ((!this.left && (!this.right || this.right.left !== null)) || (this.left && this.left.right !== this.right)) {\n        /**\n         * @type {Item|null}\n         */\n        let left = this.left\n\n        /**\n         * @type {Item|null}\n         */\n        let o\n        // set o to the first conflicting item\n        if (left !== null) {\n          o = left.right\n        } else if (this.parentSub !== null) {\n          o = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null\n          while (o !== null && o.left !== null) {\n            o = o.left\n          }\n        } else {\n          o = /** @type {AbstractType<any>} */ (this.parent)._start\n        }\n        // TODO: use something like DeleteSet here (a tree implementation would be best)\n        // @todo use global set definitions\n        /**\n         * @type {Set<Item>}\n         */\n        const conflictingItems = new Set()\n        /**\n         * @type {Set<Item>}\n         */\n        const itemsBeforeOrigin = new Set()\n        // Let c in conflictingItems, b in itemsBeforeOrigin\n        // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n        // Note that conflictingItems is a subset of itemsBeforeOrigin\n        while (o !== null && o !== this.right) {\n          itemsBeforeOrigin.add(o)\n          conflictingItems.add(o)\n          if (compareIDs(this.origin, o.origin)) {\n            // case 1\n            if (o.id.client < this.id.client) {\n              left = o\n              conflictingItems.clear()\n            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {\n              // this and o are conflicting and point to the same integration points. The id decides which item comes first.\n              // Since this is to the left of o, we can break here\n              break\n            } // else, o might be integrated before an item that this conflicts with. If so, we will find it in the next iterations\n          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) { // use getItem instead of getItemCleanEnd because we don't want / need to split items.\n            // case 2\n            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {\n              left = o\n              conflictingItems.clear()\n            }\n          } else {\n            break\n          }\n          o = o.right\n        }\n        this.left = left\n      }\n      // reconnect left/right + update parent map/start if necessary\n      if (this.left !== null) {\n        const right = this.left.right\n        this.right = right\n        this.left.right = this\n      } else {\n        let r\n        if (this.parentSub !== null) {\n          r = /** @type {AbstractType<any>} */ (this.parent)._map.get(this.parentSub) || null\n          while (r !== null && r.left !== null) {\n            r = r.left\n          }\n        } else {\n          r = /** @type {AbstractType<any>} */ (this.parent)._start\n          ;/** @type {AbstractType<any>} */ (this.parent)._start = this\n        }\n        this.right = r\n      }\n      if (this.right !== null) {\n        this.right.left = this\n      } else if (this.parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        /** @type {AbstractType<any>} */ (this.parent)._map.set(this.parentSub, this)\n        if (this.left !== null) {\n          // this is the current attribute value of parent. delete right\n          this.left.delete(transaction)\n        }\n      }\n      // adjust length of parent\n      if (this.parentSub === null && this.countable && !this.deleted) {\n        /** @type {AbstractType<any>} */ (this.parent)._length += this.length\n      }\n      addStruct(transaction.doc.store, this)\n      this.content.integrate(transaction, this)\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, /** @type {AbstractType<any>} */ (this.parent), this.parentSub)\n      if ((/** @type {AbstractType<any>} */ (this.parent)._item !== null && /** @type {AbstractType<any>} */ (this.parent)._item.deleted) || (this.parentSub !== null && this.right !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction)\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0)\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left\n    while (n !== null && n.deleted) {\n      n = n.left\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      this.constructor === right.constructor &&\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      if (right.keep) {\n        this.keep = true\n      }\n      this.right = right.right\n      if (this.right !== null) {\n        this.right.left = this\n      }\n      this.length += right.length\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length\n      }\n      this.markDeleted()\n      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length)\n      addChangedTypeToTransaction(transaction, parent, this.parentSub)\n      this.content.delete(transaction)\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw error.unexpectedCase()\n    }\n    this.content.gc(store)\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length))\n    } else {\n      this.content = new ContentDeleted(this.length)\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin\n    const rightOrigin = this.rightOrigin\n    const parentSub = this.parentSub\n    const info = (this.content.getRef() & binary.BITS5) |\n      (origin === null ? 0 : binary.BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : binary.BIT7) | // right origin is defined\n      (parentSub === null ? 0 : binary.BIT6) // parentSub is non-null\n    encoder.writeInfo(info)\n    if (origin !== null) {\n      encoder.writeLeftID(origin)\n    }\n    if (rightOrigin !== null) {\n      encoder.writeRightID(rightOrigin)\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      if (parent._item !== undefined) {\n        const parentItem = parent._item\n        if (parentItem === null) {\n          // parent type on y._map\n          // find the correct key\n          const ykey = findRootTypeKey(parent)\n          encoder.writeParentInfo(true) // write parentYKey\n          encoder.writeString(ykey)\n        } else {\n          encoder.writeParentInfo(false) // write parent id\n          encoder.writeLeftID(parentItem.id)\n        }\n      } else if (parent.constructor === String) { // this edge case was added by differential updates\n        encoder.writeParentInfo(true) // write parentYKey\n        encoder.writeString(parent)\n      } else if (parent.constructor === ID) {\n        encoder.writeParentInfo(false) // write parent id\n        encoder.writeLeftID(parent)\n      } else {\n        error.unexpectedCase()\n      }\n      if (parentSub !== null) {\n        encoder.writeString(parentSub)\n      }\n    }\n    this.content.write(encoder, offset)\n  }\n}\n\n/**\n * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder\n * @param {number} info\n */\nexport const readItemContent = (decoder, info) => contentRefs[info & binary.BITS5](decoder)\n\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(UpdateDecoderV1 | UpdateDecoderV2):AbstractContent>}\n */\nexport const contentRefs = [\n  () => { error.unexpectedCase() }, // GC is not ItemContent\n  readContentDeleted, // 1\n  readContentJSON, // 2\n  readContentBinary, // 3\n  readContentString, // 4\n  readContentEmbed, // 5\n  readContentFormat, // 6\n  readContentType, // 7\n  readContentAny, // 8\n  readContentDoc, // 9\n  () => { error.unexpectedCase() } // 10 - Skip is not ItemContent\n]\n\n/**\n * Do not implement this class!\n */\nexport class AbstractContent {\n  /**\n   * @return {number}\n   */\n  getLength () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Should return false if this Item is some kind of meta information\n   * (e.g. format information).\n   *\n   * * Whether this Item should be addressable via `yarray.get(i)`\n   * * Whether this Item should be counted when computing yarray.length\n   *\n   * @return {boolean}\n   */\n  isCountable () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractContent}\n   */\n  copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {number} offset\n   * @return {AbstractContent}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {AbstractContent} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    throw error.methodUnimplemented()\n  }\n}\n","\nimport {\n  AbstractStruct,\n  UpdateEncoderV1, UpdateEncoderV2, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\nimport * as error from 'lib0/error.js'\nimport * as encoding from 'lib0/encoding.js'\n\nexport const structSkipRefNumber = 10\n\n/**\n * @private\n */\nexport class Skip extends AbstractStruct {\n  get deleted () {\n    return true\n  }\n\n  delete () {}\n\n  /**\n   * @param {Skip} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (this.constructor !== right.constructor) {\n      return false\n    }\n    this.length += right.length\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    // skip structs cannot be integrated\n    error.unexpectedCase()\n  }\n\n  /**\n   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoder.writeInfo(structSkipRefNumber)\n    // write as VarUint because Skips can't make use of predictable length-encoding\n    encoding.writeVarUint(encoder.restEncoder, this.length - offset)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | number}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport toPrimitive from \"@babel/runtime/helpers/esm/toPrimitive\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template T,K\n * @param {Map<K, T>} map\n * @param {K} key\n * @param {function():T} createT\n * @return {T}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","/* eslint-env browser */\n\n/**\n * Binary data constants.\n *\n * @module binary\n */\n\n/**\n * n-th bit activated.\n *\n * @type {number}\n */\nexport const BIT1 = 1\nexport const BIT2 = 2\nexport const BIT3 = 4\nexport const BIT4 = 8\nexport const BIT5 = 16\nexport const BIT6 = 32\nexport const BIT7 = 64\nexport const BIT8 = 128\nexport const BIT9 = 256\nexport const BIT10 = 512\nexport const BIT11 = 1024\nexport const BIT12 = 2048\nexport const BIT13 = 4096\nexport const BIT14 = 8192\nexport const BIT15 = 16384\nexport const BIT16 = 32768\nexport const BIT17 = 65536\nexport const BIT18 = 1 << 17\nexport const BIT19 = 1 << 18\nexport const BIT20 = 1 << 19\nexport const BIT21 = 1 << 20\nexport const BIT22 = 1 << 21\nexport const BIT23 = 1 << 22\nexport const BIT24 = 1 << 23\nexport const BIT25 = 1 << 24\nexport const BIT26 = 1 << 25\nexport const BIT27 = 1 << 26\nexport const BIT28 = 1 << 27\nexport const BIT29 = 1 << 28\nexport const BIT30 = 1 << 29\nexport const BIT31 = 1 << 30\nexport const BIT32 = 1 << 31\n\n/**\n * First n bits activated.\n *\n * @type {number}\n */\nexport const BITS0 = 0\nexport const BITS1 = 1\nexport const BITS2 = 3\nexport const BITS3 = 7\nexport const BITS4 = 15\nexport const BITS5 = 31\nexport const BITS6 = 63\nexport const BITS7 = 127\nexport const BITS8 = 255\nexport const BITS9 = 511\nexport const BITS10 = 1023\nexport const BITS11 = 2047\nexport const BITS12 = 4095\nexport const BITS13 = 8191\nexport const BITS14 = 16383\nexport const BITS15 = 32767\nexport const BITS16 = 65535\nexport const BITS17 = BIT18 - 1\nexport const BITS18 = BIT19 - 1\nexport const BITS19 = BIT20 - 1\nexport const BITS20 = BIT21 - 1\nexport const BITS21 = BIT22 - 1\nexport const BITS22 = BIT23 - 1\nexport const BITS23 = BIT24 - 1\nexport const BITS24 = BIT25 - 1\nexport const BITS25 = BIT26 - 1\nexport const BITS26 = BIT27 - 1\nexport const BITS27 = BIT28 - 1\nexport const BITS28 = BIT29 - 1\nexport const BITS29 = BIT30 - 1\nexport const BITS30 = BIT31 - 1\n/**\n * @type {number}\n */\nexport const BITS31 = 0x7FFFFFFF\n/**\n * @type {number}\n */\nexport const BITS32 = 0xFFFFFFFF\n","/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js'\nimport * as env from './environment.js'\nimport * as encoding from './encoding.js'\nimport * as decoding from './decoding.js'\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer)\n\n/* istanbul ignore next */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = ''\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i])\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s)\n}\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64')\n\n/* istanbul ignore next */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s)\n  const bytes = createUint8ArrayFromLen(a.length)\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i)\n  }\n  return bytes\n}\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64')\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n\n/* istanbul ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node\n\n/* istanbul ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength)\n  newBuf.set(uint8Array)\n  return newBuf\n}\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data => {\n  const encoder = encoding.createEncoder()\n  encoding.writeAny(encoder, data)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf))\n","import superPropBase from \"@babel/runtime/helpers/esm/superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* istanbul ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* istanbul ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* istanbul ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* istanbul ignore next */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* istanbul ignore next */\n  utf8TextDecoder = null\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* istanbul ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n","/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module map\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\n\n/* istanbul ignore next */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name)\n/* istanbul ignore next */\nexport const isBrowser = typeof window !== 'undefined' && !isNode\n/* istanbul ignore next */\nexport const isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* istanbul ignore next */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      /* istanbul ignore next */\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n    // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create()\n      // eslint-disable-next-line no-undef\n      ;(location.search || '?').slice(1).split('&').forEach(kv => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasParam = name => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* istanbul ignore next */\nexport const getParam = (name, defaultVal) => computeParams().get(name) || defaultVal\n// export const getArgs = name => computeParams() && args\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* istanbul ignore next */\nexport const getVariable = name => isNode ? conditions.undefinedToNull(process.env[name.toUpperCase()]) : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\nexport const getConf = name => computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasConf = name => hasParam('--' + name) || getVariable(name) !== null\n\n/* istanbul ignore next */\nexport const production = hasConf('production')\n","/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as binary from './binary.js'\nimport * as math from './math.js'\n\n/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nexport class Decoder {\n  /**\n   * @param {Uint8Array} uint8Array Binary data to decode\n   */\n  constructor (uint8Array) {\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    this.arr = uint8Array\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    this.pos = 0\n  }\n}\n\n/**\n * @function\n * @param {Uint8Array} uint8Array\n * @return {Decoder}\n */\nexport const createDecoder = uint8Array => new Decoder(uint8Array)\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {boolean}\n */\nexport const hasContent = decoder => decoder.pos !== decoder.arr.length\n\n/**\n * Clone a decoder instance.\n * Optionally set a new position parameter.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} [newPos] Defaults to current position\n * @return {Decoder} A clone of `decoder`\n */\nexport const clone = (decoder, newPos = decoder.pos) => {\n  const _decoder = createDecoder(decoder.arr)\n  _decoder.pos = newPos\n  return _decoder\n}\n\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\nexport const readUint8Array = (decoder, len) => {\n  const view = buffer.createUint8ArrayViewFromArrayBuffer(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len)\n  decoder.pos += len\n  return view\n}\n\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder))\n\n/**\n * Read the rest of the content as an ArrayBuffer\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nexport const readTailAsUint8Array = decoder => readUint8Array(decoder, decoder.arr.length - decoder.pos)\n\n/**\n * Skip one byte, jump to the next position.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} The next position\n */\nexport const skip8 = decoder => decoder.pos++\n\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\nexport const readUint8 = decoder => decoder.arr[decoder.pos++]\n\n/**\n * Read 2 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint16 = decoder => {\n  const uint =\n    decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8)\n  decoder.pos += 2\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32 = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos] +\n    (decoder.arr[decoder.pos + 1] << 8) +\n    (decoder.arr[decoder.pos + 2] << 16) +\n    (decoder.arr[decoder.pos + 3] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Read 4 bytes as unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32BigEndian = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos + 3] +\n    (decoder.arr[decoder.pos + 2] << 8) +\n    (decoder.arr[decoder.pos + 1] << 16) +\n    (decoder.arr[decoder.pos] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\n/**\n * Look ahead without incrementing position.\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint8 = decoder => decoder.arr[decoder.pos]\n\n/**\n * Look ahead without incrementing position.\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint16 = decoder =>\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8)\n\n/**\n * Look ahead without incrementing position.\n * to the next byte and read it as unsigned integer.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const peekUint32 = decoder => (\n  decoder.arr[decoder.pos] +\n  (decoder.arr[decoder.pos + 1] << 8) +\n  (decoder.arr[decoder.pos + 2] << 16) +\n  (decoder.arr[decoder.pos + 3] << 24)\n) >>> 0\n\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarUint = decoder => {\n  let num = 0\n  let len = 0\n  while (true) {\n    const r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return num >>> 0 // return unsigned number!\n    }\n    /* istanbul ignore if */\n    if (len > 35) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Read signed integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n * @todo This should probably create the inverse ~num if unmber is negative - but this would be a breaking change.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nexport const readVarInt = decoder => {\n  let r = decoder.arr[decoder.pos++]\n  let num = r & binary.BITS6\n  let len = 6\n  const sign = (r & binary.BIT7) > 0 ? -1 : 1\n  if ((r & binary.BIT8) === 0) {\n    // don't continue reading\n    return sign * num\n  }\n  while (true) {\n    r = decoder.arr[decoder.pos++]\n    num = num | ((r & binary.BITS7) << len)\n    len += 7\n    if (r < binary.BIT8) {\n      return sign * (num >>> 0)\n    }\n    /* istanbul ignore if */\n    if (len > 41) {\n      throw new Error('Integer out of range!')\n    }\n  }\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarUint = decoder => {\n  const pos = decoder.pos\n  const s = readVarUint(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Look ahead and read varUint without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {number}\n */\nexport const peekVarInt = decoder => {\n  const pos = decoder.pos\n  const s = readVarInt(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\nexport const readVarString = decoder => {\n  let remainingLen = readVarUint(decoder)\n  if (remainingLen === 0) {\n    return ''\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)) // remember to decrease remainingLen\n    if (--remainingLen < 100) { // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder))\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000\n        // this is dangerous, we create a fresh array view from the existing buffer\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen)\n        decoder.pos += nextLen\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n        remainingLen -= nextLen\n      }\n    }\n    return decodeURIComponent(escape(encodedString))\n  }\n}\n\n/**\n * Look ahead and read varString without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {string}\n */\nexport const peekVarString = decoder => {\n  const pos = decoder.pos\n  const s = readVarString(decoder)\n  decoder.pos = pos\n  return s\n}\n\n/**\n * @param {Decoder} decoder\n * @param {number} len\n * @return {DataView}\n */\nexport const readFromDataView = (decoder, len) => {\n  const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len)\n  decoder.pos += len\n  return dv\n}\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat32 = decoder => readFromDataView(decoder, 4).getFloat32(0)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readFloat64 = decoder => readFromDataView(decoder, 8).getFloat64(0)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigInt64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigInt64(0)\n\n/**\n * @param {Decoder} decoder\n */\nexport const readBigUint64 = decoder => /** @type {any} */ (readFromDataView(decoder, 8)).getBigUint64(0)\n\n/**\n * @type {Array<function(Decoder):any>}\n */\nconst readAnyLookupTable = [\n  decoder => undefined, // CASE 127: undefined\n  decoder => null, // CASE 126: null\n  readVarInt, // CASE 125: integer\n  readFloat32, // CASE 124: float32\n  readFloat64, // CASE 123: float64\n  readBigInt64, // CASE 122: bigint\n  decoder => false, // CASE 121: boolean (false)\n  decoder => true, // CASE 120: boolean (true)\n  readVarString, // CASE 119: string\n  decoder => { // CASE 118: object<string,any>\n    const len = readVarUint(decoder)\n    /**\n     * @type {Object<string,any>}\n     */\n    const obj = {}\n    for (let i = 0; i < len; i++) {\n      const key = readVarString(decoder)\n      obj[key] = readAny(decoder)\n    }\n    return obj\n  },\n  decoder => { // CASE 117: array<any>\n    const len = readVarUint(decoder)\n    const arr = []\n    for (let i = 0; i < len; i++) {\n      arr.push(readAny(decoder))\n    }\n    return arr\n  },\n  readVarUint8Array // CASE 116: Uint8Array\n]\n\n/**\n * @param {Decoder} decoder\n */\nexport const readAny = decoder => readAnyLookupTable[127 - readUint8(decoder)](decoder)\n\n/**\n * T must not be null.\n *\n * @template T\n */\nexport class RleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {function(Decoder):T} reader\n   */\n  constructor (uint8Array, reader) {\n    super(uint8Array)\n    /**\n     * The reader\n     */\n    this.reader = reader\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = this.reader(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {T} */ (this.s)\n  }\n}\n\nexport class IntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    this.s += readVarInt(this)\n    return this.s\n  }\n}\n\nexport class RleIntDiffDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   * @param {number} start\n   */\n  constructor (uint8Array, start) {\n    super(uint8Array)\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      this.s += readVarInt(this)\n      if (hasContent(this)) {\n        this.count = readVarUint(this) + 1 // see encoder implementation for the reason why this is incremented\n      } else {\n        this.count = -1 // read the current value forever\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class UintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s)\n  }\n}\n\nexport class IncUintOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  read () {\n    if (this.count === 0) {\n      this.s = readVarInt(this)\n      // if the sign is negative, we read the count too, otherwise count is 1\n      const isNegative = math.isNegativeZero(this.s)\n      this.count = 1\n      if (isNegative) {\n        this.s = -this.s\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.count--\n    return /** @type {number} */ (this.s++)\n  }\n}\n\nexport class IntDiffOptRleDecoder extends Decoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    super(uint8Array)\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @return {number}\n   */\n  read () {\n    if (this.count === 0) {\n      const diff = readVarInt(this)\n      // if the first bit is set, we read more data\n      const hasCount = diff & 1\n      this.diff = diff >> 1\n      this.count = 1\n      if (hasCount) {\n        this.count = readVarUint(this) + 2\n      }\n    }\n    this.s += this.diff\n    this.count--\n    return this.s\n  }\n}\n\nexport class StringDecoder {\n  /**\n   * @param {Uint8Array} uint8Array\n   */\n  constructor (uint8Array) {\n    this.decoder = new UintOptRleDecoder(uint8Array)\n    this.str = readVarString(this.decoder)\n    /**\n     * @type {number}\n     */\n    this.spos = 0\n  }\n\n  /**\n   * @return {string}\n   */\n  read () {\n    const end = this.spos + this.decoder.read()\n    const res = this.str.slice(this.spos, end)\n    this.spos = end\n    return res\n  }\n}\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\nimport * as math from './math.js'\nimport * as binary from './binary.js'\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER\n\nexport const LOWEST_INT32 = 1 << 31\n/**\n * @type {number}\n */\nexport const HIGHEST_INT32 = binary.BITS31\n\n/**\n * @module number\n */\n\n/* istanbul ignore next */\nexport const isInteger = Number.isInteger || (num => typeof num === 'number' && isFinite(num) && math.floor(num) === num)\nexport const isNaN = Number.isNaN\n","/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = new encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = new decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\nimport * as buffer from './buffer.js'\nimport * as math from './math.js'\nimport * as number from './number.js'\nimport * as binary from './binary.js'\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nexport class Encoder {\n  constructor () {\n    this.cpos = 0\n    this.cbuf = new Uint8Array(100)\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = []\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nexport const createEncoder = () => new Encoder()\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nexport const length = encoder => {\n  let len = encoder.cpos\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length\n  }\n  return len\n}\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nexport const toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length(encoder))\n  let curPos = 0\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i]\n    uint8arr.set(d, curPos)\n    curPos += d.length\n  }\n  uint8arr.set(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos)\n  return uint8arr\n}\n\n/**\n * Verify that it is possible to write `len` bytes wtihout checking. If\n * necessary, a new Buffer with the required length is attached.\n *\n * @param {Encoder} encoder\n * @param {number} len\n */\nconst verifyLen = (encoder, len) => {\n  const bufferLen = encoder.cbuf.length\n  if (bufferLen - encoder.cpos < len) {\n    encoder.bufs.push(buffer.createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos))\n    encoder.cbuf = new Uint8Array(math.max(bufferLen, len) * 2)\n    encoder.cpos = 0\n  }\n}\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nexport const write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf)\n    encoder.cbuf = new Uint8Array(bufferLen * 2)\n    encoder.cpos = 0\n  }\n  encoder.cbuf[encoder.cpos++] = num\n}\n\n/**\n * Write one byte at a specific position.\n * Position must already be written (i.e. encoder.length > pos)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos Position to which to write data\n * @param {number} num Unsigned 8-bit integer\n */\nexport const set = (encoder, pos, num) => {\n  let buffer = null\n  // iterate all buffers and adjust position\n  for (let i = 0; i < encoder.bufs.length && buffer === null; i++) {\n    const b = encoder.bufs[i]\n    if (pos < b.length) {\n      buffer = b // found buffer\n    } else {\n      pos -= b.length\n    }\n  }\n  if (buffer === null) {\n    // use current buffer\n    buffer = encoder.cbuf\n  }\n  buffer[pos] = num\n}\n\n/**\n * Write one byte as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint8 = write\n\n/**\n * Write one byte as an unsigned Integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint8 = set\n\n/**\n * Write two bytes as an unsigned integer.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint16 = (encoder, num) => {\n  write(encoder, num & binary.BITS8)\n  write(encoder, (num >>> 8) & binary.BITS8)\n}\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint16 = (encoder, pos, num) => {\n  set(encoder, pos, num & binary.BITS8)\n  set(encoder, pos + 1, (num >>> 8) & binary.BITS8)\n}\n\n/**\n * Write two bytes as an unsigned integer\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32 = (encoder, num) => {\n  for (let i = 0; i < 4; i++) {\n    write(encoder, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32BigEndian = (encoder, num) => {\n  for (let i = 3; i >= 0; i--) {\n    write(encoder, (num >>> (8 * i)) & binary.BITS8)\n  }\n}\n\n/**\n * Write two bytes as an unsigned integer at a specific location.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} pos The location where the data will be written.\n * @param {number} num The number that is to be encoded.\n */\nexport const setUint32 = (encoder, pos, num) => {\n  for (let i = 0; i < 4; i++) {\n    set(encoder, pos + i, num & binary.BITS8)\n    num >>>= 8\n  }\n}\n\n/**\n * Write a variable length unsigned integer.\n *\n * Encodes integers in the range from [0, 4294967295] / [0, 0xffffffff]. (max 32 bit unsigned integer)\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarUint = (encoder, num) => {\n  while (num > binary.BITS7) {\n    write(encoder, binary.BIT8 | (binary.BITS7 & num))\n    num >>>= 7\n  }\n  write(encoder, binary.BITS7 & num)\n}\n\n/**\n * Write a variable length integer.\n *\n * Encodes integers in the range from [-2147483648, -2147483647].\n *\n * We don't use zig-zag encoding because we want to keep the option open\n * to use the same function for BigInt and 53bit integers (doubles).\n *\n * We use the 7th bit instead for signaling that this is a negative number.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeVarInt = (encoder, num) => {\n  const isNegative = math.isNegativeZero(num)\n  if (isNegative) {\n    num = -num\n  }\n  //             |- whether to continue reading         |- whether is negative     |- number\n  write(encoder, (num > binary.BITS6 ? binary.BIT8 : 0) | (isNegative ? binary.BIT7 : 0) | (binary.BITS6 & num))\n  num >>>= 6\n  // We don't need to consider the case of num === 0 so we can use a different\n  // pattern here than above.\n  while (num > 0) {\n    write(encoder, (num > binary.BITS7 ? binary.BIT8 : 0) | (binary.BITS7 & num))\n    num >>>= 7\n  }\n}\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nexport const writeVarString = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)))\n  }\n}\n\n/**\n * Write the content of another Encoder.\n *\n * @TODO: can be improved!\n *        - Note: Should consider that when appending a lot of small Encoders, we should rather clone than referencing the old structure.\n *                Encoders start with a rather big initial buffer.\n *\n * @function\n * @param {Encoder} encoder The enUint8Arr\n * @param {Encoder} append The BinaryEncoder to be written.\n */\nexport const writeBinaryEncoder = (encoder, append) => writeUint8Array(encoder, toUint8Array(append))\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length\n  const cpos = encoder.cpos\n  const leftCopyLen = math.min(bufferLen - cpos, uint8Array.length)\n  const rightCopyLen = uint8Array.length - leftCopyLen\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos)\n  encoder.cpos += leftCopyLen\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf)\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(math.max(bufferLen * 2, rightCopyLen))\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen))\n    encoder.cpos = rightCopyLen\n  }\n}\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nexport const writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength)\n  writeUint8Array(encoder, uint8Array)\n}\n\n/**\n * Create an DataView of the next `len` bytes. Use it to write data after\n * calling this function.\n *\n * ```js\n * // write float32 using DataView\n * const dv = writeOnDataView(encoder, 4)\n * dv.setFloat32(0, 1.1)\n * // read float32 using DataView\n * const dv = readFromDataView(encoder, 4)\n * dv.getFloat32(0) // => 1.100000023841858 (leaving it to the reader to find out why this is the correct result)\n * ```\n *\n * @param {Encoder} encoder\n * @param {number} len\n * @return {DataView}\n */\nexport const writeOnDataView = (encoder, len) => {\n  verifyLen(encoder, len)\n  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len)\n  encoder.cpos += len\n  return dview\n}\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num)\n\n/**\n * @param {Encoder} encoder\n * @param {number} num\n */\nexport const writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigInt64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigInt64(0, num)\n\n/**\n * @param {Encoder} encoder\n * @param {bigint} num\n */\nexport const writeBigUint64 = (encoder, num) => /** @type {any} */ (writeOnDataView(encoder, 8)).setBigUint64(0, num)\n\nconst floatTestBed = new DataView(new ArrayBuffer(4))\n/**\n * Check if a number can be encoded as a 32 bit float.\n *\n * @param {number} num\n * @return {boolean}\n */\nconst isFloat32 = num => {\n  floatTestBed.setFloat32(0, num)\n  return floatTestBed.getFloat32(0) === num\n}\n\n/**\n * Encode data with efficient binary format.\n *\n * Differences to JSON:\n * • Transforms data to a binary format (not to a string)\n * • Encodes undefined, NaN, and ArrayBuffer (these can't be represented in JSON)\n * • Numbers are efficiently encoded either as a variable length integer, as a\n *   32 bit float, as a 64 bit float, or as a 64 bit bigint.\n *\n * Encoding table:\n *\n * | Data Type           | Prefix   | Encoding Method    | Comment |\n * | ------------------- | -------- | ------------------ | ------- |\n * | undefined           | 127      |                    | Functions, symbol, and everything that cannot be identified is encoded as undefined |\n * | null                | 126      |                    | |\n * | integer             | 125      | writeVarInt        | Only encodes 32 bit signed integers |\n * | float32             | 124      | writeFloat32       | |\n * | float64             | 123      | writeFloat64       | |\n * | bigint              | 122      | writeBigInt64      | |\n * | boolean (false)     | 121      |                    | True and false are different data types so we save the following byte |\n * | boolean (true)      | 120      |                    | - 0b01111000 so the last bit determines whether true or false |\n * | string              | 119      | writeVarString     | |\n * | object<string,any>  | 118      | custom             | Writes {length} then {length} key-value pairs |\n * | array<any>          | 117      | custom             | Writes {length} then {length} json values |\n * | Uint8Array          | 116      | writeVarUint8Array | We use Uint8Array for any kind of binary data |\n *\n * Reasons for the decreasing prefix:\n * We need the first bit for extendability (later we may want to encode the\n * prefix with writeVarUint). The remaining 7 bits are divided as follows:\n * [0-30]   the beginning of the data range is used for custom purposes\n *          (defined by the function that uses this library)\n * [31-127] the end of the data range is used for data encoding by\n *          lib0/encoding.js\n *\n * @param {Encoder} encoder\n * @param {undefined|null|number|bigint|boolean|string|Object<string,any>|Array<any>|Uint8Array} data\n */\nexport const writeAny = (encoder, data) => {\n  switch (typeof data) {\n    case 'string':\n      // TYPE 119: STRING\n      write(encoder, 119)\n      writeVarString(encoder, data)\n      break\n    case 'number':\n      if (number.isInteger(data) && data <= binary.BITS31) {\n        // TYPE 125: INTEGER\n        write(encoder, 125)\n        writeVarInt(encoder, data)\n      } else if (isFloat32(data)) {\n        // TYPE 124: FLOAT32\n        write(encoder, 124)\n        writeFloat32(encoder, data)\n      } else {\n        // TYPE 123: FLOAT64\n        write(encoder, 123)\n        writeFloat64(encoder, data)\n      }\n      break\n    case 'bigint':\n      // TYPE 122: BigInt\n      write(encoder, 122)\n      writeBigInt64(encoder, data)\n      break\n    case 'object':\n      if (data === null) {\n        // TYPE 126: null\n        write(encoder, 126)\n      } else if (data instanceof Array) {\n        // TYPE 117: Array\n        write(encoder, 117)\n        writeVarUint(encoder, data.length)\n        for (let i = 0; i < data.length; i++) {\n          writeAny(encoder, data[i])\n        }\n      } else if (data instanceof Uint8Array) {\n        // TYPE 116: ArrayBuffer\n        write(encoder, 116)\n        writeVarUint8Array(encoder, data)\n      } else {\n        // TYPE 118: Object\n        write(encoder, 118)\n        const keys = Object.keys(data)\n        writeVarUint(encoder, keys.length)\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i]\n          writeVarString(encoder, key)\n          writeAny(encoder, data[key])\n        }\n      }\n      break\n    case 'boolean':\n      // TYPE 120/121: boolean (true/false)\n      write(encoder, data ? 120 : 121)\n      break\n    default:\n      // TYPE 127: undefined\n      write(encoder, 127)\n  }\n}\n\n/**\n * Now come a few stateful encoder that have their own classes.\n */\n\n/**\n * Basic Run Length Encoder - a basic compression implementation.\n *\n * Encodes [1,1,1,7] to [1,3,7,1] (3 times 1, 1 time 7). This encoder might do more harm than good if there are a lot of values that are not repeated.\n *\n * It was originally used for image compression. Cool .. article http://csbruce.com/cbm/transactor/pdfs/trans_v7_i06.pdf\n *\n * @note T must not be null!\n *\n * @template T\n */\nexport class RleEncoder extends Encoder {\n  /**\n   * @param {function(Encoder, T):void} writer\n   */\n  constructor (writer) {\n    super()\n    /**\n     * The writer\n     */\n    this.w = writer\n    /**\n     * Current state\n     * @type {T|null}\n     */\n    this.s = null\n    this.count = 0\n  }\n\n  /**\n   * @param {T} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      this.w(this, v)\n      this.s = v\n    }\n  }\n}\n\n/**\n * Basic diff decoder using variable length encoding.\n *\n * Encodes the values [3, 1100, 1101, 1050, 0] to [3, 1097, 1, -51, -1050] using writeVarInt.\n */\nexport class IntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    writeVarInt(this, v - this.s)\n    this.s = v\n  }\n}\n\n/**\n * A combination of IntDiffEncoder and RleEncoder.\n *\n * Basically first writes the IntDiffEncoder and then counts duplicate diffs using RleEncoding.\n *\n * Encodes the values [1,1,1,2,3,4,5,6] as [1,1,0,2,1,5] (RLE([1,0,0,1,1,1,1,1]) ⇒ RleIntDiff[1,1,0,2,1,5])\n */\nexport class RleIntDiffEncoder extends Encoder {\n  /**\n   * @param {number} start\n   */\n  constructor (start) {\n    super()\n    /**\n     * Current state\n     * @type {number}\n     */\n    this.s = start\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v && this.count > 0) {\n      this.count++\n    } else {\n      if (this.count > 0) {\n        // flush counter, unless this is the first value (count = 0)\n        writeVarUint(this, this.count - 1) // since count is always > 0, we can decrement by one. non-standard encoding ftw\n      }\n      this.count = 1\n      // write first value\n      writeVarInt(this, v - this.s)\n      this.s = v\n    }\n  }\n}\n\n/**\n * @param {UintOptRleEncoder} encoder\n */\nconst flushUintOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set sign to positive\n    // case 2: write several values. set sign to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * Optimized Rle encoder that does not suffer from the mentioned problem of the basic Rle encoder.\n *\n * Internally uses VarInt encoder to write unsigned integers. If the input occurs multiple times, we write\n * write it as a negative number. The UintOptRleDecoder then understands that it needs to read a count.\n *\n * Encodes [1,2,3,3,3] as [1,2,-3,3] (once 1, once 2, three times 3)\n */\nexport class UintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Increasing Uint Optimized RLE Encoder\n *\n * The RLE encoder counts the number of same occurences of the same value.\n * The IncUintOptRle encoder counts if the value increases.\n * I.e. 7, 8, 9, 10 will be encoded as [-7, 4]. 1, 3, 5 will be encoded\n * as [1, 3, 5].\n */\nexport class IncUintOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.s + this.count === v) {\n      this.count++\n    } else {\n      flushUintOptRleEncoder(this)\n      this.count = 1\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushUintOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * @param {IntDiffOptRleEncoder} encoder\n */\nconst flushIntDiffOptRleEncoder = encoder => {\n  if (encoder.count > 0) {\n    //          31 bit making up the diff | wether to write the counter\n    const encodedDiff = encoder.diff << 1 | (encoder.count === 1 ? 0 : 1)\n    // flush counter, unless this is the first value (count = 0)\n    // case 1: just a single value. set first bit to positive\n    // case 2: write several values. set first bit to negative to indicate that there is a length coming\n    writeVarInt(encoder.encoder, encodedDiff)\n    if (encoder.count > 1) {\n      writeVarUint(encoder.encoder, encoder.count - 2) // since count is always > 1, we can decrement by one. non-standard encoding ftw\n    }\n  }\n}\n\n/**\n * A combination of the IntDiffEncoder and the UintOptRleEncoder.\n *\n * The count approach is similar to the UintDiffOptRleEncoder, but instead of using the negative bitflag, it encodes\n * in the LSB whether a count is to be read. Therefore this Encoder only supports 31 bit integers!\n *\n * Encodes [1, 2, 3, 2] as [3, 1, 6, -1] (more specifically [(1 << 1) | 1, (3 << 0) | 0, -1])\n *\n * Internally uses variable length encoding. Contrary to normal UintVar encoding, the first byte contains:\n * * 1 bit that denotes whether the next value is a count (LSB)\n * * 1 bit that denotes whether this value is negative (MSB - 1)\n * * 1 bit that denotes whether to continue reading the variable length integer (MSB)\n *\n * Therefore, only five bits remain to encode diff ranges.\n *\n * Use this Encoder only when appropriate. In most cases, this is probably a bad idea.\n */\nexport class IntDiffOptRleEncoder {\n  constructor () {\n    this.encoder = new Encoder()\n    /**\n     * @type {number}\n     */\n    this.s = 0\n    this.count = 0\n    this.diff = 0\n  }\n\n  /**\n   * @param {number} v\n   */\n  write (v) {\n    if (this.diff === v - this.s) {\n      this.s = v\n      this.count++\n    } else {\n      flushIntDiffOptRleEncoder(this)\n      this.count = 1\n      this.diff = v - this.s\n      this.s = v\n    }\n  }\n\n  toUint8Array () {\n    flushIntDiffOptRleEncoder(this)\n    return toUint8Array(this.encoder)\n  }\n}\n\n/**\n * Optimized String Encoder.\n *\n * Encoding many small strings in a simple Encoder is not very efficient. The function call to decode a string takes some time and creates references that must be eventually deleted.\n * In practice, when decoding several million small strings, the GC will kick in more and more often to collect orphaned string objects (or maybe there is another reason?).\n *\n * This string encoder solves the above problem. All strings are concatenated and written as a single string using a single encoding call.\n *\n * The lengths are encoded using a UintOptRleEncoder.\n */\nexport class StringEncoder {\n  constructor () {\n    /**\n     * @type {Array<string>}\n     */\n    this.sarr = []\n    this.s = ''\n    this.lensE = new UintOptRleEncoder()\n  }\n\n  /**\n   * @param {string} string\n   */\n  write (string) {\n    this.s += string\n    if (this.s.length > 19) {\n      this.sarr.push(this.s)\n      this.s = ''\n    }\n    this.lensE.write(string.length)\n  }\n\n  toUint8Array () {\n    const encoder = new Encoder()\n    this.sarr.push(this.s)\n    this.s = ''\n    writeVarString(encoder, this.sarr.join(''))\n    writeUint8Array(encoder, this.lensE.toUint8Array())\n    return toUint8Array(encoder)\n  }\n}\n","/**\n * Often used conditions.\n *\n * @module conditions\n */\n\n/**\n * @template T\n * @param {T|null|undefined} v\n * @return {T|null}\n */\n/* istanbul ignore next */\nexport const undefinedToNull = v => v === undefined ? null : v\n","/* global localStorage */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n  setItem (key, value) {\n    this.map.set(key, value)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n  }\n} catch (e) { }\n\n/* istanbul ignore next */\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage = _localStorage\n"],"sourceRoot":""}