{"version":3,"sources":["hooks/useMomentaryChat.ts","components/WysiwygEditor.tsx","components/MomentaryChat.tsx","hooks/useNotification.ts","utils/emoji.ts"],"names":["isReply","x","Array","isArray","length","isChatItem","isObject","nickname","messageId","createdAt","text","inReplyTo","replies","every","isReplies","compareReply","a","b","countDiff","useMomentaryChat","roomId","userId","useState","chatList","setChatList","chatListRef","useRef","useEffect","current","addChatItem","useCallback","chatItem","prev","map","item","replyMap","Map","set","get","entries","sort","some","newList","pop","useRoomNewPeer","send","forEach","chat","broadcastData","useBroadcastData","useRoomData","data","sendChat","secureRandomId","Date","now","replyChat","config","toolbar","balloonToolbar","link","addTargetToExternalLinks","WysiwygEditor","React","memo","registerClear","onChange","onMetaEnter","editor","CustomEditor","onReady","sourceElement","addEventListener","event","metaKey","code","setData","plugins","addItems","title","character","initEditor","_event","getData","MAX_CHAT_TEXT_SIZE","getChatTime","toLocaleString","split","slice","MomentaryChatContentPart","openEmojiPicker","setOpenEmojiPicker","reply","className","onSelect","e","native","style","width","type","onClick","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","ADD_ATTR","count","MomentaryChatContent","latestMessageId","scrollTop","scrollHeight","ref","MomentaryChat","containerRef","clearRef","canSend","setCanSend","textRef","setText","t","sendText","sendNotification","notificationRef","mesg","Notification","permission","close","requestPermission","useNotification","latestChatItem","RegExp","test","clear","disabled","EmojiPicker","Picker"],"mappings":"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","file":"static/js/12.f7c0aa57.chunk.js","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\n\nimport { secureRandomId } from \"../utils/crypto\";\nimport { isObject } from \"../utils/types\";\nimport { useRoomData, useBroadcastData, useRoomNewPeer } from \"./useRoom\";\n\nconst MAX_CHAT_LIST_SIZE = 100;\n\ntype Reply = [string, number];\n\nconst isReply = (x: unknown): x is Reply =>\n  Array.isArray(x) &&\n  x.length === 2 &&\n  typeof x[0] === \"string\" &&\n  typeof x[1] === \"number\";\n\nconst isReplies = (x: unknown): x is Reply[] =>\n  Array.isArray(x) && x.every(isReply);\n\nexport type ChatItem = {\n  nickname: string;\n  messageId: string;\n  createdAt: number; // in millisecond\n  text: string;\n  inReplyTo?: string; // messageId\n  replies?: Reply[];\n};\n\nconst isChatItem = (x: unknown): x is ChatItem =>\n  isObject(x) &&\n  typeof (x as { nickname: unknown }).nickname === \"string\" &&\n  typeof (x as { messageId: unknown }).messageId === \"string\" &&\n  typeof (x as { createdAt: unknown }).createdAt === \"number\" &&\n  typeof (x as { text: unknown }).text === \"string\" &&\n  (typeof (x as { inReplyTo: unknown }).inReplyTo === \"undefined\" ||\n    typeof (x as { inReplyTo: unknown }).inReplyTo === \"string\") &&\n  (typeof (x as { replies: unknown }).replies === \"undefined\" ||\n    isReplies((x as { replies: unknown }).replies));\n\ntype ChatData = {\n  chat: ChatItem;\n};\n\nconst isChatData = (x: unknown): x is ChatData =>\n  isObject(x) && isChatItem((x as { chat: unknown }).chat);\n\nconst compareReply = (a: Reply, b: Reply) => {\n  const countDiff = b[1] - a[1];\n  if (countDiff === 0) {\n    return a[0].length - b[0].length;\n  }\n  return countDiff;\n};\n\nexport const useMomentaryChat = (\n  roomId: string,\n  userId: string,\n  nickname: string\n) => {\n  const [chatList, setChatList] = useState<ChatItem[]>([]);\n  const chatListRef = useRef(chatList);\n  useEffect(() => {\n    chatListRef.current = chatList;\n  });\n\n  const addChatItem = useCallback((chatItem: ChatItem) => {\n    if (chatItem.inReplyTo) {\n      const { text, inReplyTo } = chatItem;\n      setChatList((prev) =>\n        prev.map((item) => {\n          if (item.messageId === inReplyTo) {\n            const replyMap = new Map(item.replies);\n            replyMap.set(text, (replyMap.get(text) || 0) + 1);\n            const replies = [...replyMap.entries()];\n            replies.sort(compareReply);\n            return { ...item, replies };\n          }\n          return item;\n        })\n      );\n      return;\n    }\n    setChatList((prev) => {\n      if (prev.some((item) => item.messageId === chatItem.messageId)) {\n        // Migration: This can happen if a peer with old version is connected.\n        return prev;\n      }\n      const newList = [chatItem, ...prev];\n      if (newList.length > MAX_CHAT_LIST_SIZE) {\n        newList.pop();\n      }\n      newList.sort((a, b) => b.createdAt - a.createdAt); // slow?\n      return newList;\n    });\n  }, []);\n\n  useRoomNewPeer(\n    roomId,\n    userId,\n    useCallback((send) => {\n      // TODO do not let all peers send initial data\n      chatListRef.current.forEach((chatItem) => {\n        const data: ChatData = {\n          chat: chatItem,\n        };\n        send(data);\n      });\n    }, [])\n  );\n\n  const broadcastData = useBroadcastData(roomId, userId);\n\n  useRoomData(\n    roomId,\n    userId,\n    useCallback(\n      (data) => {\n        if (isChatData(data)) {\n          addChatItem(data.chat);\n        }\n      },\n      [addChatItem]\n    )\n  );\n\n  const sendChat = useCallback(\n    (text: string) => {\n      const chatItem: ChatItem = {\n        nickname,\n        messageId: secureRandomId(),\n        createdAt: Date.now(),\n        text,\n      };\n      const data: ChatData = {\n        chat: chatItem,\n      };\n      broadcastData(data);\n      addChatItem(chatItem);\n    },\n    [broadcastData, nickname, addChatItem]\n  );\n\n  const replyChat = useCallback(\n    (text: string, inReplyTo: string) => {\n      const chatItem: ChatItem = {\n        nickname,\n        messageId: secureRandomId(),\n        createdAt: Date.now(),\n        text,\n        inReplyTo,\n      };\n      const data: ChatData = {\n        chat: chatItem,\n      };\n      broadcastData(data);\n      addChatItem(chatItem);\n    },\n    [broadcastData, nickname, addChatItem]\n  );\n\n  return {\n    chatList,\n    sendChat,\n    replyChat,\n  };\n};\n","// @ts-nocheck XXX ckeditor5 doesn't come with types\n\nimport React from \"react\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport CustomEditor from \"@daishi/ckeditor5-build-inline-custom\";\n\nimport \"./WysiwygEditor.css\";\n\nconst config = {\n  toolbar: [\n    \"specialCharacters\",\n    \"|\",\n    \"bold\",\n    \"italic\",\n    \"link\",\n    \"blockQuote\",\n    \"|\",\n    \"imageUpload\",\n    \"insertTable\",\n    \"mediaEmbed\",\n    \"|\",\n    \"undo\",\n    \"redo\",\n  ],\n  balloonToolbar: [\n    \"heading\",\n    \"|\",\n    \"bulletedList\",\n    \"numberedList\",\n    \"indent\",\n    \"outdent\",\n  ],\n  link: {\n    addTargetToExternalLinks: true,\n  },\n};\n\nconst initEditor = (editor) => {\n  editor.plugins.get(\"SpecialCharacters\").addItems(\"Emoji\", [\n    { title: \"smiley face\", character: \"😊\" },\n    { title: \"rocket\", character: \"🚀\" },\n    { title: \"wind blowing face\", character: \"🌬️\" },\n    { title: \"floppy disk\", character: \"💾\" },\n    { title: \"heart\", character: \"❤️\" },\n  ]);\n};\n\nexport const WysiwygEditor = React.memo<{\n  registerClear: (clear: () => void) => void;\n  onChange: (data: string) => void;\n  onMetaEnter: () => void;\n}>(({ registerClear, onChange, onMetaEnter }) => (\n  <CKEditor\n    editor={CustomEditor}\n    config={config}\n    onReady={(editor) => {\n      const onKeydown = (event: KeyboardEvent) => {\n        if (event.metaKey && event.code === \"Enter\") {\n          onMetaEnter();\n        }\n      };\n      editor.sourceElement.addEventListener(\"keydown\", onKeydown);\n      registerClear(() => {\n        editor.setData(\"\");\n      });\n      initEditor(editor);\n    }}\n    onChange={(_event, editor) => {\n      const data = editor.getData();\n      onChange(data);\n    }}\n  />\n));\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport DOMPurify from \"dompurify\";\n\nimport \"./MomentaryChat.css\";\nimport { useMomentaryChat, ChatItem } from \"../hooks/useMomentaryChat\";\nimport { EmojiPicker } from \"../utils/emoji\";\nimport { WysiwygEditor } from \"./WysiwygEditor\";\nimport { useNotification } from \"../hooks/useNotification\";\n\nconst MAX_CHAT_TEXT_SIZE = 1 * 1024 * 1024;\n\ntype ChatList = ReturnType<typeof useMomentaryChat>[\"chatList\"];\ntype ReplyChat = ReturnType<typeof useMomentaryChat>[\"replyChat\"];\n\nconst sanitize = (text: string) => ({\n  __html: DOMPurify.sanitize(text, { ADD_ATTR: [\"target\"] }),\n});\n\nconst getChatTime = (item: ChatItem) =>\n  new Date(item.createdAt).toLocaleString().split(\" \")[1].slice(0, -3);\n\nconst MomentaryChatContentPart = React.memo<{\n  item: ChatItem;\n  replyChat: ReplyChat;\n}>(({ item, replyChat }) => {\n  const [openEmojiPicker, setOpenEmojiPicker] = useState(false);\n  const reply = (text: string) => replyChat(text, item.messageId);\n  return (\n    <li key={item.messageId} className=\"MomentaryChat-listPart\">\n      {openEmojiPicker && (\n        <EmojiPicker\n          onSelect={(e) => {\n            reply(e.native);\n            setOpenEmojiPicker(false);\n          }}\n          style={{ width: \"100%\" }}\n        />\n      )}\n      <div className=\"MomentaryChat-listPart-header\">\n        <div className=\"MomentaryChat-iconButton-container\">\n          <div className=\"MomentaryChat-iconButton\">\n            <button\n              type=\"button\"\n              onClick={() => {\n                setOpenEmojiPicker(!openEmojiPicker);\n              }}\n            >\n              +\n            </button>\n          </div>\n        </div>\n        <span className=\"MomentaryChat-nickname\">\n          {item.nickname || \"No Name\"}\n        </span>\n        <span className=\"MomentaryChat-time\">{getChatTime(item)}</span>\n      </div>\n      <div\n        className=\"MomentaryChat-text ck-content\"\n        dangerouslySetInnerHTML={sanitize(item.text)}\n      />\n      {(item.replies || []).map(([text, count]) => (\n        <button\n          key={text}\n          className=\"MomentaryChat-icon\"\n          type=\"button\"\n          onClick={() => reply(text)}\n        >\n          {text} {count}\n        </button>\n      ))}\n    </li>\n  );\n});\n\nconst MomentaryChatContent = React.memo<{\n  chatList: ChatList;\n  replyChat: ReplyChat;\n}>(({ chatList, replyChat }) => {\n  const chatListRef = useRef<HTMLUListElement | null>(null);\n  const latestMessageId = chatList[0]?.messageId;\n  useEffect(() => {\n    if (chatListRef.current && latestMessageId) {\n      chatListRef.current.scrollTop = chatListRef.current.scrollHeight;\n    }\n  }, [latestMessageId]);\n\n  return (\n    <ul className=\"MomentaryChat-list\" ref={chatListRef}>\n      {chatList.map((item) => (\n        <MomentaryChatContentPart\n          key={item.messageId}\n          item={item}\n          replyChat={replyChat}\n        />\n      ))}\n    </ul>\n  );\n});\n\nexport const MomentaryChat = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n}>(({ roomId, userId, nickname }) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const { chatList, sendChat, replyChat } = useMomentaryChat(\n    roomId,\n    userId,\n    nickname\n  );\n\n  const clearRef = useRef<() => void>();\n  const registerClear = (clear: () => void) => {\n    clearRef.current = clear;\n  };\n\n  const [canSend, setCanSend] = useState(false);\n  const textRef = useRef(\"\");\n  const setText = useCallback((t: string) => {\n    textRef.current = t;\n    setCanSend(!!t && t.length <= MAX_CHAT_TEXT_SIZE);\n  }, []);\n  const sendText = useCallback(() => {\n    if (textRef.current && textRef.current.length <= MAX_CHAT_TEXT_SIZE) {\n      sendChat(textRef.current);\n      setText(\"\");\n      if (clearRef.current) {\n        clearRef.current();\n      }\n    }\n  }, [sendChat, setText]);\n\n  const sendNotification = useNotification();\n  const latestChatItem = chatList[0];\n  useEffect(() => {\n    if (\n      latestChatItem &&\n      latestChatItem.createdAt > Date.now() - 10 * 1000 &&\n      new RegExp(`@${nickname}\\\\b`).test(latestChatItem.text)\n    ) {\n      sendNotification(\"You got a new message!\");\n    }\n  }, [nickname, latestChatItem, sendNotification]);\n\n  return (\n    <div className=\"MomentaryChat-container\" ref={containerRef}>\n      <MomentaryChatContent chatList={chatList} replyChat={replyChat} />\n      <div className=\"MomentaryChat-editor\">\n        <WysiwygEditor\n          registerClear={registerClear}\n          onChange={setText}\n          onMetaEnter={sendText}\n        />\n      </div>\n      <div className=\"MomentaryChat-button\">\n        <button type=\"button\" onClick={sendText} disabled={!canSend}>\n          Send\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default MomentaryChat;\n","import { useEffect, useCallback, useRef } from \"react\";\n\nexport const useNotification = () => {\n  const notificationRef = useRef<Notification>();\n  const sendNotification = useCallback((mesg: string) => {\n    if (Notification.permission === \"granted\") {\n      if (notificationRef.current) {\n        notificationRef.current.close();\n      }\n      notificationRef.current = new Notification(mesg);\n    }\n  }, []);\n  useEffect(() => {\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission();\n    }\n  }, []);\n  return sendNotification;\n};\n","import React from \"react\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { BaseEmoji, Picker } from \"emoji-mart\";\n\nexport { Emoji } from \"emoji-mart\";\nexport type EmojiDataType = BaseEmoji;\n\n// we do not support custom emojis\nexport const EmojiPicker = Picker as React.ComponentType<\n  | Omit<React.ComponentProps<typeof Picker>, \"custom\" | \"onSelect\">\n  | {\n      onSelect: (emoji: BaseEmoji) => void;\n    }\n>;\n"],"sourceRoot":""}