{"version":3,"sources":["components/MediaShare.tsx","hooks/useMediaShare.ts","hooks/useNicknameMap.ts","media/screen.ts"],"names":["Video","React","memo","nickname","stream","videoRef","useRef","useEffect","current","srcObject","className","ref","autoPlay","muted","MediaShare","roomId","userId","uniqueId","videoDevices","useVideoDevices","useState","videoDeviceId","setVideoDeviceId","mediaId","setMediaId","close","useCallback","uniqueShareId","videoType","videoStream","setVideoStream","videoStreamMap","setVideoStreamMap","cleanupFns","forEach","fn","trackMap","useSnapshot","getRoomState","Object","entries","uid","track","readyState","getTracks","includes","prev","MediaStream","onended","addEventListener","push","removeEventListener","roomState","addMediaType","removeMediaType","cleanup","a","getScreenStream","resultOrNull","result","getVideoStream","video","getVideoTracks","addTrack","dispose","removeTrack","useMediaShare","nicknameMap","useNicknameMap","displayMode","setDisplayMode","numOfVideos","values","filter","x","length","sqrtNumOfVideos","Math","ceil","sqrt","gridRows","displayStyle","gridTemplateColumns","gridTemplateRows","Array","fill","join","containerRef","fullscreenMode","setFullscreenMode","enterFullscreen","requestFullscreen","onfullscreenchange","document","fullscreenElement","exitFullscreen","e","type","onClick","value","onChange","target","disabled","map","videoDevice","deviceId","label","style","keys","mediaUserId","setNicknameMap","ydoc","getMap","listener","copied","changed","data","isObject","info","observe","unobserve","constraints","navigator","mediaDevices","getDisplayMedia","stop"],"mappings":"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","file":"static/js/17.2a3317b6.chunk.js","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from \"react\";\n\nimport \"./MediaShare.css\";\nimport { useMediaShare } from \"../hooks/useMediaShare\";\nimport { useVideoDevices } from \"../hooks/useAvailableDevices\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Video = React.memo<{\n  nickname: string;\n  stream: MediaStream;\n}>(({ nickname, stream }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (stream && videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return (\n    <div className=\"MediaShare-card\">\n      <video className=\"MediaShare-video\" ref={videoRef} autoPlay muted />\n      <div className=\"MediaShare-nickname\">{nickname}</div>\n    </div>\n  );\n});\n\nexport const MediaShare = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n  uniqueId?: string;\n}>(({ roomId, userId, nickname, uniqueId }) => {\n  const videoDevices = useVideoDevices();\n  const [videoDeviceId, setVideoDeviceId] = useState<string>(\"\");\n  const [mediaId, setMediaId] = useState<{ video: string } | \"SCREEN\" | null>(\n    null\n  );\n  const close = useCallback(() => {\n    setMediaId(null);\n  }, []);\n  const { videoStream, videoStreamMap } = useMediaShare(\n    roomId,\n    userId,\n    mediaId,\n    close,\n    uniqueId\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n  const [displayMode, setDisplayMode] = useState<\"grid\" | \"vertical\">(\"grid\");\n  const numOfVideos =\n    (videoStream ? 1 : 0) +\n    Object.values(videoStreamMap).filter((x) => x).length;\n  const sqrtNumOfVideos = Math.ceil(Math.sqrt(numOfVideos));\n  const gridRows = Math.ceil(numOfVideos / sqrtNumOfVideos);\n  const displayStyle =\n    displayMode === \"grid\"\n      ? {\n          gridTemplateColumns: `repeat(${sqrtNumOfVideos}, 1fr)`,\n          gridTemplateRows: `repeat(${gridRows}, ${100 / gridRows}%)`,\n        }\n      : {\n          gridTemplateRows: Array(numOfVideos).fill(\"100%\").join(\" \"),\n        };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [fullscreenMode, setFullscreenMode] = useState(false);\n  const enterFullscreen = async () => {\n    if (containerRef.current) {\n      try {\n        await containerRef.current.requestFullscreen();\n        setFullscreenMode(true);\n        containerRef.current.onfullscreenchange = () => {\n          setFullscreenMode(\n            document.fullscreenElement === containerRef.current\n          );\n        };\n      } catch (e) {\n        // ignored\n      }\n    }\n  };\n  const exitFullscreen = async () => {\n    try {\n      document.exitFullscreen();\n      setFullscreenMode(false);\n    } catch (e) {\n      // ignored\n    }\n  };\n\n  return (\n    <div className=\"MediaShare-container\" ref={containerRef}>\n      <div className=\"MediaShare-toolbar\">\n        {!fullscreenMode && (\n          <button type=\"button\" onClick={enterFullscreen}>\n            Enter Fullscreen\n          </button>\n        )}\n        {fullscreenMode && (\n          <button type=\"button\" onClick={exitFullscreen}>\n            Exit Fullscreen\n          </button>\n        )}\n        <select\n          value={displayMode}\n          onChange={(e) => setDisplayMode(e.target.value as typeof displayMode)}\n        >\n          <option value=\"grid\">Display in Grid</option>\n          <option value=\"vertical\">Display Vertically</option>\n        </select>\n        {mediaId !== null && (\n          <button type=\"button\" onClick={close}>\n            Stop sharing\n          </button>\n        )}\n        {mediaId === null && (\n          <button type=\"button\" onClick={() => setMediaId(\"SCREEN\")}>\n            Start Screen Share\n          </button>\n        )}\n        {mediaId === null && (\n          <>\n            <select\n              value={videoDeviceId}\n              onChange={(e) => setVideoDeviceId(e.target.value)}\n            >\n              <option value=\"\" disabled>\n                Select Camera to Share\n              </option>\n              {videoDevices.map((videoDevice) => (\n                <option key={videoDevice.deviceId} value={videoDevice.deviceId}>\n                  {videoDevice.label}\n                </option>\n              ))}\n            </select>\n            {videoDeviceId && (\n              <button\n                type=\"button\"\n                onClick={() => setMediaId({ video: videoDeviceId })}\n              >\n                Start Video Share\n              </button>\n            )}\n          </>\n        )}\n      </div>\n      <div className=\"MediaShare-body\" style={displayStyle}>\n        {videoStream && <Video nickname={nickname} stream={videoStream} />}\n        {Object.keys(videoStreamMap).map((mediaUserId) => {\n          const stream = videoStreamMap[mediaUserId];\n          if (!stream) return null;\n          return (\n            <Video\n              key={mediaUserId}\n              nickname={nicknameMap[mediaUserId] || \"No Name\"}\n              stream={stream}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default MediaShare;\n","import { useEffect, useState, useRef } from \"react\";\nimport { useSnapshot } from \"valtio\";\n\nimport { getScreenStream } from \"../media/screen\";\nimport { getVideoStream } from \"../media/video\";\nimport { getRoomState } from \"../states/roomMap\";\n\nexport const useMediaShare = (\n  roomId: string,\n  userId: string,\n  mediaId: { video: string } | \"SCREEN\" | null,\n  close: () => void,\n  uniqueShareId?: string\n) => {\n  const videoType = `${uniqueShareId || \"mediaShare\"}Video`;\n  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);\n  const [videoStreamMap, setVideoStreamMap] = useState<{\n    [userId: string]: MediaStream | null;\n  }>({});\n\n  type CleanupFn = () => void;\n  const cleanupFns = useRef<CleanupFn[]>([]);\n  useEffect(() => {\n    const cleanup = () => {\n      cleanupFns.current.forEach((fn) => fn());\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = ([uid, track]: [string, MediaStreamTrack]) => {\n    if (track.readyState === \"ended\") return;\n    if (videoStreamMap[uid]?.getTracks().includes(track)) return;\n    setVideoStreamMap((prev) => ({\n      ...prev,\n      [uid]: new MediaStream([track]),\n    }));\n    const onended = () => {\n      setVideoStreamMap((prev) => ({\n        ...prev,\n        [uid]: null,\n      }));\n    };\n    track.addEventListener(\"ended\", onended);\n    cleanupFns.current.push(() => {\n      track.removeEventListener(\"ended\", onended);\n    });\n  };\n\n  const trackMap = useSnapshot(getRoomState(roomId, userId).trackMap);\n  Object.entries(trackMap[videoType] || {}).forEach(onTrack);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    roomState.addMediaType(videoType);\n    return () => {\n      roomState.removeMediaType(videoType);\n    };\n  }, [roomId, userId, videoType]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let cleanup: (() => void) | null | false = null;\n    if (mediaId) {\n      (async () => {\n        let result: { stream: MediaStream; dispose: () => void };\n        if (mediaId === \"SCREEN\") {\n          const resultOrNull = await getScreenStream();\n          if (!resultOrNull) {\n            close();\n            return;\n          }\n          result = resultOrNull;\n        } else {\n          result = await getVideoStream(mediaId.video);\n        }\n        const [track] = result.stream.getVideoTracks();\n        roomState.addTrack(videoType, track);\n        setVideoStream(result.stream);\n        track.addEventListener(\"ended\", () => {\n          if (cleanup) cleanup();\n          cleanup = null;\n        });\n        const dispose = () => {\n          roomState.removeTrack(videoType);\n          result.dispose();\n          setVideoStream(null);\n          close();\n        };\n        if (cleanup === false) {\n          dispose();\n        } else {\n          cleanup = dispose;\n        }\n      })();\n    }\n    return () => {\n      if (cleanup) cleanup();\n      cleanup = false;\n    };\n  }, [roomId, userId, videoType, mediaId, close]);\n\n  return { videoStream, videoStreamMap };\n};\n","import { useEffect, useState } from \"react\";\n\nimport { isObject } from \"../utils/types\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst hasInfoNickname = (x: unknown): x is { info: { nickname: string } } =>\n  isObject(x) &&\n  isObject((x as { info: unknown }).info) &&\n  typeof (x as { info: { nickname: unknown } }).info.nickname === \"string\";\n\ntype NicknameMap = {\n  [userId: string]: string;\n};\n\nexport const useNicknameMap = (roomId: string, userId: string) => {\n  const [nicknameMap, setNicknameMap] = useState<NicknameMap>({});\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const listener = () => {\n      setNicknameMap((prev) => {\n        const copied = { ...prev };\n        let changed = false;\n        map.forEach((data, uid) => {\n          if (uid === userId) return;\n          if (!hasInfoNickname(data)) return;\n          if (!copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          } else if (data.info.nickname !== copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          }\n        });\n        if (changed) {\n          return copied;\n        }\n        return prev;\n      });\n    };\n    map.observe(listener);\n    listener();\n    return () => {\n      map.unobserve(listener);\n    };\n  }, [roomId, userId]);\n\n  return nicknameMap;\n};\n","export const getScreenStream = async () => {\n  try {\n    const constraints = { video: true };\n    const stream = (await (navigator.mediaDevices as any).getDisplayMedia(\n      constraints\n    )) as MediaStream;\n    const [track] = stream.getVideoTracks();\n    const dispose = () => {\n      track.stop();\n    };\n    return {\n      stream,\n      dispose,\n    };\n  } catch (e) {\n    return null;\n  }\n};\n"],"sourceRoot":""}