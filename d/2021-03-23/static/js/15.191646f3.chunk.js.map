{"version":3,"sources":["components/UserStatus.tsx","components/SettingPanel.tsx","components/Welcome.tsx","utils/emoji.ts"],"names":["UserStatus","React","memo","setStatusMesg","useState","emoji","setEmoji","text","setText","openEmojiPicker","setOpenEmojiPicker","className","type","onClick","size","onSubmit","event","preventDefault","native","value","onChange","e","target","placeholder","disabled","onSelect","style","width","initialConfigOpen","getStringItem","SettingPanel","roomId","userId","configOpen","setConfigOpen","useEffect","setStringItem","useProxy","getRoomState","networkStatusList","networkStatus","appLink","window","location","href","replace","o","title","readOnly","JSON","stringify","Welcome","EmojiPicker","Picker"],"mappings":"mVAKaA,EAAaC,IAAMC,MAE7B,YAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EACEC,mBAA+B,MADjC,mBACjBC,EADiB,KACVC,EADU,OAEAF,mBAAS,IAFT,mBAEjBG,EAFiB,KAEXC,EAFW,OASsBJ,oBAAS,GAT/B,mBASjBK,EATiB,KASAC,EATA,KAUxB,OACE,sBAAKC,UAAU,uBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,wBACEC,KAAK,SACLC,QAAS,WACPH,GAAoBD,IAHxB,SAMGJ,EAAQ,cAAC,IAAD,CAAOA,MAAOA,EAAOS,KAAM,KAAS,SAGhDT,GACC,qBAAKM,UAAU,wBAAf,SACE,uBAAMI,SAtBC,SAACC,GAChBA,EAAMC,iBACFV,GACFJ,EAAc,GAAD,QAAS,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOa,SAAU,KAArB,OAA2BX,KAmBlC,UACE,uBACEY,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAQa,EAAEC,OAAOH,QAClCI,YAAY,4BAEd,wBAAQX,KAAK,SAASY,UAAWjB,EAAjC,sBAMN,wBACEK,KAAK,SACLC,QAAS,WACPP,EAAS,MACTE,EAAQ,IACRL,EAAc,IACdO,GAAmB,IAErBc,UAAWnB,EARb,sBAaDI,GACC,cAAC,IAAD,CACEgB,SAAU,SAACJ,GACTf,EAASe,GACTlB,EAAc,GAAD,QAAK,OAADkB,QAAC,IAADA,OAAA,EAAAA,EAAGH,SAAU,KAAjB,OAAuBX,IACpCG,GAAmB,IAErBgB,MAAO,CAAEC,MAAO,gBCxDpBC,EAAuD,SAAnCC,YAAc,iBAE3BC,EAAe7B,IAAMC,MAI/B,YAAwC,IAArC6B,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,OAAQ7B,EAAoB,EAApBA,cAAoB,EACJC,mBAASwB,GADL,mBACjCK,EADiC,KACrBC,EADqB,KAExCC,qBAAU,WACRC,YAAc,gBAAiBH,EAAa,QAAU,UACrD,CAACA,IAJoC,MAMhBI,YACtBC,YAAaP,EAAQC,GAAQO,mBADxBC,EANiC,oBAUlCC,EAAO,yBAAqBC,OAAOC,SAASC,KAAKC,QACrD,cACA,KAGF,OACE,sBAAKlC,UAAU,yBAAf,UACE,yBACEC,KAAK,SACLD,UAAU,6BACVE,QAAS,kBAAMqB,GAAc,SAACY,GAAD,OAAQA,MAHvC,oBAKUb,EAAa,8CAAe,iDAErCA,GACC,sBAAKtB,UAAU,sBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,cAAC,EAAD,CAAYR,cAAeA,MAE7B,sBAAKQ,UAAU,0BAAf,UACE,uBAAMoC,MAAM,uCAAZ,uBACa,OAEb,uBAAO5B,MAAOuB,OAAOC,SAASC,KAAMI,UAAQ,IAAI,IAChD,mBAAGJ,KAAMH,EAASM,MAAM,oCAAxB,yBAIF,qBAAKpC,UAAU,sBAAf,SACGsC,KAAKC,UAAUV,cChDfW,EAAUlD,IAAMC,MAI1B,gBAAG6B,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQ7B,EAAnB,EAAmBA,cAAnB,OACD,sBAAKQ,UAAU,oBAAf,UACE,0DACA,cAAC,EAAD,CACEoB,OAAQA,EACRC,OAAQA,EACR7B,cAAeA,IAEjB,8CACA,+BACE,qFACA,uFAEF,6CACA,+BACE,gGACA,kKAKF,gDACA,+BACE,gGACA,+HAKF,qDACA,+BACE,oFACA,sFAKSgD,a,iCC7Cf,0FAOO,IAAMC,EAAcC","file":"static/js/15.191646f3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./UserStatus.css\";\nimport { Emoji, EmojiPicker, EmojiDataType } from \"../utils/emoji\";\n\nexport const UserStatus = React.memo<{\n  setStatusMesg: (mesg: string) => void;\n}>(({ setStatusMesg }) => {\n  const [emoji, setEmoji] = useState<EmojiDataType | null>(null);\n  const [text, setText] = useState(\"\");\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (text) {\n      setStatusMesg(`${emoji?.native || \" \"}${text}`);\n    }\n  };\n  const [openEmojiPicker, setOpenEmojiPicker] = useState(false);\n  return (\n    <div className=\"UserStatus-container\">\n      <div className=\"UserStatus-status-area\">\n        <div className=\"UserStatus-emoji\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              setOpenEmojiPicker(!openEmojiPicker);\n            }}\n          >\n            {emoji ? <Emoji emoji={emoji} size={10} /> : \":)\"}\n          </button>\n        </div>\n        {emoji && (\n          <div className=\"UserStatus-statusmesg\">\n            <form onSubmit={onSubmit}>\n              <input\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                placeholder=\"Enter status message...\"\n              />\n              <button type=\"submit\" disabled={!text}>\n                Set\n              </button>\n            </form>\n          </div>\n        )}\n        <button\n          type=\"button\"\n          onClick={() => {\n            setEmoji(null);\n            setText(\"\");\n            setStatusMesg(\"\");\n            setOpenEmojiPicker(false);\n          }}\n          disabled={!emoji}\n        >\n          Clear\n        </button>\n      </div>\n      {openEmojiPicker && (\n        <EmojiPicker\n          onSelect={(e) => {\n            setEmoji(e);\n            setStatusMesg(`${e?.native || \" \"}${text}`);\n            setOpenEmojiPicker(false);\n          }}\n          style={{ width: \"100%\" }}\n        />\n      )}\n    </div>\n  );\n});\n","import React, { useEffect, useState } from \"react\";\nimport { useProxy } from \"valtio\";\n\nimport \"./SettingPanel.css\";\nimport { setStringItem, getStringItem } from \"../utils/storage\";\nimport { getRoomState } from \"../states/roomMap\";\nimport { UserStatus } from \"./UserStatus\";\n\nconst initialConfigOpen = getStringItem(\"config_hidden\") !== \"true\";\n\nexport const SettingPanel = React.memo<{\n  roomId: string;\n  userId: string;\n  setStatusMesg: (mesg: string) => void;\n}>(({ roomId, userId, setStatusMesg }) => {\n  const [configOpen, setConfigOpen] = useState(initialConfigOpen);\n  useEffect(() => {\n    setStringItem(\"config_hidden\", configOpen ? \"false\" : \"true\");\n  }, [configOpen]);\n\n  const [networkStatus] = useProxy(\n    getRoomState(roomId, userId).networkStatusList\n  );\n\n  const appLink = `remote-faces://${window.location.href.replace(\n    /^https:\\/\\//,\n    \"\"\n  )}`;\n\n  return (\n    <div className=\"SettingPanel-container\">\n      <button\n        type=\"button\"\n        className=\"SettingPanel-config-toggle\"\n        onClick={() => setConfigOpen((o) => !o)}\n      >\n        Setting{configOpen ? <>&#9660;</> : <>&#9654;</>}\n      </button>\n      {configOpen && (\n        <div className=\"SettingPanel-config\">\n          <div className=\"SettingPanel-config-row\">\n            <UserStatus setStatusMesg={setStatusMesg} />\n          </div>\n          <div className=\"SettingPanel-config-row\">\n            <span title=\"Share this link with your colleagues\">\n              Room Link:{\" \"}\n            </span>\n            <input value={window.location.href} readOnly />{\" \"}\n            <a href={appLink} title=\"Open this link in the desktop app\">\n              Open App\n            </a>\n          </div>\n          <div className=\"SettingPanel-status\">\n            {JSON.stringify(networkStatus)}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import React from \"react\";\n\nimport \"./Welcome.css\";\nimport { SettingPanel } from \"./SettingPanel\";\n\nexport const Welcome = React.memo<{\n  roomId: string;\n  userId: string;\n  setStatusMesg: (mesg: string) => void;\n}>(({ roomId, userId, setStatusMesg }) => (\n  <div className=\"Welcome-container\">\n    <h1>Welcome to Remote Faces!</h1>\n    <SettingPanel\n      roomId={roomId}\n      userId={userId}\n      setStatusMesg={setStatusMesg}\n    />\n    <h2>Instructions</h2>\n    <ul>\n      <li>At first, enter Your Name and click Set in Setting.</li>\n      <li>Let your colleagues know the room link in Setting.</li>\n    </ul>\n    <h2>Basic usage</h2>\n    <ul>\n      <li>See faces at the left most area, which are updated every 2min.</li>\n      <li>\n        You can text in the right area of the faces. Messages are not stored\n        anywhere and will disappear once everyone left the room.\n      </li>\n    </ul>\n    <h2>Advanced usage</h2>\n    <ul>\n      <li>Install the Electron app. Open App in Setting works for MacOS.</li>\n      <li>\n        Enable live mode (the top left icon) to share face videos. You can\n        toggle mic and speaker.\n      </li>\n    </ul>\n    <h2>Additional features</h2>\n    <ul>\n      <li>The hamburger menu shows some additional features.</li>\n      <li>Screen Share, Video Share, and White Board.</li>\n    </ul>\n  </div>\n));\n\nexport default Welcome;\n","import React from \"react\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { BaseEmoji, Picker } from \"emoji-mart\";\n\nexport { Emoji } from \"emoji-mart\";\nexport type EmojiDataType = BaseEmoji;\n\n// we do not support custom emojis\nexport const EmojiPicker = Picker as React.ComponentType<\n  | Omit<React.ComponentProps<typeof Picker>, \"custom\" | \"onSelect\">\n  | {\n      onSelect: (emoji: BaseEmoji) => void;\n    }\n>;\n"],"sourceRoot":""}