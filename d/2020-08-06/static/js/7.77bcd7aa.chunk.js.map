{"version":3,"sources":["utils/sleep.ts","utils/types.ts","network/trackUtils.ts","network/ipfsUtils.ts","network/pubsubRoom.ts"],"names":["sleep","ms","Promise","resolve","setTimeout","isObject","x","hasStringProp","prop","hasObjectProp","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","a","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","peerIndexCounter","DEFAULT_CONFIG","iceServers","urls","username","credential","sdpSemantics","createConnectionMap","map","Map","setMediaTypes","conn","mediaTypes","value","get","peer","getMediaTypes","addConn","peerId","userId","Error","peerIndex","sendPc","recvPc","getConn","findConn","Array","from","values","v","delConn","delete","getPeerIndexList","forEachConns","callback","forEach","forEachConnsAcceptingMedia","mediaType","includes","size","topicsForMediaTypes","getTopicForMediaType","roomId","key","topic","sha256","slice","ROOM_ID_PREFIX_LEN","createRoom","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","myIpfs","myPeerId","connMap","localStream","roomTopic","importCryptoKey","cryptoKey","showConnectedStatus","peerIndexList","type","parsePayload","encrypted","JSON","decrypt","payload","parse","console","log","info","undefined","sendPayload","encrypt","stringify","byteLength","warn","pubsub","publish","error","sendPayloadDirectly","noop","subscribe","unsubscribe","broadcastData","data","sendData","faceAudioDisposeList","acceptMediaTypes","mTypes","length","faceAudioHandler","msg","c","worker","audioCtx","AudioContext","destination","createMediaStreamDestination","currTime","pending","Worker","onmessage","e","buffer","Float32Array","currentTime","audioBuffer","createBuffer","copyToChannel","audioBufferSource","createBufferSource","connect","onended","start","audioTrack","stream","getAudioTracks","push","terminate","decryptBuffer","byteOffset","buf","postMessage","dispose","splice","filter","MediaStream","getReceivers","readyState","sendSDP","sdp","SDP","handlePayloadSDP","negotiationId","negotiationIdMap","startNegotiation","running","secureRandomId","negotiate","sendIce","ice","ICE","handlePayloadIce","direction","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","syncAllTracks","handlePayloadData","handlePayload","initConnection","payloadUserId","getUserIdFromPayload","pubsubHandler","checkPeers","peers","lastInitIpfsTime","Date","now","prevIpfs","closeIpfs","initIpfs","Ipfs","create","repo","config","Addresses","Swarm","ipfs","id","trackMediaTypeMap","trackDisposeMap","runDispose","trackSource","createMediaStreamSource","audioWorklet","addModule","audioEncoder","AudioWorkletNode","port","encryptBuffer","name","removeTrack","sender","getSenders","s","senders","getTracks","mType"],"mappings":"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","file":"static/js/7.77bcd7aa.chunk.js","sourcesContent":["export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","export const isObject = (x: unknown): x is object =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <Prop extends string>(\n  x: object,\n  prop: Prop\n): x is object & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <Prop extends string>(\n  x: object,\n  prop: Prop\n): x is object & Record<Prop, object> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<F extends (...args: any) => any> = ReturnType<\n  F\n> extends Promise<infer T>\n  ? T\n  : never;\n","import { sleep } from \"../utils/sleep\";\n\nconst setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = async () => {\n    await sleep(5000);\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    }\n  };\n  track.addEventListener(\"mute\", onmute);\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n","let peerIndexCounter = 0;\n\nconst getNextPeerIndex = () => {\n  peerIndexCounter += 1;\n  return peerIndexCounter;\n};\n\nexport type Connection = {\n  peerIndex: number;\n  peer: string; // ipfsId\n  userId: string;\n  sendPc: RTCPeerConnection;\n  recvPc: RTCPeerConnection;\n};\n\nconst DEFAULT_CONFIG = {\n  iceServers: [\n    { urls: \"stun:stun.l.google.com:19302\" },\n    {\n      urls: \"turn:0.peerjs.com:3478\",\n      username: \"peerjs\",\n      credential: \"peerjsp\",\n    },\n  ],\n  sdpSemantics: \"unified-plan\",\n};\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Connection;\n    mediaTypes: string[];\n  };\n  const map = new Map<string, Value>();\n\n  const setMediaTypes = (conn: Connection, mediaTypes: string[]) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.mediaTypes = mediaTypes;\n    }\n  };\n\n  const getMediaTypes = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    return (value && value.mediaTypes) || [];\n  };\n\n  const addConn = (peerId: string, userId: string) => {\n    const value = map.get(peerId);\n    if (value) {\n      throw new Error(\"addConn: already exists\");\n    }\n    const conn: Connection = {\n      peerIndex: getNextPeerIndex(),\n      peer: peerId,\n      userId,\n      sendPc: new RTCPeerConnection(DEFAULT_CONFIG),\n      recvPc: new RTCPeerConnection(DEFAULT_CONFIG),\n    };\n    map.set(conn.peer, { conn, mediaTypes: [] });\n    return conn;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const findConn = (peerIndex: number) => {\n    const value = Array.from(map.values()).find(\n      (v) => v.conn.peerIndex === peerIndex\n    );\n    if (value) return value.conn;\n    return null;\n  };\n\n  const delConn = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n      conn.sendPc.close();\n      conn.recvPc.close();\n    } else {\n      throw new Error(\"delConn: does not exist\");\n    }\n  };\n\n  const getPeerIndexList = () =>\n    Array.from(map.values()).map((v) => v.conn.peerIndex);\n\n  const forEachConns = (callback: (conn: Connection) => void) => {\n    Array.from(map.values()).forEach((value) => {\n      callback(value.conn);\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Connection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.mediaTypes && value.mediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const size = () => map.size;\n\n  return {\n    setMediaTypes,\n    getMediaTypes,\n    addConn,\n    getConn,\n    findConn,\n    delConn,\n    getPeerIndexList,\n    forEachConns,\n    forEachConnsAcceptingMedia,\n    size,\n  };\n};\n","import Ipfs, { IpfsType, PubsubHandler } from \"ipfs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  sha256,\n  secureRandomId,\n  importCryptoKey,\n  encryptBuffer,\n  decryptBuffer,\n  encrypt,\n  decrypt,\n} from \"../utils/crypto\";\nimport { isObject, hasStringProp, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport { Connection, createConnectionMap } from \"./ipfsUtils\";\nimport { setupTrackStopOnLongMute, loopbackPeerConnection } from \"./trackUtils\";\n\nconst topicsForMediaTypes = new Map<string, string>();\n\nconst getTopicForMediaType = async (roomId: string, mediaType: string) => {\n  const key = `${roomId} ${mediaType}`;\n  let topic = topicsForMediaTypes.get(key);\n  if (!topic) {\n    topic = (await sha256(key)).slice(0, ROOM_ID_PREFIX_LEN);\n    topicsForMediaTypes.set(key, topic);\n  }\n  return topic;\n};\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  let myIpfs: IpfsType | null = null;\n  let myPeerId: string | null = null;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n  let localStream: MediaStream | null = null;\n\n  const roomTopic = roomId.slice(0, ROOM_ID_PREFIX_LEN);\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap.getPeerIndexList();\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n  };\n\n  const parsePayload = async (encrypted: ArrayBuffer): Promise<unknown> => {\n    try {\n      const payload = JSON.parse(await decrypt(encrypted, cryptoKey));\n      console.log(\"decrypted payload\", payload);\n      return payload;\n    } catch (e) {\n      console.info(\"Error in parsePayload\", e, encrypted);\n      return undefined;\n    }\n  };\n\n  const sendPayload = async (topic: string, payload: unknown) => {\n    try {\n      console.log(\"payload to encrypt\", topic, payload);\n      const encrypted = await encrypt(JSON.stringify(payload), cryptoKey);\n      console.log(\"sending encrypted\", encrypted.byteLength);\n      if (encrypted.byteLength > 262144) {\n        console.warn(\"encrypted message too large, aborting\");\n        return;\n      }\n      if (!myIpfs) {\n        console.warn(\"no myIpfs initialized\");\n        return;\n      }\n      await myIpfs.pubsub.publish(topic, encrypted);\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const sendPayloadDirectly = async (conn: Connection, payload: unknown) => {\n    const topic = `${roomTopic} ${conn.peer}`;\n    // HACK somehow, publish doesn't work without this\n    if (myIpfs) {\n      const noop = () => null;\n      await myIpfs.pubsub.subscribe(topic, noop);\n      await myIpfs.pubsub.unsubscribe(topic, noop);\n    }\n    await sendPayload(topic, payload);\n  };\n\n  const broadcastData = async (data: unknown) => {\n    if (disposed) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayload(roomTopic, payload);\n  };\n\n  const sendData = async (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.findConn(peerIndex);\n    if (!conn) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayloadDirectly(conn, payload);\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).sendData = sendData;\n  }\n\n  // TODO very limited use case for now\n  const faceAudioDisposeList: (() => void)[] = [];\n\n  const acceptMediaTypes = async (mTypes: string[]) => {\n    if (mTypes.includes(\"faceAudio\") && !faceAudioDisposeList.length) {\n      // XXX experimental\n      if (myIpfs) {\n        const topic = await getTopicForMediaType(roomId, \"faceAudio\");\n        const faceAudioHandler: PubsubHandler = async (msg) => {\n          if (msg.from === myPeerId) return;\n          const conn = connMap.getConn(msg.from);\n          if (!conn) {\n            console.warn(\"conn not ready\");\n            return;\n          }\n          const info: PeerInfo = {\n            userId: conn.userId,\n            peerIndex: conn.peerIndex,\n            mediaTypes: connMap.getMediaTypes(conn),\n          };\n          const c: {\n            worker: Worker;\n          } = conn as any; // TODO do it more cleanly\n          if (!c.worker) {\n            const audioCtx = new AudioContext();\n            const destination = audioCtx.createMediaStreamDestination();\n            let currTime = 0;\n            let pending = 0;\n            const worker = new Worker(\"audio-decoder.js\", { type: \"module\" });\n            worker.onmessage = (e) => {\n              const buffer = new Float32Array(e.data);\n              if (!pending) {\n                currTime = audioCtx.currentTime;\n              }\n              currTime += 0.06; // 60ms\n              pending += 1;\n              const audioBuffer = audioCtx.createBuffer(1, 2880, 48000);\n              audioBuffer.copyToChannel(buffer, 0);\n              const audioBufferSource = audioCtx.createBufferSource();\n              audioBufferSource.buffer = audioBuffer;\n              audioBufferSource.connect(destination);\n              audioBufferSource.onended = () => {\n                pending -= 1;\n              };\n              audioBufferSource.start(currTime);\n            };\n            c.worker = worker;\n            const audioTrack = destination.stream.getAudioTracks()[0];\n            receiveTrack(await loopbackPeerConnection(audioTrack), info);\n            faceAudioDisposeList.push(() => {\n              audioCtx.close();\n              audioTrack.dispatchEvent(new Event(\"ended\"));\n              worker.terminate();\n              if (c.worker === worker) {\n                delete c.worker;\n              }\n            });\n          }\n          const buf = await decryptBuffer(\n            msg.data.buffer,\n            msg.data.byteOffset,\n            msg.data.byteLength,\n            cryptoKey\n          );\n          if (c.worker) {\n            c.worker.postMessage([buf], [buf]);\n          }\n        };\n        myIpfs.pubsub.subscribe(topic, faceAudioHandler);\n        faceAudioDisposeList.push(() => {\n          if (myIpfs) {\n            myIpfs.pubsub.unsubscribe(topic, faceAudioHandler);\n          }\n        });\n      }\n    } else {\n      faceAudioDisposeList.forEach((dispose) => dispose());\n      faceAudioDisposeList.splice(0, faceAudioDisposeList.length);\n    }\n    mediaTypes = mTypes.filter((t) => t !== \"faceAudio\");\n    if (mediaTypes.length) {\n      if (!localStream) {\n        localStream = new MediaStream();\n        connMap.forEachConns((conn) => {\n          const info: PeerInfo = {\n            userId: conn.userId,\n            peerIndex: conn.peerIndex,\n            mediaTypes: connMap.getMediaTypes(conn),\n          };\n          conn.recvPc.getReceivers().forEach((receiver) => {\n            if (receiver.track.readyState !== \"live\") return;\n            receiveTrack(\n              setupTrackStopOnLongMute(receiver.track, conn.recvPc),\n              info\n            );\n          });\n        });\n      }\n    } else {\n      localStream = null;\n    }\n    broadcastData(null);\n  };\n\n  const sendSDP = async (\n    conn: Connection,\n    sdp:\n      | {\n          negotiationId: string;\n          offer: RTCSessionDescriptionInit;\n        }\n      | {\n          negotiationId: string;\n          answer: RTCSessionDescriptionInit;\n        }\n  ) => {\n    await sendPayloadDirectly(conn, { SDP: sdp });\n  };\n\n  const handlePayloadSDP = async (conn: Connection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    if (!hasStringProp(sdp, \"negotiationId\")) {\n      console.warn(\"negotiationId not found in SDP\");\n      return;\n    }\n    const { negotiationId } = sdp;\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.recvPc.setRemoteDescription(sdp.offer);\n        const answer = await conn.recvPc.createAnswer();\n        await conn.recvPc.setLocalDescription(answer);\n        sendSDP(conn, { negotiationId, answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      if (negotiationIdMap.get(conn) === negotiationId) {\n        negotiationIdMap.delete(conn);\n      }\n      try {\n        await conn.sendPc.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const negotiationIdMap = new WeakMap<Connection, string>();\n  const startNegotiation = (conn: Connection) => {\n    const running = negotiationIdMap.has(conn);\n    negotiationIdMap.set(conn, secureRandomId());\n    if (running) return;\n    const negotiate = async () => {\n      const negotiationId = negotiationIdMap.get(conn);\n      if (!negotiationId) return;\n      const offer = await conn.sendPc.createOffer();\n      await conn.sendPc.setLocalDescription(offer);\n      await sendSDP(conn, { negotiationId, offer });\n      await sleep(5000);\n      negotiate();\n    };\n    negotiate();\n  };\n\n  const sendIce = (\n    conn: Connection,\n    ice: {\n      direction: \"send\" | \"recv\";\n      candidate: RTCIceCandidate;\n    }\n  ) => {\n    sendPayloadDirectly(conn, { ICE: ice });\n  };\n\n  const handlePayloadIce = (conn: Connection, ice: unknown) => {\n    if (!isObject(ice)) return;\n    if (!hasStringProp(ice, \"direction\")) {\n      console.warn(\"direction not found in ICE\");\n      return;\n    }\n    if (!hasObjectProp(ice, \"candidate\")) {\n      console.warn(\"candidate not found in ICE\");\n      return;\n    }\n    try {\n      if (ice.direction === \"send\") {\n        conn.recvPc.addIceCandidate(ice.candidate);\n      } else if (ice.direction === \"recv\") {\n        conn.sendPc.addIceCandidate(ice.candidate);\n      }\n    } catch (e) {\n      console.info(\"handleCandidate failed\", e);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Connection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadData = (conn: Connection, data: unknown) => {\n    const info: PeerInfo = {\n      userId: conn.userId,\n      peerIndex: conn.peerIndex,\n      mediaTypes: connMap.getMediaTypes(conn),\n    };\n    try {\n      receiveData(data, info);\n    } catch (e) {\n      console.warn(\"receiveData\", e);\n    }\n  };\n\n  const handlePayload = async (conn: Connection, payload: unknown) => {\n    if (disposed) return;\n    try {\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadIce(conn, (payload as { ICE?: unknown }).ICE);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, payload);\n    }\n  };\n\n  const initConnection = (peerId: string, payloadUserId: string) => {\n    const conn = connMap.addConn(peerId, payloadUserId);\n    conn.sendPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"send\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"recv\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      const info: PeerInfo = {\n        userId: conn.userId,\n        peerIndex: conn.peerIndex,\n        mediaTypes: connMap.getMediaTypes(conn),\n      };\n      receiveTrack(setupTrackStopOnLongMute(event.track, conn.recvPc), info);\n    });\n    notifyNewPeer(conn.peerIndex);\n    updateNetworkStatus({\n      type: \"NEW_CONNECTION\",\n      peerIndex: conn.peerIndex,\n    });\n    return conn;\n  };\n\n  const getUserIdFromPayload = (payload: unknown) => {\n    if (!isObject(payload)) return null;\n    const payloadUserId = (payload as { userId: unknown }).userId;\n    if (typeof payloadUserId !== \"string\") return null;\n    return payloadUserId;\n  };\n\n  const pubsubHandler: PubsubHandler = async (msg) => {\n    if (msg.from === myPeerId) return;\n    const payload = await parsePayload(msg.data);\n    const payloadUserId = getUserIdFromPayload(payload);\n    let conn = connMap.getConn(msg.from);\n    if (!conn) {\n      if (payloadUserId) {\n        conn = initConnection(msg.from, payloadUserId);\n      } else {\n        console.warn(\"cannot initialize conn without user id\");\n      }\n    }\n    if (conn) {\n      await handlePayload(conn, payload);\n    }\n    showConnectedStatus();\n  };\n\n  const checkPeers = async () => {\n    if (disposed) return;\n    const peers = myIpfs ? myIpfs.pubsub.peers(roomTopic) : [];\n    connMap.forEachConns((conn) => {\n      if (!peers.includes(conn.peer)) {\n        connMap.delConn(conn);\n        updateNetworkStatus({\n          type: \"CONNECTION_CLOSED\",\n          peerIndex: conn.peerIndex,\n        });\n      }\n    });\n    if (\n      myIpfs &&\n      connMap.size() === 0 &&\n      lastInitIpfsTime + 3 * 60 * 1000 < Date.now()\n    ) {\n      const prevIpfs = myIpfs;\n      myIpfs = null;\n      myPeerId = null;\n      await closeIpfs(prevIpfs);\n      await sleep(20 * 1000);\n      await initIpfs();\n      return;\n    }\n    if (!peers.length) {\n      updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n      await sleep(1000);\n      checkPeers();\n      return;\n    }\n    if (!connMap.size()) {\n      await broadcastData(null);\n    }\n    await sleep(5000);\n    checkPeers();\n  };\n\n  let lastInitIpfsTime = 0;\n  const initIpfs = async () => {\n    lastInitIpfsTime = Date.now();\n    updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex: 0 });\n    const ipfs: IpfsType = await Ipfs.create({\n      repo: secureRandomId(),\n      config: {\n        Addresses: {\n          Swarm: [\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          ],\n        },\n      },\n    });\n    myPeerId = (await ipfs.id()).id;\n    await ipfs.pubsub.subscribe(roomTopic, pubsubHandler);\n    await ipfs.pubsub.subscribe(`${roomTopic} ${myPeerId}`, pubsubHandler);\n    myIpfs = ipfs;\n    if (process.env.NODE_ENV !== \"production\") {\n      (window as any).myIpfs = myIpfs;\n    }\n    checkPeers();\n  };\n  initIpfs();\n\n  const closeIpfs = async (ipfs: IpfsType) => {\n    await ipfs.pubsub.unsubscribe(`${roomTopic} ${myPeerId}`, pubsubHandler);\n    await ipfs.pubsub.unsubscribe(roomTopic, pubsubHandler);\n    await ipfs.stop();\n  };\n\n  const trackMediaTypeMap = new WeakMap<MediaStreamTrack, string>();\n  const trackDisposeMap = new WeakMap<MediaStreamTrack, () => void>();\n  const runDispose = (dispose?: () => void) => {\n    if (dispose) {\n      dispose();\n    }\n  };\n\n  const addTrack = async (mediaType: string, track: MediaStreamTrack) => {\n    if (mediaType === \"faceAudio\") {\n      // XXX experimental\n      runDispose(trackDisposeMap.get(track));\n      const stream = new MediaStream([track]);\n      const audioCtx = new AudioContext();\n      const trackSource = audioCtx.createMediaStreamSource(stream);\n      await audioCtx.audioWorklet.addModule(\"audio-encoder.js\");\n      const audioEncoder = new AudioWorkletNode(audioCtx, \"audio-encoder\");\n      const topic = await getTopicForMediaType(roomId, \"faceAudio\");\n      audioEncoder.port.onmessage = async (event) => {\n        const encrypted = await encryptBuffer(event.data, cryptoKey);\n        if (myIpfs) {\n          myIpfs.pubsub.publish(topic, encrypted);\n        }\n      };\n      trackSource.connect(audioEncoder);\n      trackDisposeMap.set(track, () => {\n        audioCtx.close();\n      });\n      return;\n    }\n    if (!localStream) return;\n    trackMediaTypeMap.set(track, mediaType);\n    localStream.addTrack(track);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        if (!localStream) return;\n        conn.sendPc.addTrack(track, localStream);\n        startNegotiation(conn);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (mediaType === \"faceAudio\") {\n      // XXX experimental\n      runDispose(trackDisposeMap.get(track));\n      return;\n    }\n    if (localStream) {\n      localStream.removeTrack(track);\n    }\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.sendPc.getSenders();\n      const sender = senders.find((s) => s.track === track);\n      if (sender) {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Connection) => {\n    const senders = conn.sendPc.getSenders();\n    const mTypes = connMap.getMediaTypes(conn);\n    if (localStream) {\n      localStream.getTracks().forEach((track) => {\n        const mType = trackMediaTypeMap.get(track);\n        if (\n          localStream &&\n          mType &&\n          mTypes.includes(mType) &&\n          senders.every((sender) => sender.track !== track)\n        ) {\n          conn.sendPc.addTrack(track, localStream);\n          startNegotiation(conn);\n        }\n      });\n    }\n    senders.forEach((sender) => {\n      if (sender.track) {\n        const mType = trackMediaTypeMap.get(sender.track);\n        if (!mType || !mTypes.includes(mType)) {\n          conn.sendPc.removeTrack(sender);\n          startNegotiation(conn);\n        }\n      }\n    });\n  };\n\n  const dispose = async () => {\n    disposed = true;\n    if (myIpfs) {\n      closeIpfs(myIpfs);\n    }\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n"],"sourceRoot":""}