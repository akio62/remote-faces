{"version":3,"sources":["hooks/useSpatialArea.ts","components/SpatialArea.tsx"],"names":["useSpatialArea","roomId","userId","useState","avatarMap","setAvatarMap","myAvatar","setMyAvatar","lastMyAvatarRef","useRef","useEffect","current","broadcastData","useBroadcastData","dataToBroadcast","data","spatialArea","avatarData","setTimeout","undefined","useRoomData","useCallback","x","isObject","obj","position","e","isAvatarData","uid","prev","Avatar","React","memo","nickname","faceStream","setPosition","useThree","size","viewport","aspect","width","firstPosition","bind","useDrag","first","initial","ix","iy","xy","y","fx","fy","texture","setTexture","videoTrack","getVideoTracks","canvas","document","createElement","canvasTexture","THREE","imageCapture","ImageCapture","ctx","getContext","timer","setInterval","a","grabFrame","bitmap","height","drawImage","font","textBaseline","fillStyle","fillText","needsUpdate","clearInterval","map","getInitialPosition","parseInt","slice","SpatialCanvas","nicknameMap","faceStreamMap","getPosition","fallback","Object","keys","key","nextPosition","SpatialArea","videoDevices","useVideoDevices","videoDeviceId","setVideoDeviceId","audioDevices","useAudioDevices","audioDeviceId","setAudioDeviceId","useFaceVideos","useNicknameMap","className","value","onChange","target","videoDevice","deviceId","label","audioDevice"],"mappings":"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","file":"static/js/16.3c0be1ca.chunk.js","sourcesContent":["import { useCallback, useState, useRef, useEffect } from \"react\";\n\nimport { isObject } from \"../utils/types\";\nimport { useRoomData, useBroadcastData } from \"./useRoom\";\n\nexport type AvatarData = {\n  position: [number, number, number];\n};\n\nconst isAvatarData = (x: unknown): x is AvatarData => {\n  try {\n    const obj = x as AvatarData;\n    if (\n      typeof obj.position[0] !== \"number\" ||\n      typeof obj.position[1] !== \"number\" ||\n      typeof obj.position[2] !== \"number\"\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport type AvatarMap = {\n  [userId: string]: AvatarData;\n};\n\ntype SpatialAreaData =\n  | {\n      spatialArea: \"init\";\n    }\n  | {\n      spatialArea: \"avatar\";\n      userId: string;\n      avatarData: AvatarData;\n    };\n\nconst isSpatialAreaData = (x: unknown): x is SpatialAreaData =>\n  isObject(x) &&\n  ((x as { spatialArea: unknown }).spatialArea === \"init\" ||\n    ((x as { spatialArea: unknown }).spatialArea === \"avatar\" &&\n      isAvatarData((x as { avatarData: unknown }).avatarData)));\n\nexport const useSpatialArea = (roomId: string, userId: string) => {\n  const [avatarMap, setAvatarMap] = useState<AvatarMap>({});\n  const [myAvatar, setMyAvatar] = useState<AvatarData>();\n  const lastMyAvatarRef = useRef<AvatarData>();\n  useEffect(() => {\n    lastMyAvatarRef.current = myAvatar;\n  }, [myAvatar]);\n\n  const broadcastData = useBroadcastData(roomId, userId);\n  const dataToBroadcast = useRef<SpatialAreaData>();\n  useEffect(() => {\n    if (!myAvatar) return;\n    const data: SpatialAreaData = {\n      spatialArea: \"avatar\",\n      userId,\n      avatarData: myAvatar,\n    };\n    if (dataToBroadcast.current) {\n      dataToBroadcast.current = data;\n    } else {\n      dataToBroadcast.current = data;\n      setTimeout(() => {\n        broadcastData(dataToBroadcast.current);\n        dataToBroadcast.current = undefined;\n      }, 200);\n    }\n  }, [broadcastData, userId, myAvatar]);\n\n  useRoomData(\n    roomId,\n    userId,\n    useCallback(\n      (data) => {\n        if (!isSpatialAreaData(data)) return;\n        if (data.spatialArea === \"init\") {\n          if (lastMyAvatarRef.current) {\n            // TODO we don't need to broadcastData but sendData is enough\n            broadcastData({\n              spatialArea: \"avatar\",\n              avatarData: lastMyAvatarRef.current,\n            });\n          }\n        } else if (data.spatialArea === \"avatar\") {\n          const uid = (data as { userId: string }).userId;\n          const { avatarData } = data as { avatarData: AvatarData };\n          setAvatarMap((prev) => ({\n            ...prev,\n            [uid]: avatarData,\n          }));\n        }\n      },\n      [broadcastData]\n    )\n  );\n\n  useEffect(() => {\n    broadcastData({\n      spatialArea: \"init\",\n    });\n  }, [broadcastData]);\n\n  return {\n    avatarMap,\n    myAvatar,\n    setMyAvatar,\n  };\n};\n","/* eslint react/jsx-props-no-spreading: off */\n\nimport React, { Suspense, useRef, useState, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, useThree } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\n\nimport \"./SpatialArea.css\";\nimport { useSpatialArea, AvatarData, AvatarMap } from \"../hooks/useSpatialArea\";\nimport { useVideoDevices, useAudioDevices } from \"../hooks/useAvailableDevices\";\nimport { useFaceVideos } from \"../hooks/useFaceVideos\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Avatar = React.memo<{\n  nickname: string;\n  faceStream: MediaStream | null;\n  position: [number, number, number];\n  setPosition?: (nextPosition: [number, number, number]) => void;\n}>(({ nickname, faceStream, position, setPosition }) => {\n  const { size, viewport } = useThree();\n  const aspect = size.width / viewport.width;\n  const firstPosition = useRef<[number, number, number]>();\n  const bind = useDrag(({ first, initial: [ix, iy], xy: [x, y] }) => {\n    if (first) {\n      firstPosition.current = position;\n    }\n    const [fx, fy] = firstPosition.current as [number, number, number];\n    if (setPosition) {\n      setPosition([fx + (x - ix) / aspect, fy - (y - iy) / aspect, 0]);\n    }\n  });\n  const [texture, setTexture] = useState<THREE.CanvasTexture>();\n  useEffect(() => {\n    const videoTrack = faceStream?.getVideoTracks()[0];\n    if (!videoTrack) return undefined;\n    const canvas = document.createElement(\"canvas\");\n    const canvasTexture = new THREE.CanvasTexture(canvas);\n    setTexture(canvasTexture);\n    const imageCapture = new ImageCapture(videoTrack);\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    const timer = setInterval(async () => {\n      try {\n        const bitmap = await imageCapture.grabFrame();\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        ctx.drawImage(bitmap, 0, 0);\n        ctx.font = \"18px selif\";\n        ctx.textBaseline = \"top\";\n        ctx.fillStyle = \"blue\";\n        ctx.fillText(nickname, 2, 2);\n        canvasTexture.needsUpdate = true;\n      } catch (e) {\n        // ignore\n      }\n    }, 1000 / 7.5);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [nickname, faceStream]);\n  if (!texture) return null;\n  return (\n    <sprite {...(setPosition && bind())} position={position}>\n      <spriteMaterial map={texture} />\n    </sprite>\n  );\n});\n\nconst getInitialPosition = (uid: string): [number, number, number] => [\n  parseInt(uid.slice(0, 2), 16) / 128 - 1,\n  parseInt(uid.slice(2, 4), 16) / 128 - 1,\n  0,\n];\n\nconst SpatialCanvas = React.memo<{\n  userId: string;\n  nickname: string;\n  faceStream: MediaStream | null;\n  nicknameMap: { [userId: string]: string };\n  faceStreamMap: { [userId: string]: MediaStream };\n  avatarMap: AvatarMap;\n  myAvatar?: AvatarData;\n  setMyAvatar: (avatarData: AvatarData) => void;\n}>(\n  ({\n    userId,\n    nickname,\n    faceStream,\n    nicknameMap,\n    faceStreamMap,\n    avatarMap,\n    myAvatar,\n    setMyAvatar,\n  }) => {\n    const getPosition = (uid: string) =>\n      avatarMap[uid]?.position || getInitialPosition(uid);\n\n    const setMyPosition = (nextPosition: [number, number, number]) => {\n      setMyAvatar({ position: nextPosition });\n    };\n\n    return (\n      <Canvas>\n        <Suspense fallback={null}>\n          <ambientLight />\n          {Object.keys(faceStreamMap).map(\n            (uid) =>\n              uid !== userId && (\n                <Avatar\n                  key={uid}\n                  nickname={nicknameMap[uid] || \"\"}\n                  faceStream={faceStreamMap[uid] || null}\n                  position={getPosition(uid)}\n                />\n              )\n          )}\n          <Avatar\n            nickname={nickname}\n            faceStream={faceStream}\n            position={myAvatar?.position || getInitialPosition(userId)}\n            setPosition={setMyPosition}\n          />\n        </Suspense>\n      </Canvas>\n    );\n  }\n);\n\nexport const SpatialArea = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n}>(({ roomId, userId, nickname }) => {\n  const videoDevices = useVideoDevices();\n  const [videoDeviceId, setVideoDeviceId] = useState<string>(\"\");\n  const audioDevices = useAudioDevices();\n  const [audioDeviceId, setAudioDeviceId] = useState<string>(\"\");\n  const { faceStream, faceStreamMap } = useFaceVideos(\n    roomId,\n    userId,\n    !!videoDeviceId,\n    !!audioDeviceId,\n    !!audioDeviceId,\n    videoDeviceId,\n    audioDeviceId,\n    \"spatialArea\"\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n  const { avatarMap, myAvatar, setMyAvatar } = useSpatialArea(roomId, userId);\n\n  return (\n    <div className=\"SpatialArea-container\">\n      <div>\n        Select Camera:{\" \"}\n        <select\n          value={videoDeviceId}\n          onChange={(e) => setVideoDeviceId(e.target.value)}\n        >\n          <option value=\"\">None</option>\n          {videoDevices.map((videoDevice) => (\n            <option key={videoDevice.deviceId} value={videoDevice.deviceId}>\n              {videoDevice.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        Select Mic:{\" \"}\n        <select\n          value={audioDeviceId}\n          onChange={(e) => {\n            setAudioDeviceId(e.target.value);\n          }}\n        >\n          <option value=\"\">None</option>\n          {audioDevices.map((audioDevice) => (\n            <option key={audioDevice.deviceId} value={audioDevice.deviceId}>\n              {audioDevice.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"SpatialArea-body\">\n        <SpatialCanvas\n          userId={userId}\n          nickname={nickname}\n          faceStream={faceStream}\n          nicknameMap={nicknameMap}\n          faceStreamMap={faceStreamMap}\n          avatarMap={avatarMap}\n          myAvatar={myAvatar}\n          setMyAvatar={setMyAvatar}\n        />\n      </div>\n    </div>\n  );\n});\n\nexport default SpatialArea;\n"],"sourceRoot":""}