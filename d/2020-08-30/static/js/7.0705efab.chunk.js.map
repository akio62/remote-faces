{"version":3,"sources":["utils/sleep.ts","network/trackUtils.ts","network/ipfsUtils.ts","network/pubsubRoom.ts","utils/types.ts"],"names":["sleep","ms","Promise","resolve","setTimeout","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","a","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","peerIndexCounter","DEFAULT_CONFIG","iceServers","urls","username","credential","sdpSemantics","createConnectionMap","map","Map","registerRemoteMediaTypeFromSDP","conn","msid2mediaType","sdpLines","mid","value","get","peer","split","forEach","line","startsWith","slice","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","peerId","userId","Error","peerIndex","sendPc","recvPc","getConn","findConn","Array","from","values","v","delConn","delete","getPeerIndexList","forEachConns","callback","forEachConnsAcceptingMedia","includes","size","getRemoteMediaType","registerRemoteMediaType","sdp","hasObjectProp","hasStringProp","topicsForMediaTypes","getTopicForMediaType","roomId","key","topic","sha256","ROOM_ID_PREFIX_LEN","createRoom","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","myIpfs","myPeerId","connMap","roomTopic","importCryptoKey","cryptoKey","showConnectedStatus","peerIndexList","type","parsePayload","encrypted","decryptStringFromChunks","str","undefined","payload","JSON","parse","console","log","info","sendPayload","encryptStringToChunks","stringify","warn","pubsub","publish","error","sendPayloadDirectly","noop","subscribe","unsubscribe","broadcastData","data","sendData","faceAudioDisposeList","acceptMediaTypes","mTypes","faceAudioHandler","msg","c","worker","audioCtx","AudioContext","destination","createMediaStreamDestination","currTime","pending","Worker","onmessage","e","buffer","Float32Array","currentTime","audioBuffer","createBuffer","copyToChannel","audioBufferSource","createBufferSource","connect","onended","start","audioTrack","stream","getAudioTracks","push","terminate","decryptBufferToChunks","byteOffset","byteLength","bufList","buf","postMessage","dispose","splice","filter","transceivers","getReceivers","mType","readyState","sendSDP","getMsid2MediaType","SDP","handlePayloadSDP","isObject","negotiationId","negotiationIdMap","startNegotiation","running","secureRandomId","negotiate","sendIce","ice","ICE","handlePayloadIce","direction","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","x","syncAllTracks","handlePayloadData","handlePayload","initConnection","payloadUserId","getUserIdFromPayload","pubsubHandler","checkPeers","peers","lastInitIpfsTime","Date","now","prevIpfs","closeIpfs","initIpfs","Ipfs","create","repo","config","Addresses","Swarm","ipfs","id","trackDisposeMap","runDispose","mediaTypeMap","MediaStream","trackSource","createMediaStreamSource","audioWorklet","addModule","audioEncoder","AudioWorkletNode","port","encryptBufferFromChunks","name","removeTrack","item","sender","getSenders","s","senders","some","prop"],"mappings":"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","file":"static/js/7.0705efab.chunk.js","sourcesContent":["export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { sleep } from \"../utils/sleep\";\n\nconst setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = async () => {\n    await sleep(5000);\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    }\n  };\n  track.addEventListener(\"mute\", onmute);\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n","import { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nlet peerIndexCounter = 0;\n\nconst getNextPeerIndex = () => {\n  peerIndexCounter += 1;\n  return peerIndexCounter;\n};\n\nexport type Connection = {\n  peerIndex: number;\n  peer: string; // ipfsId\n  userId: string;\n  sendPc: RTCPeerConnection;\n  recvPc: RTCPeerConnection;\n};\n\nconst DEFAULT_CONFIG = {\n  iceServers: [\n    { urls: \"stun:stun.l.google.com:19302\" },\n    {\n      urls: \"turn:0.peerjs.com:3478\",\n      username: \"peerjs\",\n      credential: \"peerjsp\",\n    },\n  ],\n  sdpSemantics: \"unified-plan\",\n};\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Connection;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (conn: Connection, mediaTypes: string[]) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (peerId: string, userId: string) => {\n    const value = map.get(peerId);\n    if (value) {\n      throw new Error(\"addConn: already exists\");\n    }\n    const conn: Connection = {\n      peerIndex: getNextPeerIndex(),\n      peer: peerId,\n      userId,\n      sendPc: new RTCPeerConnection(DEFAULT_CONFIG),\n      recvPc: new RTCPeerConnection(DEFAULT_CONFIG),\n    };\n    map.set(conn.peer, {\n      conn,\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n    return conn;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const findConn = (peerIndex: number) => {\n    const value = Array.from(map.values()).find(\n      (v) => v.conn.peerIndex === peerIndex\n    );\n    if (value) return value.conn;\n    return null;\n  };\n\n  const delConn = (conn: Connection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n      conn.sendPc.close();\n      conn.recvPc.close();\n    } else {\n      throw new Error(\"delConn: does not exist\");\n    }\n  };\n\n  const getPeerIndexList = () =>\n    Array.from(map.values()).map((v) => v.conn.peerIndex);\n\n  const forEachConns = (callback: (conn: Connection) => void) => {\n    Array.from(map.values()).forEach((value) => {\n      callback(value.conn);\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Connection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const size = () => map.size;\n\n  const getRemoteMediaType = (conn: Connection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Connection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Connection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    getConn,\n    findConn,\n    delConn,\n    getPeerIndexList,\n    forEachConns,\n    forEachConnsAcceptingMedia,\n    size,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Ipfs, { IpfsType, PubsubHandler } from \"ipfs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  sha256,\n  secureRandomId,\n  importCryptoKey,\n  encryptStringToChunks,\n  decryptStringFromChunks,\n  encryptBufferFromChunks,\n  decryptBufferToChunks,\n} from \"../utils/crypto\";\nimport { isObject, hasStringProp, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport { Connection, createConnectionMap } from \"./ipfsUtils\";\nimport { setupTrackStopOnLongMute, loopbackPeerConnection } from \"./trackUtils\";\n\nconst topicsForMediaTypes = new Map<string, string>();\n\nconst getTopicForMediaType = async (roomId: string, mediaType: string) => {\n  const key = `${roomId} ${mediaType}`;\n  let topic = topicsForMediaTypes.get(key);\n  if (!topic) {\n    topic = (await sha256(key)).slice(0, ROOM_ID_PREFIX_LEN);\n    topicsForMediaTypes.set(key, topic);\n  }\n  return topic;\n};\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  let myIpfs: IpfsType | null = null;\n  let myPeerId: string | null = null;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n\n  const roomTopic = roomId.slice(0, ROOM_ID_PREFIX_LEN);\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap.getPeerIndexList();\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n  };\n\n  const parsePayload = async (encrypted: ArrayBuffer): Promise<unknown> => {\n    try {\n      const str = await decryptStringFromChunks(encrypted, cryptoKey);\n      if (str === null) return undefined;\n      const payload = JSON.parse(str);\n      console.log(\"decrypted payload\", payload);\n      return payload;\n    } catch (e) {\n      console.info(\"Error in parsePayload\", e, encrypted);\n      return undefined;\n    }\n  };\n\n  const sendPayload = async (topic: string, payload: unknown) => {\n    try {\n      console.log(\"payload to encrypt\", topic, payload);\n      for await (const encrypted of encryptStringToChunks(\n        JSON.stringify(payload),\n        cryptoKey\n      )) {\n        if (!myIpfs) {\n          console.warn(\"no myIpfs initialized\");\n          return;\n        }\n        await myIpfs.pubsub.publish(topic, encrypted);\n      }\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const sendPayloadDirectly = async (conn: Connection, payload: unknown) => {\n    const topic = `${roomTopic} ${conn.peer}`;\n    // HACK somehow, publish doesn't work without this\n    if (myIpfs) {\n      const noop = () => null;\n      await myIpfs.pubsub.subscribe(topic, noop);\n      await myIpfs.pubsub.unsubscribe(topic, noop);\n    }\n    await sendPayload(topic, payload);\n  };\n\n  const broadcastData = async (data: unknown) => {\n    if (disposed) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayload(roomTopic, payload);\n  };\n\n  const sendData = async (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.findConn(peerIndex);\n    if (!conn) return;\n    const payload = { userId, data, mediaTypes };\n    await sendPayloadDirectly(conn, payload);\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).sendData = sendData;\n  }\n\n  // TODO very limited use case for now\n  const faceAudioDisposeList: (() => void)[] = [];\n\n  const acceptMediaTypes = async (mTypes: string[]) => {\n    if (mTypes.includes(\"faceAudio\") && !faceAudioDisposeList.length) {\n      // XXX experimental\n      if (myIpfs) {\n        const topic = await getTopicForMediaType(roomId, \"faceAudio\");\n        const faceAudioHandler: PubsubHandler = async (msg) => {\n          if (msg.from === myPeerId) return;\n          const conn = connMap.getConn(msg.from);\n          if (!conn) {\n            console.warn(\"conn not ready\");\n            return;\n          }\n          const info: PeerInfo = {\n            userId: conn.userId,\n            peerIndex: conn.peerIndex,\n            mediaTypes: connMap.getAcceptingMediaTypes(conn),\n          };\n          const c: {\n            worker: Worker;\n          } = conn as any; // TODO do it more cleanly\n          if (!c.worker) {\n            const audioCtx = new AudioContext();\n            const destination = audioCtx.createMediaStreamDestination();\n            let currTime = 0;\n            let pending = 0;\n            const worker = new Worker(\"audio-decoder.js\", { type: \"module\" });\n            worker.onmessage = (e) => {\n              const buffer = new Float32Array(e.data);\n              if (!pending) {\n                currTime = audioCtx.currentTime;\n              }\n              currTime += 0.06; // 60ms\n              pending += 1;\n              const audioBuffer = audioCtx.createBuffer(1, 2880, 48000);\n              audioBuffer.copyToChannel(buffer, 0);\n              const audioBufferSource = audioCtx.createBufferSource();\n              audioBufferSource.buffer = audioBuffer;\n              audioBufferSource.connect(destination);\n              audioBufferSource.onended = () => {\n                pending -= 1;\n              };\n              audioBufferSource.start(currTime);\n            };\n            c.worker = worker;\n            const audioTrack = destination.stream.getAudioTracks()[0];\n            receiveTrack(\n              \"faceAudio\",\n              await loopbackPeerConnection(audioTrack),\n              info\n            );\n            faceAudioDisposeList.push(() => {\n              audioCtx.close();\n              audioTrack.dispatchEvent(new Event(\"ended\"));\n              worker.terminate();\n              if (c.worker === worker) {\n                delete c.worker;\n              }\n            });\n          }\n          const bufList = await decryptBufferToChunks(\n            msg.data.buffer,\n            msg.data.byteOffset,\n            msg.data.byteLength,\n            cryptoKey\n          );\n          if (c.worker) {\n            bufList.forEach((buf) => {\n              c.worker.postMessage([buf], [buf]);\n            });\n          }\n        };\n        myIpfs.pubsub.subscribe(topic, faceAudioHandler);\n        faceAudioDisposeList.push(() => {\n          if (myIpfs) {\n            myIpfs.pubsub.unsubscribe(topic, faceAudioHandler);\n          }\n        });\n      }\n    } else {\n      faceAudioDisposeList.forEach((dispose) => dispose());\n      faceAudioDisposeList.splice(0, faceAudioDisposeList.length);\n    }\n    // eslint-disable-next-line no-param-reassign\n    mTypes = mTypes.filter((t) => t !== \"faceAudio\");\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConns((conn) => {\n        const info: PeerInfo = {\n          userId: conn.userId,\n          peerIndex: conn.peerIndex,\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        const transceivers = conn.recvPc.getTransceivers();\n        conn.recvPc.getReceivers().forEach((receiver) => {\n          const transceiver = transceivers.find((t) => t.receiver === receiver);\n          const mid = transceiver?.mid;\n          const mType = mid && connMap.getRemoteMediaType(conn, mid);\n          if (!mType) {\n            console.warn(\"failed to find media type from mid\");\n            return;\n          }\n          if (\n            receiver.track.readyState === \"live\" &&\n            !mediaTypes.includes(mType) &&\n            mTypes.includes(mType)\n          ) {\n            receiveTrack(\n              mType,\n              setupTrackStopOnLongMute(receiver.track, conn.recvPc),\n              info\n            );\n          }\n        });\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const sendSDP = async (\n    conn: Connection,\n    sdp:\n      | {\n          negotiationId: string;\n          offer: RTCSessionDescriptionInit;\n        }\n      | {\n          negotiationId: string;\n          answer: RTCSessionDescriptionInit;\n        }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    await sendPayloadDirectly(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Connection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    if (!hasStringProp(sdp, \"negotiationId\")) {\n      console.warn(\"negotiationId not found in SDP\");\n      return;\n    }\n    const { negotiationId } = sdp;\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.recvPc.setRemoteDescription(sdp.offer);\n        const answer = await conn.recvPc.createAnswer();\n        await conn.recvPc.setLocalDescription(answer);\n        sendSDP(conn, { negotiationId, answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      if (negotiationIdMap.get(conn) === negotiationId) {\n        negotiationIdMap.delete(conn);\n      }\n      try {\n        await conn.sendPc.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const negotiationIdMap = new WeakMap<Connection, string>();\n  const startNegotiation = (conn: Connection) => {\n    const running = negotiationIdMap.has(conn);\n    negotiationIdMap.set(conn, secureRandomId());\n    if (running) return;\n    const negotiate = async () => {\n      const negotiationId = negotiationIdMap.get(conn);\n      if (!negotiationId) return;\n      const offer = await conn.sendPc.createOffer();\n      await conn.sendPc.setLocalDescription(offer);\n      await sendSDP(conn, { negotiationId, offer });\n      await sleep(5000);\n      negotiate();\n    };\n    negotiate();\n  };\n\n  const sendIce = (\n    conn: Connection,\n    ice: {\n      direction: \"send\" | \"recv\";\n      candidate: RTCIceCandidate;\n    }\n  ) => {\n    sendPayloadDirectly(conn, { ICE: ice });\n  };\n\n  const handlePayloadIce = (conn: Connection, ice: unknown) => {\n    if (!isObject(ice)) return;\n    if (!hasStringProp(ice, \"direction\")) {\n      console.warn(\"direction not found in ICE\");\n      return;\n    }\n    if (!hasObjectProp(ice, \"candidate\")) {\n      console.warn(\"candidate not found in ICE\");\n      return;\n    }\n    try {\n      if (ice.direction === \"send\") {\n        conn.recvPc.addIceCandidate(ice.candidate);\n      } else if (ice.direction === \"recv\") {\n        conn.sendPc.addIceCandidate(ice.candidate);\n      }\n    } catch (e) {\n      console.info(\"handleCandidate failed\", e);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Connection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadData = (conn: Connection, data: unknown) => {\n    const info: PeerInfo = {\n      userId: conn.userId,\n      peerIndex: conn.peerIndex,\n      mediaTypes: connMap.getAcceptingMediaTypes(conn),\n    };\n    try {\n      receiveData(data, info);\n    } catch (e) {\n      console.warn(\"receiveData\", e);\n    }\n  };\n\n  const handlePayload = async (conn: Connection, payload: unknown) => {\n    if (disposed) return;\n    try {\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadIce(conn, (payload as { ICE?: unknown }).ICE);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, payload);\n    }\n  };\n\n  const initConnection = (peerId: string, payloadUserId: string) => {\n    const conn = connMap.addConn(peerId, payloadUserId);\n    conn.sendPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"send\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        sendIce(conn, { direction: \"recv\", candidate });\n      }\n    });\n    conn.recvPc.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      const info: PeerInfo = {\n        userId: conn.userId,\n        peerIndex: conn.peerIndex,\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      receiveTrack(\n        \"TODO\",\n        setupTrackStopOnLongMute(event.track, conn.recvPc),\n        info\n      );\n    });\n    notifyNewPeer(conn.peerIndex);\n    updateNetworkStatus({\n      type: \"NEW_CONNECTION\",\n      peerIndex: conn.peerIndex,\n    });\n    return conn;\n  };\n\n  const getUserIdFromPayload = (payload: unknown) => {\n    if (!isObject(payload)) return null;\n    const payloadUserId = (payload as { userId: unknown }).userId;\n    if (typeof payloadUserId !== \"string\") return null;\n    return payloadUserId;\n  };\n\n  const pubsubHandler: PubsubHandler = async (msg) => {\n    if (msg.from === myPeerId) return;\n    const payload = await parsePayload(msg.data);\n    if (payload === undefined) return;\n    const payloadUserId = getUserIdFromPayload(payload);\n    let conn = connMap.getConn(msg.from);\n    if (!conn) {\n      if (payloadUserId) {\n        conn = initConnection(msg.from, payloadUserId);\n      } else {\n        console.warn(\"cannot initialize conn without user id\");\n      }\n    }\n    if (conn) {\n      await handlePayload(conn, payload);\n    }\n    showConnectedStatus();\n  };\n\n  const checkPeers = async () => {\n    if (disposed) return;\n    const peers = myIpfs ? myIpfs.pubsub.peers(roomTopic) : [];\n    connMap.forEachConns((conn) => {\n      if (!peers.includes(conn.peer)) {\n        connMap.delConn(conn);\n        updateNetworkStatus({\n          type: \"CONNECTION_CLOSED\",\n          peerIndex: conn.peerIndex,\n        });\n      }\n    });\n    if (\n      myIpfs &&\n      connMap.size() === 0 &&\n      lastInitIpfsTime + 3 * 60 * 1000 < Date.now()\n    ) {\n      const prevIpfs = myIpfs;\n      myIpfs = null;\n      myPeerId = null;\n      await closeIpfs(prevIpfs);\n      await sleep(20 * 1000);\n      await initIpfs();\n      return;\n    }\n    if (!peers.length) {\n      updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n      await sleep(1000);\n      checkPeers();\n      return;\n    }\n    if (!connMap.size()) {\n      await broadcastData(null);\n    }\n    await sleep(5000);\n    checkPeers();\n  };\n\n  let lastInitIpfsTime = 0;\n  const initIpfs = async () => {\n    lastInitIpfsTime = Date.now();\n    updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex: 0 });\n    const ipfs: IpfsType = await Ipfs.create({\n      repo: secureRandomId(),\n      config: {\n        Addresses: {\n          Swarm: [\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          ],\n        },\n      },\n    });\n    myPeerId = (await ipfs.id()).id;\n    await ipfs.pubsub.subscribe(roomTopic, pubsubHandler);\n    await ipfs.pubsub.subscribe(`${roomTopic} ${myPeerId}`, pubsubHandler);\n    myIpfs = ipfs;\n    if (process.env.NODE_ENV !== \"production\") {\n      (window as any).myIpfs = myIpfs;\n    }\n    checkPeers();\n  };\n  initIpfs();\n\n  const closeIpfs = async (ipfs: IpfsType) => {\n    await ipfs.pubsub.unsubscribe(`${roomTopic} ${myPeerId}`, pubsubHandler);\n    await ipfs.pubsub.unsubscribe(roomTopic, pubsubHandler);\n    await ipfs.stop();\n  };\n\n  const trackDisposeMap = new WeakMap<MediaStreamTrack, () => void>();\n  const runDispose = (dispose?: () => void) => {\n    if (dispose) {\n      dispose();\n    }\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = async (mediaType: string, track: MediaStreamTrack) => {\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    if (mediaType === \"faceAudio\") {\n      // XXX experimental\n      runDispose(trackDisposeMap.get(track));\n      const audioCtx = new AudioContext();\n      const trackSource = audioCtx.createMediaStreamSource(stream);\n      await audioCtx.audioWorklet.addModule(\"audio-encoder.js\");\n      const audioEncoder = new AudioWorkletNode(audioCtx, \"audio-encoder\");\n      const topic = await getTopicForMediaType(roomId, \"faceAudio\");\n      const bufList: ArrayBuffer[] = [];\n      audioEncoder.port.onmessage = async (event) => {\n        bufList.push(event.data);\n        if (bufList.length < 40) return;\n        const encrypted = await encryptBufferFromChunks(bufList, cryptoKey);\n        bufList.splice(0, bufList.length);\n        if (myIpfs) {\n          myIpfs.pubsub.publish(topic, encrypted);\n        }\n      };\n      trackSource.connect(audioEncoder);\n      trackDisposeMap.set(track, () => {\n        audioCtx.close();\n      });\n      return;\n    }\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    if (mediaType === \"faceAudio\") {\n      // XXX experimental\n      runDispose(trackDisposeMap.get(track));\n      return;\n    }\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.sendPc.getSenders();\n      const sender = senders.find((s) => s.track === track);\n      if (sender) {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Connection) => {\n    const senders = conn.sendPc.getSenders();\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.sendPc.addTrack(track, stream);\n        startNegotiation(conn);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective) {\n        conn.sendPc.removeTrack(sender);\n        startNegotiation(conn);\n      }\n    });\n  };\n\n  const dispose = async () => {\n    disposed = true;\n    if (myIpfs) {\n      closeIpfs(myIpfs);\n    }\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<F extends (...args: any) => any> = ReturnType<\n  F\n> extends Promise<infer T>\n  ? T\n  : never;\n"],"sourceRoot":""}