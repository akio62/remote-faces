{"version":3,"sources":["components/VideoShare.tsx","hooks/useVideoShare.ts"],"names":["Video","React","memo","nickname","stream","videoRef","useRef","useEffect","current","srcObject","className","ref","autoPlay","muted","VideoShare","roomId","userId","videoDevices","useVideoDevices","useState","videoDeviceId","setVideoDeviceId","enabled","setEnabled","videoStream","setVideoStream","videoStreamMap","setVideoStreamMap","cleanupFns","forEach","fn","onTrack","useCallback","track","info","a","prev","MediaStream","onended","addEventListener","push","removeEventListener","addTrack","useRoomMedia","dispose","getVideoStream","result","getVideoTracks","removeTrack","useVideoShare","nicknameMap","useNicknameMap","numOfVideos","Object","values","filter","x","length","value","onChange","e","target","map","videoDevice","key","deviceId","label","type","onClick","style","gridTemplateColumns","Math","ceil","sqrt","keys","screenUserId"],"mappings":"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","file":"static/js/17.f15e5878.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nimport \"./VideoShare.css\";\nimport { useVideoShare } from \"../hooks/useVideoShare\";\nimport { useVideoDevices } from \"../hooks/useAvailableDevices\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Video = React.memo<{\n  nickname: string;\n  stream: MediaStream;\n}>(({ nickname, stream }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (stream && videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return (\n    <div>\n      <div className=\"VideoShare-nickname\">{nickname}</div>\n      <video className=\"VideoShare-video\" ref={videoRef} autoPlay muted />\n    </div>\n  );\n});\n\nexport const VideoShare = React.memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n}>(({ roomId, userId, nickname }) => {\n  const videoDevices = useVideoDevices();\n  const [videoDeviceId, setVideoDeviceId] = useState<string>();\n  const [enabled, setEnabled] = useState(false);\n  const { videoStream, videoStreamMap } = useVideoShare(\n    roomId,\n    userId,\n    enabled,\n    setEnabled,\n    videoDeviceId\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n  const numOfVideos =\n    (videoStream ? 1 : 0) +\n    Object.values(videoStreamMap).filter((x) => x).length;\n\n  return (\n    <div className=\"VideoShare-container\">\n      <div>\n        Select Camera:{\" \"}\n        <select\n          value={videoDeviceId}\n          onChange={(e) => setVideoDeviceId(e.target.value)}\n        >\n          {videoDevices.map((videoDevice) => (\n            <option key={videoDevice.deviceId} value={videoDevice.deviceId}>\n              {videoDevice.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <button type=\"button\" onClick={() => setEnabled(!enabled)}>\n        {enabled ? \"Stop video share\" : \"Start video share\"}\n      </button>\n      <div\n        className=\"VideoShare-body\"\n        style={{\n          gridTemplateColumns: `repeat(${Math.ceil(\n            Math.sqrt(numOfVideos)\n          )}, 1fr)`,\n        }}\n      >\n        {videoStream && <Video nickname={nickname} stream={videoStream} />}\n        {Object.keys(videoStreamMap).map((screenUserId) => {\n          const stream = videoStreamMap[screenUserId];\n          if (!stream) return null;\n          return (\n            <Video\n              key={screenUserId}\n              nickname={nicknameMap[screenUserId] || \"No Name\"}\n              stream={stream}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default VideoShare;\n","import { useCallback, useEffect, useState, useRef } from \"react\";\n\nimport { getVideoStream } from \"../media/video\";\nimport { useRoomMedia } from \"./useRoom\";\n\nexport const useVideoShare = (\n  roomId: string,\n  userId: string,\n  enabled: boolean,\n  setEnabled: (enabled: boolean) => void,\n  videoDeviceId?: string\n) => {\n  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);\n  const [videoStreamMap, setVideoStreamMap] = useState<{\n    [userId: string]: MediaStream | null;\n  }>({});\n\n  type CleanupFn = () => void;\n  const cleanupFns = useRef<CleanupFn[]>([]);\n  useEffect(() => {\n    const cleanup = () => {\n      cleanupFns.current.forEach((fn) => fn());\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = useCallback(async (track, info) => {\n    setVideoStreamMap((prev) => ({\n      ...prev,\n      [info.userId]: new MediaStream([track]),\n    }));\n    const onended = () => {\n      setVideoStreamMap((prev) => ({\n        ...prev,\n        [info.userId]: null,\n      }));\n    };\n    track.addEventListener(\"ended\", onended);\n    cleanupFns.current.push(() => {\n      track.removeEventListener(\"ended\", onended);\n    });\n  }, []);\n\n  const addTrack = useRoomMedia(roomId, userId, onTrack, \"cameraVideo\");\n\n  useEffect(() => {\n    let dispose: (() => void) | null = null;\n    if (enabled && addTrack) {\n      (async () => {\n        const result = await getVideoStream(videoDeviceId);\n        const [track] = result.stream.getVideoTracks();\n        const removeTrack = addTrack(track);\n        setVideoStream(result.stream);\n        dispose = () => {\n          removeTrack();\n          result.dispose();\n          setVideoStream(null);\n          setEnabled(false);\n        };\n        track.addEventListener(\"ended\", () => {\n          if (dispose) dispose();\n          dispose = null;\n        });\n      })();\n    }\n    return () => {\n      if (dispose) dispose();\n    };\n  }, [roomId, videoDeviceId, enabled, setEnabled, addTrack]);\n\n  return { videoStream, videoStreamMap };\n};\n"],"sourceRoot":""}