{"version":3,"sources":["utils/sleep.ts","network/trackUtils.ts","../../node_modules/peerjs/dist sync","network/peerjsUtils.ts","network/peerjsRoom.ts","utils/types.ts"],"names":["sleep","ms","Promise","resolve","setTimeout","setupMap","WeakMap","setupTrackStopOnLongMute","track","pc","has","set","onmute","a","transceiver","getTransceivers","find","t","receiver","currentDirection","stop","dispatchEvent","Event","addEventListener","loopbackPeerConnection","reject","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","event","close","addTrack","createOffer","offer","setLocalDescription","setRemoteDescription","createAnswer","answer","videoTrackToImageConverter","kind","Error","imageCapture","ImageCapture","canvas","document","createElement","ctx","getContext","getImage","grabFrame","bitmap","width","height","drawImage","toDataURL","console","log","createImage","src","img","Image","onload","onerror","imageToVideoTrackConverter","captureStream","getVideoTracks","videoTrack","setImage","dataURL","webpackEmptyContext","req","e","code","keys","module","exports","id","isValidPeerId","roomId","peerId","startsWith","slice","ROOM_ID_PREFIX_LEN","generatePeerId","peerIndex","getPeerIndexFromPeerId","Number","split","getPeerIndexFromConn","conn","peer","createConnectionMap","map","Map","registerRemoteMediaTypeFromSDP","msid2mediaType","sdpLines","mid","value","get","forEach","line","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","markConnected","connected","isConnected","setUserId","userId","getUserId","hasConn","getConn","delConn","delete","getConnectedPeerIds","Array","from","filter","k","forEachConnectedConns","callback","values","forEachConnsAcceptingMedia","includes","clearAll","size","clear","getRemoteMediaType","registerRemoteMediaType","sdp","hasObjectProp","hasStringProp","guessSeed","createRoom","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","connMap","importCryptoKey","cryptoKey","initMyPeer","index","rand4","type","Peer","getPeerJsConfigFromUrl","on","i","seedId","connectPeer","err","destroy","then","error","initConnection","destroyed","reconnect","myPeer","showConnectedStatus","peerIndexList","disconnected","connect","broadcastData","data","peers","sendPayload","sendData","sendSDP","getMsid2MediaType","SDP","handlePayloadSDP","isObject","peerConnection","syncAllTracks","info","Math","random","removeAllTracks","warn","handlePayloadUserId","payloadUserId","handlePayloadMediaTypes","payloadMediaTypes","isArray","every","x","handlePayloadPeers","handlePayloadData","connUserId","handlePayload","encrypted","JSON","decryptString","payload","parse","encryptString","stringify","send","buf","iceGatheringState","onicecandidate","negotiationScheduled","mType","reInitMyPeer","waitSec","floor","force","existsAllSeeds","acceptMediaTypes","mTypes","transceivers","getReceivers","readyState","mediaTypeMap","stream","MediaStream","name","removeTrack","item","sender","getSenders","s","senders","some","transport","dispose","prop"],"mappings":"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","file":"static/js/9.61965597.chunk.js","sourcesContent":["export const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { sleep } from \"../utils/sleep\";\n\nconst setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = async () => {\n    await sleep(5000);\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    }\n  };\n  track.addEventListener(\"mute\", onmute);\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n\nexport const videoTrackToImageConverter = async (track: MediaStreamTrack) => {\n  if (track.kind !== \"video\") {\n    throw new Error(\"track kind is not video\");\n  }\n  const imageCapture = new ImageCapture(track);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const getImage = async () => {\n    try {\n      const bitmap = await imageCapture.grabFrame();\n      canvas.width = bitmap.width;\n      canvas.height = bitmap.height;\n      ctx.drawImage(bitmap, 0, 0);\n      return canvas.toDataURL(\"image/jpeg\");\n    } catch (e) {\n      console.log(\"failed to grab frame from viedeo track\", e);\n      return null;\n    }\n  };\n  return { getImage };\n};\n\nconst createImage = (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = src;\n  });\n\nexport const imageToVideoTrackConverter = () => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const canvasStream = (canvas as any).captureStream() as MediaStream;\n  const [videoTrack] = canvasStream.getVideoTracks();\n  const setImage = async (dataURL: string) => {\n    const img = await createImage(dataURL);\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n  };\n  return { videoTrack, setImage };\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 487;","import Peer from \"peerjs\";\n\nimport { ROOM_ID_PREFIX_LEN } from \"./common\";\nimport { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nexport const isValidPeerId = (\n  roomId: string,\n  peerId: unknown\n): peerId is string =>\n  typeof peerId === \"string\" &&\n  peerId.startsWith(`${roomId.slice(0, ROOM_ID_PREFIX_LEN)} `);\n\nexport const generatePeerId = (roomId: string, peerIndex: number) =>\n  `${roomId.slice(0, ROOM_ID_PREFIX_LEN)} ${peerIndex}`;\n\nexport const getPeerIndexFromPeerId = (peerId: string) =>\n  Number(peerId.split(\" \")[1]);\n\nexport const getPeerIndexFromConn = (conn: Peer.DataConnection) =>\n  getPeerIndexFromPeerId(conn.peer);\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Peer.DataConnection;\n    connected?: boolean;\n    userId?: string;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (\n    conn: Peer.DataConnection,\n    mediaTypes: string[]\n  ) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.conn.close();\n    }\n    map.set(conn.peer, {\n      conn,\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n  };\n\n  const markConnected = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.connected = true;\n    }\n  };\n\n  const isConnected = (peerId: string) => {\n    const value = map.get(peerId);\n    return (value && value.connected) || false;\n  };\n\n  const setUserId = (conn: Peer.DataConnection, userId: string) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.userId = userId;\n    }\n  };\n\n  const getUserId = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return value && value.userId;\n  };\n\n  const hasConn = (peerId: string) => map.has(peerId);\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const delConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n    }\n  };\n\n  const getConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => map.get(k)?.connected);\n\n  const forEachConnectedConns = (\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected && value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const clearAll = () => {\n    if (map.size) {\n      console.log(\"connectionMap garbage:\", map);\n    }\n    map.clear();\n  };\n\n  const getRemoteMediaType = (conn: Peer.DataConnection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Peer.DataConnection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Peer.DataConnection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    markConnected,\n    isConnected,\n    setUserId,\n    getUserId,\n    hasConn,\n    getConn,\n    delConn,\n    getConnectedPeerIds,\n    forEachConnectedConns,\n    forEachConnsAcceptingMedia,\n    clearAll,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Peer from \"peerjs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport {\n  rand4,\n  importCryptoKey,\n  encryptString,\n  decryptString,\n} from \"../utils/crypto\";\nimport { getPeerJsConfigFromUrl } from \"../utils/url\";\nimport { isObject, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport {\n  isValidPeerId,\n  generatePeerId,\n  getPeerIndexFromPeerId,\n  getPeerIndexFromConn,\n  createConnectionMap,\n} from \"./peerjsUtils\";\nimport { setupTrackStopOnLongMute } from \"./trackUtils\";\n\nconst MIN_SEED_PEER_INDEX = 10; // config\nconst MAX_SEED_PEER_INDEX = 14; // config\nconst guessSeed = (id: string) => {\n  const peerIndex = getPeerIndexFromPeerId(id);\n  return MIN_SEED_PEER_INDEX <= peerIndex && peerIndex <= MAX_SEED_PEER_INDEX;\n};\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  const connMap = createConnectionMap();\n  if (process.env.NODE_ENV !== \"production\") {\n    (window as any).myConnMap = connMap;\n  }\n  let mediaTypes: string[] = [];\n\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  const initMyPeer = (index = MIN_SEED_PEER_INDEX): Promise<Peer> =>\n    new Promise((resolve, reject) => {\n      if (disposed) {\n        reject(new Error(\"already disposed\"));\n        return;\n      }\n      connMap.clearAll();\n      const isSeed =\n        MIN_SEED_PEER_INDEX <= index && index <= MAX_SEED_PEER_INDEX;\n      const peerIndex = isSeed ? index : rand4();\n      updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex });\n      const id = generatePeerId(roomId, peerIndex);\n      console.log(\"initMyPeer start\", index, id);\n      const peer = new Peer(id, getPeerJsConfigFromUrl());\n      peer.on(\"open\", () => {\n        resolve(peer);\n        if (process.env.NODE_ENV !== \"production\") {\n          (window as any).myPeer = peer;\n        }\n        updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n        setTimeout(() => {\n          for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n            const seedId = generatePeerId(roomId, i);\n            connectPeer(seedId);\n          }\n        }, 10);\n      });\n      peer.on(\"error\", (err) => {\n        if (err.type === \"unavailable-id\") {\n          peer.destroy();\n          initMyPeer(index + 1).then(resolve, reject);\n        } else if (err.type === \"peer-unavailable\") {\n          // ignore\n        } else if (err.type === \"disconnected\") {\n          console.log(\"initMyPeer disconnected error\", index, err);\n        } else if (err.type === \"network\") {\n          console.log(\"initMyPeer network error\", index, err);\n        } else if (err.type === \"server-error\") {\n          console.log(\"initMyPeer server error\", index, err);\n          updateNetworkStatus({ type: \"SERVER_ERROR\" });\n        } else {\n          console.error(\"initMyPeer unknown error\", index, err.type, err);\n          updateNetworkStatus({ type: \"UNKNOWN_ERROR\", err });\n        }\n      });\n      peer.on(\"connection\", (conn) => {\n        console.log(\"new connection received\", conn);\n        updateNetworkStatus({\n          type: \"NEW_CONNECTION\",\n          peerIndex: getPeerIndexFromConn(conn),\n        });\n        initConnection(conn);\n      });\n      peer.on(\"disconnected\", () => {\n        console.log(\"initMyPeer disconnected\", index);\n        setTimeout(() => {\n          if (!peer.destroyed) {\n            console.log(\"initMyPeer reconnecting\", index);\n            updateNetworkStatus({ type: \"RECONNECTING\" });\n            peer.reconnect();\n          }\n        }, 5 * 1000);\n      });\n      peer.on(\"close\", () => {\n        if (!peer.destroyed) {\n          console.log(\"initMyPeer closed, re-initializing\", index);\n          setTimeout(async () => {\n            myPeer = await initMyPeer();\n          }, 20 * 1000);\n        }\n      });\n    });\n  let myPeer = await initMyPeer();\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap\n      .getConnectedPeerIds()\n      .map(getPeerIndexFromPeerId);\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n  };\n\n  const connectPeer = (id: string) => {\n    if (disposed) return;\n    if (myPeer.id === id || myPeer.disconnected) return;\n    if (connMap.hasConn(id)) return;\n    console.log(\"connectPeer\", id);\n    const conn = myPeer.connect(id);\n    initConnection(conn);\n  };\n\n  const broadcastData = (data: unknown) => {\n    if (disposed) return;\n    const peers = connMap.getConnectedPeerIds();\n    connMap.forEachConnectedConns((conn) => {\n      sendPayload(conn, { userId, data, peers, mediaTypes });\n    });\n  };\n\n  const sendData = (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.getConn(generatePeerId(roomId, peerIndex));\n    if (!conn) return;\n    const peers = connMap.getConnectedPeerIds();\n    sendPayload(conn, { userId, data, peers, mediaTypes });\n  };\n\n  const sendSDP = (\n    conn: Peer.DataConnection,\n    sdp: { offer: unknown } | { answer: unknown }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    sendPayload(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Peer.DataConnection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    connMap.registerRemoteMediaType(conn, sdp);\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(sdp.offer);\n        syncAllTracks(conn);\n        const answer = await conn.peerConnection.createAnswer();\n        await conn.peerConnection.setLocalDescription(answer);\n        sendSDP(conn, { answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(sdp.answer);\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n        await sleep(Math.random() * 30 * 1000);\n        removeAllTracks(conn);\n        syncAllTracks(conn);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const handlePayloadUserId = (\n    conn: Peer.DataConnection,\n    payloadUserId: unknown\n  ) => {\n    if (typeof payloadUserId === \"string\") {\n      connMap.setUserId(conn, payloadUserId);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Peer.DataConnection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadPeers = (peers: unknown) => {\n    if (Array.isArray(peers)) {\n      peers.forEach((peer) => {\n        if (isValidPeerId(roomId, peer)) {\n          connectPeer(peer);\n        }\n      });\n    }\n  };\n\n  const handlePayloadData = (conn: Peer.DataConnection, data: unknown) => {\n    const connUserId = connMap.getUserId(conn);\n    if (connUserId) {\n      const info: PeerInfo = {\n        userId: connUserId,\n        peerIndex: getPeerIndexFromConn(conn),\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      try {\n        receiveData(data, info);\n      } catch (e) {\n        console.warn(\"receiveData\", e);\n      }\n    }\n  };\n\n  const handlePayload = async (\n    conn: Peer.DataConnection,\n    encrypted: ArrayBuffer\n  ) => {\n    if (disposed) return;\n    try {\n      const payload = JSON.parse(await decryptString(encrypted, cryptoKey));\n      console.log(\"decrypted payload\", conn.peer, payload);\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadUserId(conn, (payload as { userId?: unknown }).userId);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadPeers((payload as { peers?: unknown }).peers);\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, encrypted);\n    }\n  };\n\n  const sendPayload = async (conn: Peer.DataConnection, payload: unknown) => {\n    try {\n      const encrypted = await encryptString(JSON.stringify(payload), cryptoKey);\n      conn.send(encrypted);\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const initConnection = (conn: Peer.DataConnection) => {\n    if (connMap.isConnected(conn.peer)) {\n      conn.close();\n      return;\n    }\n    connMap.addConn(conn);\n    setTimeout(() => {\n      if (!connMap.isConnected(conn.peer)) {\n        conn.close();\n      }\n    }, 30 * 1000);\n    conn.on(\"open\", () => {\n      connMap.markConnected(conn);\n      console.log(\"dataConnection open\", conn);\n      showConnectedStatus();\n      const peerIndex = getPeerIndexFromPeerId(conn.peer);\n      notifyNewPeer(peerIndex);\n    });\n    conn.on(\"data\", (buf: ArrayBuffer) => handlePayload(conn, buf));\n    conn.peerConnection.addEventListener(\"icegatheringstatechange\", () => {\n      const pc = conn.peerConnection;\n      if (pc.iceGatheringState === \"complete\") {\n        pc.onicecandidate = () => undefined;\n      }\n    });\n    let negotiationScheduled = false;\n    conn.peerConnection.addEventListener(\"negotiationneeded\", async () => {\n      if (negotiationScheduled) return;\n      negotiationScheduled = true;\n      await sleep(5000);\n      negotiationScheduled = false;\n      if (!connMap.isConnected(conn.peer)) return;\n      const offer = await conn.peerConnection.createOffer();\n      await conn.peerConnection.setLocalDescription(offer);\n      sendSDP(conn, { offer });\n    });\n    conn.peerConnection.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      const { mid } = event.transceiver;\n      const mType = mid && connMap.getRemoteMediaType(conn, mid);\n      if (!mType) {\n        console.warn(\"failed to find media type from mid\");\n        return;\n      }\n      const connUserId = connMap.getUserId(conn);\n      if (connUserId) {\n        const info: PeerInfo = {\n          userId: connUserId,\n          peerIndex: getPeerIndexFromPeerId(conn.peer),\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        receiveTrack(\n          mType,\n          setupTrackStopOnLongMute(event.track, conn.peerConnection),\n          info\n        );\n      }\n    });\n    conn.on(\"close\", () => {\n      connMap.delConn(conn);\n      console.log(\"dataConnection closed\", conn);\n      updateNetworkStatus({\n        type: \"CONNECTION_CLOSED\",\n        peerIndex: getPeerIndexFromConn(conn),\n      });\n      showConnectedStatus();\n      if (connMap.getConnectedPeerIds().length === 0) {\n        reInitMyPeer(true);\n      } else if (\n        guessSeed(conn.peer) &&\n        !myPeer.disconnected &&\n        !guessSeed(myPeer.id)\n      ) {\n        const waitSec = 30 + Math.floor(Math.random() * 60);\n        console.log(\n          `Disconnected seed peer: ${getPeerIndexFromPeerId(\n            conn.peer\n          )}, reinit in ${waitSec}sec...`\n        );\n        setTimeout(reInitMyPeer, waitSec * 1000);\n      }\n    });\n  };\n\n  const reInitMyPeer = async (force?: boolean) => {\n    if (myPeer.disconnected) return; // should already be handled\n    if (!force) {\n      if (guessSeed(myPeer.id)) return;\n      let existsAllSeeds = true;\n      for (let i = MIN_SEED_PEER_INDEX; i <= MAX_SEED_PEER_INDEX; i += 1) {\n        const id = generatePeerId(roomId, i);\n        if (!connMap.isConnected(id)) {\n          existsAllSeeds = false;\n          break;\n        }\n      }\n      if (existsAllSeeds) {\n        showConnectedStatus();\n        return;\n      }\n    }\n    myPeer.destroy();\n    myPeer = await initMyPeer();\n  };\n\n  const acceptMediaTypes = (mTypes: string[]) => {\n    if (disposed) return;\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConnectedConns((conn) => {\n        const connUserId = connMap.getUserId(conn);\n        if (connUserId) {\n          const info: PeerInfo = {\n            userId: connUserId,\n            peerIndex: getPeerIndexFromPeerId(conn.peer),\n            mediaTypes: connMap.getAcceptingMediaTypes(conn),\n          };\n          const transceivers = conn.peerConnection.getTransceivers();\n          conn.peerConnection.getReceivers().forEach((receiver) => {\n            const transceiver = transceivers.find(\n              (t) => t.receiver === receiver\n            );\n            const mid = transceiver?.mid;\n            const mType = mid && connMap.getRemoteMediaType(conn, mid);\n            if (!mType) {\n              console.warn(\"failed to find media type from mid\");\n              return;\n            }\n            if (\n              receiver.track.readyState === \"live\" &&\n              !mediaTypes.includes(mType) &&\n              mTypes.includes(mType)\n            ) {\n              receiveTrack(\n                mType,\n                setupTrackStopOnLongMute(receiver.track, conn.peerConnection),\n                info\n              );\n            }\n          });\n        }\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (disposed) return;\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.peerConnection.addTrack(track, stream);\n      } catch (e) {\n        if (e.name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    if (disposed) return;\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.peerConnection.getSenders();\n      const sender = senders.find((s) => s.track === track);\n      if (sender) {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection.getSenders();\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.peerConnection.addTrack(track, stream);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective) {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n    if (senders.some((sender) => sender.track && !sender.transport)) {\n      conn.peerConnection.dispatchEvent(new Event(\"negotiationneeded\"));\n    }\n  };\n\n  const removeAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection.getSenders();\n    senders.forEach((sender) => {\n      if (sender.track) {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const dispose = () => {\n    disposed = true;\n    myPeer.destroy();\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","export const isObject = (x: unknown): x is Record<string, unknown> =>\n  typeof x === \"object\" && x !== null;\n\nexport const hasStringProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, string> =>\n  typeof (x as Record<Prop, unknown>)[prop] === \"string\";\n\nexport const hasObjectProp = <\n  Obj extends Record<string, unknown>,\n  Prop extends string\n>(\n  x: Obj,\n  prop: Prop\n): x is Obj & Record<Prop, Record<string, unknown>> =>\n  isObject((x as Record<Prop, unknown>)[prop]);\n\nexport type ReturnPromiseType<F extends (...args: any) => any> = ReturnType<\n  F\n> extends Promise<infer T>\n  ? T\n  : never;\n"],"sourceRoot":""}